<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[辰风君的笔记本]]></title>
  <link href="http://cwind001.github.io/atom.xml" rel="self"/>
  <link href="http://cwind001.github.io/"/>
  <updated>2017-08-31T00:39:25+08:00</updated>
  <id>http://cwind001.github.io/</id>
  <author>
    <name><![CDATA[辰风君]]></name>
    <email><![CDATA[billchen01@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java 8 Stream API 实战]]></title>
    <link href="http://cwind001.github.io/blog/2017/03/20/java8-stream-api-in-action/"/>
    <updated>2017-03-20T00:17:11+08:00</updated>
    <id>http://cwind001.github.io/blog/2017/03/20/java8-stream-api-in-action</id>
    <content type="html"><![CDATA[<p>谈起Java Stream API，我们希望能够弄明白它究竟是什么，能够用来做什么，有什么优势，并能够应用于具体场景。分别简述如下。</p>

<h2 id="section">不是什么</h2>
<ul>
  <li>Java Stream API 不是输入输出流，与java.io包里的InputStream和OutputStream概念完全不同</li>
  <li>不是用于解析XML的XMLStream</li>
  <li>不是Valve公司的<a href="http://store.steampowered.com/">游戏平台</a>  </li>
  <li>也不是集合元素，不是数据结构不保存数据</li>
</ul>

<h2 id="section-1">是什么</h2>
<ul>
  <li>是Java 8 中引入的新特性，是对集合（Collection）对象功能的增强</li>
  <li>是关于算法和计算的，更像一个高级版本的迭代器（Iterator）</li>
</ul>

<!--more-->

<h2 id="section-2">能够用来做什么</h2>
<p>用于对集合对象进行各种便利、高效的聚合操作，或大批量数据操作</p>

<h2 id="section-3">有何优势</h2>
<p>以往对于集合的聚合操作，需要使用Iterator遍历集合，代码繁冗；对于过滤和计算得到的中间结果，需要额外的空间进行存储<br />
Java Stream API解决了以上问题，遍历逻辑可以精简为一行，使得代码更加简洁易读。<br />
Java Stream提供串行和并行两种模式进行汇聚操作，能够充分利用多核处理器的优势，更方便写出高性能的并发程序且不易出错</p>

<h2 id="section-4">典型应用场景</h2>
<p><a href="https://github.com/cwind001/CwindJavaLab/blob/8cc89129a5ef3d288b59e02e4924ba2d7a597838/AdvancedJava/src/main/java/com/cwind/java8/stream/StreamAPIDemo.java">StreamAPIDemo</a><br />
定义商品对象并初始化购物清单如下：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="directive">public</span> <span class="type">class</span> <span class="class">StreamAPIDemo</span> {

    <span class="directive">private</span> <span class="predefined-type">List</span>&lt;Item&gt; shoppingList;

    <span class="annotation">@Before</span>
    <span class="directive">public</span> <span class="type">void</span> setUp() <span class="directive">throws</span> <span class="exception">Exception</span> {
        shoppingList = Lists.newArrayList();
        shoppingList.add(<span class="keyword">new</span> Item(<span class="string"><span class="delimiter">&quot;</span><span class="content">iPhone 7</span><span class="delimiter">&quot;</span></span>, <span class="integer">7250L</span>));
        shoppingList.add(<span class="keyword">new</span> Item(<span class="string"><span class="delimiter">&quot;</span><span class="content">Rolex Watch</span><span class="delimiter">&quot;</span></span>, <span class="integer">28888L</span>));
        shoppingList.add(<span class="keyword">new</span> Item(<span class="string"><span class="delimiter">&quot;</span><span class="content">Electric Toothbrush</span><span class="delimiter">&quot;</span></span>, <span class="integer">388L</span>));
        shoppingList.add(<span class="keyword">new</span> Item(<span class="string"><span class="delimiter">&quot;</span><span class="content">Kindle Paperwhite</span><span class="delimiter">&quot;</span></span>, <span class="integer">1098L</span>));
        shoppingList.add(<span class="keyword">new</span> Item(<span class="string"><span class="delimiter">&quot;</span><span class="content">Coca Cola</span><span class="delimiter">&quot;</span></span>, <span class="integer">3L</span>));
    }
    <span class="type">class</span> <span class="class">Item</span> {
        <span class="predefined-type">String</span> itemName;
        <span class="type">long</span> price;

        <span class="directive">public</span> Item(<span class="predefined-type">String</span> itemName, <span class="type">long</span> price) {
            <span class="local-variable">this</span>.itemName = itemName;
            <span class="local-variable">this</span>.price = price;
        }
    }
}
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="section-5">集合遍历</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
    <span class="comment">// 打印购物清单</span>
    <span class="annotation">@Test</span>
    <span class="directive">public</span> <span class="type">void</span> printShoppingList(){
        shoppingList.stream().forEach(<span class="predefined-type">System</span>.out::println);
    }
</pre></div>
</div>
 </figure></notextile></div>
<p>输出：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Item{itemName='iPhone 7', price=7250}
</span><span class="line">Item{itemName='Rolex Watch', price=28888}
</span><span class="line">Item{itemName='Electric Toothbrush', price=388}
</span><span class="line">Item{itemName='Kindle Paperwhite', price=1098}
</span><span class="line">Item{itemName='Coca Cola', price=3}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-6">数学统计</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
    <span class="comment">// 统计购物清单总数与总价</span>
    <span class="annotation">@Test</span>
    <span class="directive">public</span> <span class="type">void</span> printTotalPrice() {
        <span class="type">long</span> itemNum = shoppingList.stream().count();
        <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Sum of items in the shopping list: </span><span class="delimiter">&quot;</span></span> + itemNum);

        <span class="type">long</span> totalPrice = shoppingList.stream().collect(Collectors.summingLong(Item::getPrice));
        <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Total price: </span><span class="delimiter">&quot;</span></span> + totalPrice);
    }
</pre></div>
</div>
 </figure></notextile></div>
<p>输出：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Sum of items in the shopping list: 5
</span><span class="line">Total price: 37627</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-7">过滤与排序</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
    <span class="comment">// 过滤价格小于1000的商品</span>
    <span class="annotation">@Test</span>
    <span class="directive">public</span> <span class="type">void</span> filterItems(){
        shoppingList.stream().filter(p -&gt; p.getPrice() &gt;= <span class="integer">1000L</span>).forEach(<span class="predefined-type">System</span>.out::println);
    }

    <span class="comment">// 按价格排序</span>
    <span class="annotation">@Test</span>
    <span class="directive">public</span> <span class="type">void</span> sortItemsByPrice(){
        shoppingList.stream().sorted(<span class="predefined-type">Comparator</span>.comparingLong(Item::getPrice)).forEach(<span class="predefined-type">System</span>.out::println);
    }
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="mapreduce">MapReduce(映射与规约)</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
    <span class="comment">// 所有商品价格减100 - Map</span>
    <span class="annotation">@Test</span>
    <span class="directive">public</span> <span class="type">void</span> streamMap(){
        shoppingList.stream().map(p -&gt; <span class="keyword">new</span> Item(p.getItemName(), p.getPrice()-<span class="integer">100</span>)).forEach(<span class="predefined-type">System</span>.out::println);
    }
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
    <span class="comment">// 取出如上优惠之后金额超过1000元的商品中，价格最低的商品（最便宜的奢侈品）</span>
    <span class="annotation">@Test</span>
    <span class="directive">public</span> <span class="type">void</span> streamReduce(){
        Item cheapestLuxury = shoppingList.stream().map(p -&gt; <span class="keyword">new</span> Item(p.getItemName(), p.getPrice()-<span class="integer">100</span>))
            .filter(p -&gt; p.getPrice() &gt; <span class="integer">1000</span>).reduce((a, b) -&gt; a.getPrice()&lt;b.getPrice()?a:b).get();
        <span class="predefined-type">System</span>.out.println(cheapestLuxury);
    }
</pre></div>
</div>
 </figure></notextile></div>

<h2 id="section-8">参考</h2>
<ul>
  <li><a href="http://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/">Java 8 中的Streams API 详解</a> </li>
  <li><a href="http://blog.csdn.net/io_field/article/details/54971679">Java 8系列之Stream中万能的reduce</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MEAN全栈开发：前后端整合]]></title>
    <link href="http://cwind001.github.io/blog/2015/06/09/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/"/>
    <updated>2015-06-09T23:57:43+08:00</updated>
    <id>http://cwind001.github.io/blog/2015/06/09/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs</id>
    <content type="html"><![CDATA[<p>本文是由三个部分组成的系列教程的最后一篇。我们将使用MEAN技术栈（MongoDB，ExpressJS，AngularJS和NodeJS）构建一个待办事项应用程序。  </p>

<h1 id="section">第三部分：前后端整合</h1>
<p><img src="http://dl.iteye.com/upload/picture/pic/133685/7c4ef50f-b7cd-3334-a29e-816cfcea7eba.png" /> <br />
<!--more-->  </p>

<h2 id="section-1">后台服务端简述</h2>

<p>NodeJS是一个自底向上构建的非阻塞I/O范例，比起使用线程技术的其他语言如Java，它使得每个CPU的使用更加高效。<br />
LAMP技术栈（Linux-Apache-MySQL-PHP）是被广泛使用了多年的Web应用开发栈。很多著名的平台，如Wikipedia，Wordpress，甚至Facebook都正在使用它或是由它起步的。对于企业应用，通常来说走Java路线：Hibernate，Spring，Struts，JBoss。有些更敏捷的框架也被广泛使用，例如Ruby on Rails，对于Python而言则有Django和Pylon。  </p>

<p><img src="http://dl.iteye.com/upload/picture/pic/133687/f1084b0c-0f4a-323b-9834-0193a5896822.jpg" />  </p>

<p>（图片来自<a href="http://blog.backand.com/mean-vs-lamp/">backand.com</a>）  </p>

<p>那么，为什么又有MEAN栈呢？</p>

<p><strong>JavaScript无处不在</strong><br />
目前，JavaScript已经无处不在：智能手机，电脑，浏览器，服务器，机器人，开源硬件，迷你电脑等快速发展的领域。因此，不管你选取何种技术栈来构建Web应用，你需要熟悉JavaScript。在这种情况下，在任何它能够胜任的地方使用它将会节省时间，特别是用于构建Web应用。MEAN栈包含了所需要的全部，使用JavaScript构建一个从前端到后端的完整的Web应用。  </p>

<p><strong>非阻塞架构</strong><br />
JavaScript是动态类型，面向对象的功能性脚本语言。在数年前的脚本语言战争中，它能够胜过Java Applets的特性是，简单轻量以及非阻塞的事件循环。阻塞是指当执行某行代码时，其他代码被锁住并等待那行代码执行结束。相对的，非阻塞给予了每行代码执行机会，当事件发生时，可以通过回调来返回。阻塞式编程语言（Java，Ruby，Python，PHP，……）使用多线程技术来解决并发问题，而JavaScript通过单线程非阻塞事件循环来处理该问题。  </p>

<p><img src="http://dl.iteye.com/upload/picture/pic/133689/ba48f6f9-6434-371a-a1b3-611ef83c74fd.png" />
<img src="http://dl.iteye.com/upload/picture/pic/133691/c024765a-1a8d-3678-8f85-18298d0e670e.png" /></p>

<p>（图片来自<a href="http://strongloop.com/strongblog/node-js-is-faster-than-java/">strongloop.com</a>）  </p>

<p>一些公司如<a href="https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/">Paypal</a>将其Java后台服务端迁移到NodeJS上，然后发现性能有所提高，响应时间减少，同时开发速度加快了。同样的事情发生在<a href="https://engineering.groupon.com/2013/misc/i-tier-dismantling-the-monoliths/">Groupon</a>，它们由Java/Rails后台迁移而来。    </p>

<p><strong>敏捷且充满活力的社区</strong>  <br />
JavaScript背后的社区非常有活力，并且几乎涉足了技术相关的所有领域：数据可视化，客户端框架，服务端框架，数据库，机器人领域，构建工具等等。  </p>

<h2 id="section-2">搭建开发环境</h2>

<h3 id="menmongodbexpressjsnodejs">MEN：MongoDB，ExpressJS与NodeJS</h3>
<p>在<a href="http://gocwind.com/blog/2015/06/09/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">前一篇教程</a>里，我们一起构建了RESTful API，现在我们使用它创建Web应用。<a href="https://github.com/amejiarosario/todoAPIjs">完整代码</a>  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Getting the back-end code build on Part II </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>
git clone https:<span class="comment">//github.com/amejiarosario/todoAPIjs.git</span>
</pre></td>
</tr></table>
 </figure></notextile></div>

<h3 id="aangularjs">A：AngularJS</h3>
<p>在本系列教程的第一篇里，我们构建了一个非常简单的todoApp。你可以下载<a href="https://gist.githubusercontent.com/amejiarosario/068143b53e54db43ef38/raw/ngTodo.html">源文件</a>作为参照，或者查看<a href="https://cdn.rawgit.com/amejiarosario/068143b53e54db43ef38/raw/ngTodo.html">动态演示</a>。你可能注意到angularJS应用非常简单，甚至简单到可以完全在同一个文件。在后续的教程里，我们将把它模块化，放到不同文件，添加测试以及样式表。  </p>

<p>我们首先来看一下这个ExpressJS应用（todoAPIjs），回顾一下默认的路由机制。  </p>

<ol>
  <li><code>app.js</code>加载所有的路由。</li>
  <li>根路径(/)在<code>routes/index.js</code>中挂载。  </li>
  <li><code>routes/index.js</code>设置变量“title”的值，并渲染<code>index.ejs</code>。  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Tracing ExpressJS index route </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">// app.js</span>
<span class="keyword">var</span> routes = require(<span class="string"><span class="delimiter">'</span><span class="content">./routes/index</span><span class="delimiter">'</span></span>);
app.use(<span class="string"><span class="delimiter">'</span><span class="content">/</span><span class="delimiter">'</span></span>, routes);

<span class="comment">// ./routes/index.js</span>
router.get(<span class="string"><span class="delimiter">'</span><span class="content">/</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>(req, res) {
  res.render(<span class="string"><span class="delimiter">'</span><span class="content">index</span><span class="delimiter">'</span></span>, { <span class="key">title</span>: <span class="string"><span class="delimiter">'</span><span class="content">Express</span><span class="delimiter">'</span></span> });
});

<span class="comment">// ./views/index.ejs</span>
    <span class="tag">&lt;h1&gt;</span><span class="error">&lt;</span>%= title %<span class="error">&gt;</span><span class="tag">&lt;/h1&gt;</span>
    <span class="tag">&lt;p&gt;</span>Welcome to <span class="error">&lt;</span>%= title %<span class="error">&gt;</span><span class="tag">&lt;/p&gt;</span>
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>让我们把<code>ngTodo.html</code>中的文件内容拷贝到<code>./views/index.ejs</code>，在<code>./routes/index.js</code>把title值设为“ngTodo App”。不要忘记添加ng-app指令。<code>&lt;html ng-app="app"&gt;</code>。</p>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/ebf20f4093aa20c867777b4b3db825429b54a20d">变更</a>  </p>

<h2 id="section-3">前后端整合</h2>

<h3 id="angularjs-crud">AngularJS CRUD</h3>

<p><strong>通过$http读取数据</strong><br />
你可能已经注意到了，在前面的工厂方法中，我们返回的是一个固定的数组。现在我们修改它，让它与我们刚刚构建的API进行通信。  </p>

<p><code>$http</code>是一个Angular核心服务，为应用提供了发送<code>XMLHttpRequest</code>或<code>jsonp</code>请求的方式。你可以通过http指令传递对象，或者调用$http.verb(<code>$http.get</code>，<code>$http.post</code>)。  </p>

<p><code>$http</code>返回一个promise，它有<code>success</code>和<code>error</code>两个方法。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>AngularJS $HTTP Usage Example </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>
<span class="predefined">$http</span>({<span class="key">method</span>: <span class="string"><span class="delimiter">'</span><span class="content">GET</span><span class="delimiter">'</span></span>, <span class="key">url</span>: <span class="string"><span class="delimiter">'</span><span class="content">/todos</span><span class="delimiter">'</span></span>}).
  success(<span class="keyword">function</span>(data, status, headers, config) {
    <span class="comment">// this callback will be called asynchronously</span>
    <span class="comment">// when the response is available.</span>
    console.log(<span class="string"><span class="delimiter">'</span><span class="content">todos: </span><span class="delimiter">'</span></span>, data );
  }).
  error(<span class="keyword">function</span>(data, status, headers, config) {
    <span class="comment">// called asynchronously if an error occurs</span>
    <span class="comment">// or server returns response with an error status.</span>
    console.log(<span class="string"><span class="delimiter">'</span><span class="content">Oops and error</span><span class="delimiter">'</span></span>, data);
  });
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>现在尝试把它用到我们的应用里。打开<code>vies/index.ejs</code>做如下改动：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Using $http to retrieve data from database </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
</pre></td>
  <td class="code"><pre>
    <span class="comment">// Service</span>
    .factory(<span class="string"><span class="delimiter">'</span><span class="content">Todos</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">$http</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>(<span class="predefined">$http</span>){
      <span class="keyword">return</span> <span class="predefined">$http</span>.get(<span class="string"><span class="delimiter">'</span><span class="content">/todos</span><span class="delimiter">'</span></span>);
    }])

    <span class="comment">// Controller</span>
    .controller(<span class="string"><span class="delimiter">'</span><span class="content">TodoController</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">$scope</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Todos</span><span class="delimiter">'</span></span>, <span class="keyword">function</span> (<span class="predefined">$scope</span>, Todos) {
      Todos.success(<span class="keyword">function</span>(data){
        <span class="predefined">$scope</span>.todos = data;
      }).error(<span class="keyword">function</span>(data, status){
        console.log(data, status);
        <span class="predefined">$scope</span>.todos = [];
      });
    }])
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>如果你在MongoDB中有数据，你就可以在首页中看到它们。如果没有，可以参照上篇教程添加一些数据。  </p>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/0221aebd62e88445629debe4f132684686cf48ec">变更</a>  </p>

<p><strong>通过$resource读取数据</strong><br />
如果你点击任何一个代办事项，你将被重定向到详情页面。目前你还不会看到任何东西。我们需要先更新<code>TodoDetailCtrl</code>。目前为止，GET方法已经可以正常工作了。有个封装了处理RESTful请求的高层抽象的Angular服务：<code>$resource</code>。  </p>

<p>初始化：<code>$resource(url, [paramDefaults], [actions], options);</code>  </p>

<p>它包含了下面几个我们之前已经定义的动作。但是少了一个，你能发现缺少的是哪一个吗？  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>$resource actions </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>
{ <span class="key"><span class="delimiter">'</span><span class="content">get</span><span class="delimiter">'</span></span>:    {<span class="key">method</span>:<span class="string"><span class="delimiter">'</span><span class="content">GET</span><span class="delimiter">'</span></span>},  <span class="comment">// get individual record</span>
  <span class="key"><span class="delimiter">'</span><span class="content">save</span><span class="delimiter">'</span></span>:   {<span class="key">method</span>:<span class="string"><span class="delimiter">'</span><span class="content">POST</span><span class="delimiter">'</span></span>}, <span class="comment">// create record</span>
  <span class="key"><span class="delimiter">'</span><span class="content">query</span><span class="delimiter">'</span></span>:  {<span class="key">method</span>:<span class="string"><span class="delimiter">'</span><span class="content">GET</span><span class="delimiter">'</span></span>, <span class="key">isArray</span>:<span class="predefined-constant">true</span>}, <span class="comment">// get list all records</span>
  <span class="key"><span class="delimiter">'</span><span class="content">remove</span><span class="delimiter">'</span></span>: {<span class="key">method</span>:<span class="string"><span class="delimiter">'</span><span class="content">DELETE</span><span class="delimiter">'</span></span>}, <span class="comment">// remove record</span>
  <span class="key"><span class="delimiter">'</span><span class="content">delete</span><span class="delimiter">'</span></span>: {<span class="key">method</span>:<span class="string"><span class="delimiter">'</span><span class="content">DELETE</span><span class="delimiter">'</span></span>} }; <span class="comment">// same, remove record</span>
}
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>实例的使用方式见下（稍后给出示例）：  </p>

<ul>
  <li>GET: <code>Resource.get([parameters], [success], [error])</code>  </li>
  <li>Non-GET: <code>Resource.action([parameters], postData, [success], [error])</code>  </li>
  <li>Non-GET: <code>resourceInstance.$action([parameters], [success], [error])</code>    </li>
  <li><code>$resource</code>并不是Angular核心的一部分，它需要引入<code>ngResource</code>作为依赖。我们可以通过CDN获取它： 
<code>&lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular-resource.min.js"&gt;&lt;/script&gt;</code>  </li>
</ul>

<p>引入依赖并使用它的示例：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>$resource.query() </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>
  <span class="comment">// add ngResource dependency</span>
  angular.module(<span class="string"><span class="delimiter">'</span><span class="content">app</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">ngRoute</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">ngResource</span><span class="delimiter">'</span></span>])
        .factory(<span class="string"><span class="delimiter">'</span><span class="content">Todos</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">$resource</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>(<span class="predefined">$resource</span>){
          <span class="keyword">return</span> <span class="predefined">$resource</span>(<span class="string"><span class="delimiter">'</span><span class="content">/todos/:id</span><span class="delimiter">'</span></span>, <span class="predefined-constant">null</span>, {
            <span class="key"><span class="delimiter">'</span><span class="content">update</span><span class="delimiter">'</span></span>: { <span class="key">method</span>:<span class="string"><span class="delimiter">'</span><span class="content">PUT</span><span class="delimiter">'</span></span> }
          });
        }])
        .controller(<span class="string"><span class="delimiter">'</span><span class="content">TodoController</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">$scope</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Todos</span><span class="delimiter">'</span></span>, <span class="keyword">function</span> (<span class="predefined">$scope</span>, Todos) {
          <span class="predefined">$scope</span>.todos = Todos.query();
        }])
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>请注意<code>$resource</code>并不像<code>$http</code>那样返回一个promise，它会返回一个空引用。Angular会使用一个空的<code>$scope.todos</code>来进行渲染。当<code>Todos.query()</code>返回从服务器读取的数据时，UI将会自动被重新渲染。  </p>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/2aff6fe004bf7f7b2cd1b91d53e6958c3b158a20">变更</a>  </p>

<p><strong>AngualrJS新建</strong><br />
我们需要创建一个新的文本框，一个按钮来发送<code>POST</code>请求给服务器，并将其添加到<code>$scope</code>。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>New textbox for adding Todos </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>  
New task &lt;input type=<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span> ng-model=<span class="string"><span class="delimiter">&quot;</span><span class="content">newTodo</span><span class="delimiter">&quot;</span></span>&gt;&lt;button ng-click=<span class="string"><span class="delimiter">&quot;</span><span class="content">save()</span><span class="delimiter">&quot;</span></span>&gt;Create&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">button&gt;
</span></span></pre></td>
</tr></table>
 </figure></notextile></div>

<p>请注意这里我们使用了一个新的指令<code>ng-click</code>，当它被点击时，执行指定函数。Angular会保证不同浏览器的行为都是一致的。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Save function $resource.$save(…) </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
</pre></td>
  <td class="code"><pre>  
.controller(<span class="string"><span class="delimiter">'</span><span class="content">TodoController</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">$scope</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Todos</span><span class="delimiter">'</span></span>, <span class="keyword">function</span> (<span class="predefined">$scope</span>, Todos) {
      <span class="predefined">$scope</span>.todos = Todos.query();

      <span class="predefined">$scope</span>.<span class="function">save</span> = <span class="keyword">function</span>(){
        <span class="keyword">if</span>(!<span class="predefined">$scope</span>.newTodo || <span class="predefined">$scope</span>.newTodo.length &lt; <span class="integer">1</span>) <span class="keyword">return</span>;
        <span class="keyword">var</span> todo = <span class="keyword">new</span> Todos({ <span class="key">name</span>: <span class="predefined">$scope</span>.newTodo, <span class="key">completed</span>: <span class="predefined-constant">false</span> });

        todo.<span class="predefined">$save</span>(<span class="keyword">function</span>(){
          <span class="predefined">$scope</span>.todos.push(todo);
          <span class="predefined">$scope</span>.newTodo = <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>; <span class="comment">// clear textbox</span>
        });
      }
    }])
</pre></td>
</tr></table>
 </figure></notextile></div>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/46dd14023e2d9eff72d1366dbba9c9c8c872e07b">变更</a>  </p>

<p><strong>显示待办事项详情</strong><br />
每次我们点击待办事项链接时，显示的内容为空。现在我们对此做点改动。首先我们需要设置真实的<code>_id</code>给链接，以取代索引<code>$index</code>。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Change the ID link in the “/todos.html” template </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre>  
    <span class="tag">&lt;li</span> <span class="attribute-name">ng-repeat</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo in todos | filter: search</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
      <span class="tag">&lt;input</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">checkbox</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-model</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo.completed</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
      <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/a&gt;</span>
    <span class="tag">&lt;/li&gt;</span>
</pre></td>
</tr></table>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Update TodoDetailCtrl with $resource.get </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre> 
    .controller(<span class="string"><span class="delimiter">'</span><span class="content">TodoDetailCtrl</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">$scope</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">$routeParams</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Todos</span><span class="delimiter">'</span></span>, 
<span class="keyword">function</span> (<span class="predefined">$scope</span>, <span class="predefined">$routeParams</span>, Todos) {
      <span class="predefined">$scope</span>.todo = Todos.get({<span class="key">id</span>: <span class="predefined">$routeParams</span>.id });
    }])
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>现在你可以看到待办事项详情了。:-)</p>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/2484107294163a25621fba3785601adb32229ae9">变更</a>  </p>

<p><strong>AngularJS更新（在线编辑）</strong><br />
这是一个非常酷的功能。先来了解一下相关的新的指令：  </p>

<ul>
  <li><strong>ng-show</strong>: 当指定的变量为true时，显示元素；当变量为false时隐藏。  </li>
  <li><strong>ng-change</strong>: 发生任何改动后，用来求输入元素表达式的值的指令。  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Template todos.html </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
</pre></td>
  <td class="code"><pre> 
<span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/ng-template</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">/todos.html</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="inline">  Search: &lt;input type=<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span> ng-model=<span class="string"><span class="delimiter">&quot;</span><span class="content">search.name</span><span class="delimiter">&quot;</span></span>&gt;
  &lt;ul &gt;
    <span class="tag">&lt;li</span> <span class="attribute-name">ng-repeat</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo in todos | filter: search</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
      <span class="tag">&lt;input</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">checkbox</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-model</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo.completed</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-change</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">update($index)</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
      <span class="tag">&lt;a</span> <span class="attribute-name">ng-show</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">!editing[$index]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/a&gt;</span>
      <span class="tag">&lt;button</span> <span class="attribute-name">ng-show</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">!editing[$index]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-click</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">edit($index)</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>edit<span class="tag">&lt;/button&gt;</span>

      <span class="tag">&lt;input</span> <span class="attribute-name">ng-show</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">editing[$index]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-model</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo.name</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
      <span class="tag">&lt;button</span> <span class="attribute-name">ng-show</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">editing[$index]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-click</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">update($index)</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Update<span class="tag">&lt;/button&gt;</span>
      <span class="tag">&lt;button</span> <span class="attribute-name">ng-show</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">editing[$index]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-click</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">cancel($index)</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Cancel<span class="tag">&lt;/button&gt;</span>
    <span class="tag">&lt;/li&gt;</span>
  &lt;<span class="regexp"><span class="delimiter">/</span><span class="content">ul &gt;
  New task &lt;input type=&quot;text&quot; ng-model=&quot;newTodo&quot;&gt;&lt;button ng-click=&quot;save()&quot;&gt;Create&lt;</span><span class="delimiter">/</span></span>button&gt;</span>
<span class="tag">&lt;/script&gt;</span>
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>我们添加了一个新的变量<code>$scope.editing</code>用来指示表单中编辑区域显示与否。更进一步，请注意ng-click函数：编辑、更新与取消。我们来看看它们做了些什么。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Todo Controller </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
</pre></td>
  <td class="code"><pre> 
    .controller(<span class="string"><span class="delimiter">'</span><span class="content">TodoController</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">$scope</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Todos</span><span class="delimiter">'</span></span>, <span class="keyword">function</span> (<span class="predefined">$scope</span>, Todos) {
      <span class="predefined">$scope</span>.editing = [];
      <span class="predefined">$scope</span>.todos = Todos.query();

      <span class="predefined">$scope</span>.<span class="function">save</span> = <span class="keyword">function</span>(){
        <span class="keyword">if</span>(!<span class="predefined">$scope</span>.newTodo || <span class="predefined">$scope</span>.newTodo.length &lt; <span class="integer">1</span>) <span class="keyword">return</span>;
        <span class="keyword">var</span> todo = <span class="keyword">new</span> Todos({ <span class="key">name</span>: <span class="predefined">$scope</span>.newTodo, <span class="key">completed</span>: <span class="predefined-constant">false</span> });

        todo.<span class="predefined">$save</span>(<span class="keyword">function</span>(){
          <span class="predefined">$scope</span>.todos.push(todo);
          <span class="predefined">$scope</span>.newTodo = <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>; <span class="comment">// clear textbox</span>
        });
      }

      <span class="predefined">$scope</span>.<span class="function">update</span> = <span class="keyword">function</span>(index){
        <span class="keyword">var</span> todo = <span class="predefined">$scope</span>.todos[index];
        Todos.update({<span class="key">id</span>: todo._id}, todo);
        <span class="predefined">$scope</span>.editing[index] = <span class="predefined-constant">false</span>;
      }

      <span class="predefined">$scope</span>.<span class="function">edit</span> = <span class="keyword">function</span>(index){
        <span class="predefined">$scope</span>.editing[index] = angular.copy(<span class="predefined">$scope</span>.todos[index]);
      }

      <span class="predefined">$scope</span>.<span class="function">cancel</span> = <span class="keyword">function</span>(index){
        <span class="predefined">$scope</span>.todos[index] = angular.copy(<span class="predefined">$scope</span>.editing[index]);
        <span class="predefined">$scope</span>.editing[index] = <span class="predefined-constant">false</span>;
      }
    }])
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>当我们编辑时请注意我们把原始todo任务拷贝到editing变量。这能够起到两个作用：1. 将值置为<code>ture</code>以显示带有<code>ng-show</code>的表单元素，2. 保存原始值的拷贝，以防我们点击取消。  </p>

<p>现在，我们来看一下待办事项细节页面。我们将它像添加记录页面一样去更新一下。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Todo Details </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre> 
<span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/ng-template</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">/todoDetails.html</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="inline">  <span class="tag">&lt;h1&gt;</span><span class="tag">&lt;/h1&gt;</span>
  completed: &lt;input type=<span class="string"><span class="delimiter">&quot;</span><span class="content">checkbox</span><span class="delimiter">&quot;</span></span> ng-model=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo.completed</span><span class="delimiter">&quot;</span></span>&gt;&lt;br&gt;
  note: <span class="tag">&lt;textarea</span> <span class="attribute-name">ng-model</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo.note</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/textarea&gt;</span>&lt;br&gt;&lt;br&gt;

  <span class="tag">&lt;button</span> <span class="attribute-name">ng-click</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">update()</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Update<span class="tag">&lt;/button&gt;</span>
  <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Cancel<span class="tag">&lt;/a&gt;</span></span>
<span class="tag">&lt;/script&gt;</span>
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>类似的，我们添加了一个更新函数。然而，这一次我们不需要传递任何索引，因为每次只会有一个待办事项。保存了之后，我们转到根路径<code>/</code>。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Todo Details </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre> 
    .controller(<span class="string"><span class="delimiter">'</span><span class="content">TodoDetailCtrl</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">$scope</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">$routeParams</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Todos</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">$location</span><span class="delimiter">'</span></span>, 
<span class="keyword">function</span> (<span class="predefined">$scope</span>, <span class="predefined">$routeParams</span>, Todos, <span class="predefined">$location</span>) {
      <span class="predefined">$scope</span>.todo = Todos.get({<span class="key">id</span>: <span class="predefined">$routeParams</span>.id });

      <span class="predefined">$scope</span>.<span class="function">update</span> = <span class="keyword">function</span>(){
        Todos.update({<span class="key">id</span>: <span class="predefined">$scope</span>.todo._id}, <span class="predefined">$scope</span>.todo, <span class="keyword">function</span>(){
          <span class="predefined">$location</span>.url(<span class="string"><span class="delimiter">'</span><span class="content">/</span><span class="delimiter">'</span></span>);
        });
      }
    }])
</pre></td>
</tr></table>
 </figure></notextile></div>

<ul>
  <li><code>$location.url([url])</code>是一个能够让我们改变url的getter/setter方法，从而改动路由/视图。  </li>
</ul>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/b6394448e1e1e8384815877df764507d6562dc4d">变更</a>  </p>

<p><strong>AngularJS 删除</strong><br />
这是用于实现删除功能的函数。相当直白。请注意当我们从代办事项数组中删除元素时，<code>$scope.todos.splice(index, 1)</code>它同时会从DOM中消失。非常酷，是吧？  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Delete functionality (diff) </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
</pre></td>
  <td class="code"><pre> 
diff --git a/views/index.ejs b/views/index.ejs
index <span class="integer">9</span>c3ef46..afb37e1 <span class="integer">100644</span>
--- a/views/index.ejs
+++ b/views/index.ejs
<span class="error">@</span><span class="error">@</span> -<span class="integer">22</span>,<span class="integer">6</span> +<span class="integer">22</span>,<span class="integer">7</span> <span class="error">@</span><span class="error">@</span>
           &lt;input type=<span class="string"><span class="delimiter">&quot;</span><span class="content">checkbox</span><span class="delimiter">&quot;</span></span> ng-model=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo.completed</span><span class="delimiter">&quot;</span></span> ng-change=<span class="string"><span class="delimiter">&quot;</span><span class="content">update($index)</span><span class="delimiter">&quot;</span></span>&gt;
           <span class="tag">&lt;a</span> <span class="attribute-name">ng-show</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">!editing[$index]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/a&gt;</span>
           <span class="tag">&lt;button</span> <span class="attribute-name">ng-show</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">!editing[$index]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-click</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">edit($index)</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>edit<span class="tag">&lt;/button&gt;</span>
+          <span class="tag">&lt;button</span> <span class="attribute-name">ng-show</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">!editing[$index]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-click</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">remove($index)</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>remove<span class="tag">&lt;/button&gt;</span>

           &lt;input ng-show=<span class="string"><span class="delimiter">&quot;</span><span class="content">editing[$index]</span><span class="delimiter">&quot;</span></span> type=<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span> ng-model=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo.name</span><span class="delimiter">&quot;</span></span>&gt;
           <span class="tag">&lt;button</span> <span class="attribute-name">ng-show</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">editing[$index]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-click</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">update($index)</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>update<span class="tag">&lt;/button&gt;</span>
<span class="error">@</span><span class="error">@</span> -<span class="integer">37</span>,<span class="integer">6</span> +<span class="integer">38</span>,<span class="integer">7</span> <span class="error">@</span><span class="error">@</span>
       note: <span class="tag">&lt;textarea</span> <span class="attribute-name">ng-model</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo.note</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/textarea&gt;</span>&lt;br&gt;&lt;br&gt;

       <span class="tag">&lt;button</span> <span class="attribute-name">ng-click</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">update()</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>update<span class="tag">&lt;/button&gt;</span>
+      <span class="tag">&lt;button</span> <span class="attribute-name">ng-click</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">remove()</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>remove<span class="tag">&lt;/button&gt;</span>
       <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Cancel<span class="tag">&lt;/a&gt;</span>
     &lt;<span class="regexp"><span class="delimiter">/</span><span class="content">script&gt;

@@ -85,6 +87,13 @@
             $scope.todos[index] = angular.copy($scope.editing[index]);
             $scope.editing[index] = false;
           }
+
+          $scope.remove = function(index){
+            var todo = $scope.todos[index];
+            Todos.remove({id: todo._id}, function(){
+              $scope.todos.splice(index, 1);
+            });
+          }
         }])

         .controller('TodoDetailCtrl', ['$scope', '$routeParams', 'Todos', '$location', 
function ($scope, $routeParams, Todos, $location) {
@@ -95,6 +104,12 @@
               $location.url('</span><span class="delimiter">/</span></span><span class="string"><span class="delimiter">'</span><span class="content">);
             });
           }
+
+          $scope.remove = function(){
+            Todos.remove({id: $scope.todo._id}, function(){
+              $location.url(</span><span class="delimiter">'</span></span>/<span class="string"><span class="delimiter">'</span><span class="content">);
+            });
+          }
         }])

         //---------------
</span></span></pre></td>
</tr></table>
 </figure></notextile></div>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/b9ff3a863c78d72e71b5cc9eb573bb3cb9d87179">变更</a>  </p>

<p><strong>恭喜！你现在已经是一个MEAN全栈开发者了！</strong>  </p>

<h2 id="section-4">下一步？</h2>
<p>学习如何使用GruntJS，来自动完成MEAN开发工作流中那些重复的任务。<br />
<a href="http://adrianmejia.com/blog/2014/10/07/grunt-js-tutorial-from-beginner-to-ninja/">GruntJS 教程</a>  </p>

<p>同时，你也可以去更多了解一些全栈开发框架解决方案。  </p>

<h2 id="javascript-web">JavaScript Web全栈开发框架</h2>
<p>我们在系列教程中做的事情可以通过只是在命令行中敲击几个按键完成 ;-)。然而，了解发生了什么是很有好处的。所以，我将会介绍几个框架给你，这将会节省许多时间。  </p>

<h3 id="meanio">使用MEAN.io</h3>

<p><a href="http://mean.io/">MeanIO</a>使用一个定制的CLI工具：’mean’。它的自包含的包中既有客户端也有服务器端代码，在模块化的道路上更进了异步。在写本文的时候，它包含了MEAN-Admin，翻译，文件上传，图像处理等若干实用模块。   </p>

<h3 id="meanjs">使用MEAN.js</h3>
<p><a href="http://meanjs.org/">MeanJS</a>由MEAN.IO的一个分支发展而来，它使用Yeoman生成器来产生Angular的CRUD模块，路由，控制器，视图，服务及其他。也包含了用于Express的生成器：模型，控制器，路由和测试。它有非常好的文档支持。  </p>

<h3 id="section-5">其他框架</h3>
<ul>
  <li><a href="https://www.meteor.com/">Meteor</a> - Meteor是一个用于快速构建高质量Web应用的开源平台，不管你是专家还是初学者。  </li>
  <li><a href="http://sailsjs.org/">Sails</a> - 一个用于开发下一代Web应用的梦想中的Web框架。  </li>
  <li><a href="https://developer.yahoo.com/cocktails/mojito/">Yahoo! Mojito</a> - 一个用于开发移动应用的JavaScript MVC框架，Yahoo! Cocktails的组成部分。  </li>
  <li><a href="http://towerjs.org/">Tower.js</a> - 用于构建应用，操作数据，自动化分布式基础设施的小型组件  </li>
</ul>

<p>原文链接：<a href="http://adrianmejia.com/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">MEAN Stack Tutorial MongoDB ExpressJS AngularJS NodeJS (Part III)</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MEAN全栈开发：使用NodeJS和MongoDB创建REST服务]]></title>
    <link href="http://cwind001.github.io/blog/2015/06/09/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/"/>
    <updated>2015-06-09T21:30:19+08:00</updated>
    <id>http://cwind001.github.io/blog/2015/06/09/creating-a-restful-api-tutorial-with-nodejs-and-mongodb</id>
    <content type="html"><![CDATA[<p>本教程介绍如何使用Node.js (Express.js) 和MongoDB (mongoose) 创建REST服务。你可以参考本教程创建一个独立的后台服务，也可以回顾之前的<a href="http://gocwind.com/blog/2015/06/05/angularjs-tutorial-for-beginners/">AngularJS</a>或是<a href="http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started">BackboneJS</a>教程来构建一个javascript客户端，来与我们将要构建的后台集成。  </p>

<p><img class="left" src="http://dl.iteye.com/upload/picture/pic/133663/abf21050-a55a-347e-9e0f-501586af10c7.png" /><br />
<img src="http://dl.iteye.com/upload/picture/pic/133661/636d3c41-5c03-33a4-af9f-a539fc997fcd.png" /><br />
<!--more-->  </p>

<h1 id="nodejsmongodbrest">第二部分 使用NodeJS和MongoDB创建REST服务</h1>

<h2 id="restful-api">RESTful API是什么</h2>

<p>REST指表述性状态转移。它是允许以统一的接口进行客户端-服务器通信的架构。REST是“无状态”、“可缓存”以及“幂等”的。幂等意味着多次调用与单次请求的结果相同。  </p>

<p>HTTP RESTful API 由以下要素组成：  </p>

<ul>
  <li>HTTP方法，如GET，PUT，DELETE，PATCH，POST，……  </li>
  <li>基本URL，如 http://gocwind.com/   </li>
  <li>URL路径，如 /blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/  </li>
  <li>媒介类型，如html，JSON，XML，Microformats，Atom，Images……  </li>
</ul>

<p>下表是我们将要实现的API摘要：  </p>
<table>
<tbody>
<tr><td><strong>Resource(URI) </strong></td><td><strong>POST(创建) </strong></td><td><strong>GET(读取) </strong></td><td><strong>PUT(更新 )</strong></td><td><strong>DELETE(删除) </strong></td></tr>
<tr><td>/todos</td><td>创建新的任务 </td><td>列出所有任务  </td><td>N/A（更新全部）</td><td>N/A（删除全部） </td></tr>
<tr><td>/todos/1</td><td>错误 </td><td>显示ID为1的任务  </td><td>更新ID为1的任务  </td><td>删除ID为1的任务  </td></tr>
</tbody>
</table>
<p><br /></p>

<p><strong>注意</strong>：我们采用JSON格式。批量更新和批量删除并不安全，所以我们将不实现这两个接口。POST，GET，PUT，DELETE方法分别对应创建(CREATE)，查询(READ)，更新(UPDATE)，删除(DELETE)操作，即CRUD。  </p>

<h2 id="section">搭建开发环境</h2>

<p>MEAN技术栈的两个主要组件是NodeJS以及MongoDB。<br />
<img src="http://dl.iteye.com/upload/picture/pic/133677/a1b8cfdb-27cc-3d4f-8494-7cde0cb41ff9.png" />  </p>

<p>注意：如果你已经安装了NodeJS，MongoDB(Mongoose)，ExpressJS并且分别对它们已经有所了解，你可以跳过下面一节。如果你想要回顾或了解以上的每个成员，请继续阅读。  </p>

<h2 id="nodejs">NodeJS</h2>
<p>简言之，NodeJS是运行在服务器上，浏览器之外的JavaScript。    </p>

<p>安装NodeJS，可以访问<a href="http://nodejs.org/">NodeJS官方网站</a>。如果你使用Mac和<a href="http://brew.sh/">brew</a>你可以执行brew install nodejs，如果你使用ubuntu可以利用<a href="https://github.com/creationix/nvm">nvm</a>来安装它。  </p>

<p>检查node版本和npm版本：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>  
node -v
<span class="error">#</span> =&gt; v0<span class="float">.12</span><span class="float">.4</span>

npm -v
<span class="error">#</span> =&gt; <span class="float">2.10</span><span class="float">.1</span>
</pre></td>
</tr></table>
 </figure></notextile></div>

<h2 id="expressjs">ExpressJS</h2>

<p>ExpressJS是运行在NodeJS上的Web应用框架。它可以用于构建Web应用或API服务（后文详述）。  </p>

<p>利用npm安装它：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre> 
npm install -g express
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>请注意<code>-g</code>选项。它将会把<code>express</code>安装供全局使用，并加入<code>PATH</code>环境变量，因此你可以在任何地方运行它。  </p>

<p>检查版本：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>   
express --version
<span class="error">#</span> =&gt; <span class="float">4.12</span><span class="float">.4</span>
</pre></td>
</tr></table>
 </figure></notextile></div>

<h2 id="mongodb">MongoDB</h2>

<p>MongoDB是一个面向文档的NoSQL数据库（可用于处理大数据）。它将数据以JSON格式存储，允许执行类似SQL的查询。
你可以参照<a href="http://docs.mongodb.org/manual/installation/">这篇文档</a>来安装它。如果你使用Mac和brew，就可以简单执行：<code>brew install mongodb &amp;&amp; mongod</code>。在ubuntu下则是 <code>sudo apt-get -y install mongodb</code>。   </p>

<p>检查版本：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre>  
<span class="error">#</span> Mac
mongod --version
<span class="error">#</span> =&gt; db version v2<span class="float">.6</span><span class="float">.4</span>
<span class="error">#</span> =&gt; <span class="integer">2014</span>-<span class="integer">10</span>-<span class="octal">01</span>T19:<span class="octal">07</span>:<span class="float">26.649</span>-<span class="octal">0400</span> git version: nogitversion

<span class="error">#</span> Ubuntu
mongod --version
<span class="error">#</span> =&gt; db version v2<span class="float">.0</span><span class="float">.4</span>, pdfile version <span class="float">4.5</span>
<span class="error">#</span> =&gt; Wed Oct  <span class="integer">1</span> <span class="integer">23</span>:<span class="octal">06</span>:<span class="integer">54</span> git version: nogitversion
</pre></td>
</tr></table>
 </figure></notextile></div>

<h2 id="mean">理解MEAN技术栈</h2>

<p>经过以上几步你已经准备好了用于完成本教程的所有事情。简单地说，我们将会构建RESTful API，使得用户可以执行CRUD（创建-读取-更新-删除）操作，来处理数据库中的Todo任务。  </p>

<h3 id="mongoose-crud">Mongoose CRUD</h3>

<p>CRUD = Create-Read-Update-Delete (创建-读取-更新-删除)  </p>

<p>我们可以在控制台里使用Mongoose。在<code>todoAPIjs</code>目录，键入<code>node</code>来进入node CLI，然后：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre> 
<span class="comment">/* prompt&gt; */</span> <span class="keyword">var</span> mongoose = require(<span class="string"><span class="delimiter">'</span><span class="content">mongoose</span><span class="delimiter">'</span></span>);

<span class="comment">/* prompt&gt; */</span> mongoose.connect(<span class="string"><span class="delimiter">'</span><span class="content">mongodb://localhost/test3</span><span class="delimiter">'</span></span>);

<span class="comment">/* prompt&gt; */</span> <span class="keyword">var</span> TodoSchema = <span class="keyword">new</span> mongoose.Schema({
  <span class="key">name</span>: String,
  <span class="key">completed</span>: Boolean,
  <span class="key">note</span>: String,
  <span class="key">updated_at</span>: { <span class="key">type</span>: Date, <span class="keyword">default</span>: Date.now },
});

<span class="comment">/* prompt&gt; */</span> <span class="keyword">var</span> Todo = mongoose.model(<span class="string"><span class="delimiter">'</span><span class="content">Todo</span><span class="delimiter">'</span></span>, TodoSchema);
</pre></td>
</tr></table>
 </figure></notextile></div>

<p><strong>Mongoose 创建</strong>  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre>  
<span class="comment">/* prompt&gt; */</span> <span class="keyword">var</span> todo = <span class="keyword">new</span> Todo({<span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Master NodeJS</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span>, <span class="key">note</span>: <span class="string"><span class="delimiter">'</span><span class="content">Getting 
there...</span><span class="delimiter">'</span></span>});

<span class="comment">/* prompt&gt; */</span> todo.save(<span class="keyword">function</span>(err){
    <span class="keyword">if</span>(err)
        console.log(err);
    <span class="keyword">else</span>
        console.log(todo);
});
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>你可以创建对象，并利用<code>create</code>来进行保存：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>  
<span class="comment">/* prompt&gt; */</span> Todo.create({<span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Master Javscript</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">true</span>, <span class="key">note</span>: <span class="string"><span class="delimiter">'</span><span class="content">Getting better 
everyday</span><span class="delimiter">'</span></span>}, <span class="keyword">function</span>(err, todo){
    <span class="keyword">if</span>(err) console.log(err);
    <span class="keyword">else</span> console.log(todo);
});
</pre></td>
</tr></table>
 </figure></notextile></div>

<p><strong>Mongoose 读取与查询</strong>  </p>

<p>读取/查询数据有下列多种方式：  </p>

<ul>
  <li>Model.find(conditions, [fields], [options], [callback])   </li>
  <li>Model.findById(id, [fields], [options], [callback])   </li>
  <li>Model.findOne(conditions, [fields], [options], [callback])</li>
</ul>

<p>一些例子：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Find all </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre>  
<span class="comment">/* prompt&gt; */</span> Todo.find(<span class="keyword">function</span> (err, todos) {
  <span class="keyword">if</span> (err) <span class="keyword">return</span> console.error(err);
  console.log(todos)
});
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>你也可以加入查询条件：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Find with queries </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>  
<span class="comment">/* prompt&gt; */</span> <span class="keyword">var</span> <span class="function">callback</span> = <span class="keyword">function</span> (err, data) {
  <span class="keyword">if</span> (err) <span class="keyword">return</span> console.error(err);
  <span class="keyword">else</span> console.log(data);
}

<span class="comment">// Get all completed tasks</span>
<span class="comment">/* prompt&gt; */</span> Todo.find({<span class="key">completed</span>: <span class="predefined-constant">true</span> }, callback);

<span class="comment">// Get all tasks ending with `JS`</span>
<span class="comment">/* prompt&gt; */</span> Todo.find({<span class="key">name</span>: <span class="regexp"><span class="delimiter">/</span><span class="content">JS$</span><span class="delimiter">/</span></span> }, callback);
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>当然，也可以加入多个查询条件，例如：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre>  
<span class="comment">/* prompt&gt; */</span> <span class="keyword">var</span> oneYearAgo = <span class="keyword">new</span> Date();
oneYearAgo.setYear(oneYearAgo.getFullYear() - <span class="integer">1</span>);

<span class="comment">// Get all tasks staring with `Master`, completed</span>
<span class="comment">/* prompt&gt; */</span> Todo.find({<span class="key">name</span>: <span class="regexp"><span class="delimiter">/</span><span class="content">^Master</span><span class="delimiter">/</span></span>, <span class="key">completed</span>: <span class="predefined-constant">true</span> }, callback);

<span class="comment">// Get all tasks staring with `Master`, not completed and created from year ago to now...</span>
<span class="comment">/* prompt&gt; */</span> Todo.find({<span class="key">name</span>: <span class="regexp"><span class="delimiter">/</span><span class="content">^Master</span><span class="delimiter">/</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> }).where(<span class="string"><span class="delimiter">'</span><span class="content">updated_at</span><span class="delimiter">'</span></span>).gt(oneYearAgo)
.exec(callback);
</pre></td>
</tr></table>
 </figure></notextile></div>

<p><strong>Mongoose 更新</strong>  </p>

<p>每个模型都有一个<code>update</code>方法，可以接受多条数据的更新操作（用于批量更新，并不返回数据数组）。同时<code>findOneAndUpdate</code>方法可以用于更新单独一条数据并将该条数据返回。  </p>

<ul>
  <li>Model.update(conditions, update, [options], [callback])   </li>
  <li>Model.findByIdAndUpdate(id, [update], [options], [callback])   </li>
  <li>Model.findOneAndUpdate([conditions], [update], [options], [callback])  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Todo.update and Todo.findOneAndUpdate </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre>  
<span class="comment">// Model.update(conditions, update, [options], [callback])</span>
<span class="comment">// update `multi`ple tasks from complete false to true</span>

<span class="comment">/* prompt&gt; */</span> Todo.update({ <span class="key">completed</span>: <span class="predefined-constant">false</span> }, { <span class="key">completed</span>: <span class="predefined-constant">true</span> }, { <span class="key">multi</span>: <span class="predefined-constant">true</span> }, 
<span class="keyword">function</span> (err, numberAffected, raw) {
  <span class="keyword">if</span> (err) <span class="keyword">return</span> handleError(err);
  console.log(<span class="string"><span class="delimiter">'</span><span class="content">The number of updated documents was %d</span><span class="delimiter">'</span></span>, numberAffected);
  console.log(<span class="string"><span class="delimiter">'</span><span class="content">The raw response from Mongo was </span><span class="delimiter">'</span></span>, raw);
});

<span class="comment">//Model.findOneAndUpdate([conditions], [update], [options], [callback])</span>
<span class="comment">/* prompt&gt; */</span> Todo.findOneAndUpdate({<span class="key">name</span>: <span class="regexp"><span class="delimiter">/</span><span class="content">JS$</span><span class="delimiter">/</span></span> }, {<span class="key">completed</span>: <span class="predefined-constant">false</span>}, callback);
</pre></td>
</tr></table>
 </figure></notextile></div>

<p><strong>Mongoose 删除</strong>  </p>

<p>mongoose的<code>update</code>与<code>remove</code> API非常相似，唯一的区别是并没有任何元素被返回。  </p>

<ul>
  <li>Model.remove(conditions, [callback])   </li>
  <li>Model.findByIdAndRemove(id, [options], [callback])   </li>
  <li>Model.findOneAndRemove(conditions, [options], [callback])  </li>
</ul>

<h3 id="expressjs-1">ExpressJS与中间件</h3>

<p>ExpressJS是一个完备的Web框架解决方案。它包括HTML模板解决方案（jade, ejs, handlebars, hogan.js）与CSS预编译器（less, stylus, compass）。在中间件层它能够处理：cookies, sessions, caching, CSRF, 压缩以及许多其他的功能。  </p>

<p><strong>中间件</strong>是一组用于处理每个发往服务器的请求的软件栈。你可以使用任意数量的中间件，以串行方式一个接一个地处理请求。其中的一些可能用于改变请求输入，打印日志输出，添加数据并将其传递到处理链中的下一个中间件。  </p>

<p>中间件通过<code>app.use</code>被加载到ExpressJS栈，从而可以被任何方法或app.动词（如app.get, app.delete, app.post, app.update, …）所使用。  </p>

<p><img src="http://dl.iteye.com/upload/picture/pic/133679/eb6d578c-b8fe-33ab-aad1-20728b95ffe3.png" /></p>

<p>假设我们想要打印每个请求的来源客户端的IP：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Log the client IP on every request </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>  
app.use(<span class="keyword">function</span> (req, res, next) {
  <span class="keyword">var</span> ip = req.headers[<span class="string"><span class="delimiter">'</span><span class="content">x-forwarded-for</span><span class="delimiter">'</span></span>] || req.connection.remoteAddress;
  console.log(<span class="string"><span class="delimiter">'</span><span class="content">Client IP:</span><span class="delimiter">'</span></span>, ip);
  next();
});
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>你也可以指定路径，使得你的中间件在该路径生效： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Middleware mounted on “/todos/:id” and log the request method </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre>  
app.use(<span class="string"><span class="delimiter">'</span><span class="content">/todos/:id</span><span class="delimiter">'</span></span>, <span class="keyword">function</span> (req, res, next) {
  console.log(<span class="string"><span class="delimiter">'</span><span class="content">Request Type:</span><span class="delimiter">'</span></span>, req.method);
  next();
});
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>最终，你可以使用app.get来捕捉相匹配路由的GET请求，在中间件链末端通过<code>response.send</code>来为该请求产生一个响应。让我们使用mongoose读取与查询一节中的函数来返回一条与参数id相匹配的用户数据。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Middleware mounted on “/todos/:id” and returns </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>  
app.get(<span class="string"><span class="delimiter">'</span><span class="content">/todos/:id</span><span class="delimiter">'</span></span>, <span class="keyword">function</span> (req, res, next) {
  Todo.findById(req.params.id, <span class="keyword">function</span>(err, todo){
    <span class="keyword">if</span>(err) res.send(err);
    res.json(todo);
  });
});
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>请注意之前所有的中间件都调用了<code>next()</code>，除了这最后一个，因为它将把包含指定<code>todo</code>数据的响应（以JSON格式）发送给客户端。  </p>

<p>除了路由之外，你不必自己去开发各种功能的中间件。因为ExpressJS已经包含了许多常用的中间件。  </p>

<h3 id="express-40-">Express 4.0 默认中间件</h3>

<ul>
  <li><a href="https://github.com/expressjs/morgan">morgan</a>: 日志处理  </li>
  <li><a href="https://github.com/expressjs/body-parser">body-parser</a>: 解析请求体，从而可以访问请求体<code>req.body</code>中的参数。例如：<code>req.body.name</code>。  </li>
  <li><a href="https://github.com/expressjs/cookie-parser">cookie-parser</a>: 解析cookies，从而可以访问cookies中的参数。例如：<code>req.cookies.name</code>。  </li>
  <li><a href="https://github.com/expressjs/serve-favicon">serve-favicon</a>: 顾名思义，为路由/favicon.ico提供图标。它应该在其他任何路由/中间件之前被调用，从而避免不必要的解析。  </li>
</ul>

<h3 id="express">其他Express中间件</h3>
<p>下列中间件并非内置，但了解一下很有益处。  </p>

<ul>
  <li><a href="https://github.com/expressjs/compression">compression</a>: 压缩所有请求。例：app.use(compression())  </li>
  <li><a href="https://github.com/expressjs/session">session</a>: 创建会话。例：app.use(session({secret: ‘Secr3t’}))  </li>
  <li><a href="https://github.com/expressjs/method-override">method-override</a>: <code>app.use(methodOverride('_method'))</code>，以<code>_method</code>参数值来覆盖方法。例：<code>GET /resource/1?_method=DELETE</code>将会变为<code>DELETE /resource/1</code>  </li>
  <li><a href="https://github.com/expressjs/response-time">response-time</a>: <code>app.use(responseTime())</code>向响应添加响应头<code>X-Response-Time</code>。  </li>
  <li><a href="https://github.com/expressjs/errorhandler">errorhandler</a>: 当错误发生时，通过向客户端发送完整的错误堆栈来辅助开发。<code>app.use(errorhandler())</code>。一个最佳实践是在加载它之前检测环境：<code>process.env.NODE_ENV === 'development'</code>。  </li>
  <li><a href="https://github.com/expressjs/vhost">vhost</a>: 允许你根据请求的<code>hostname</code>不同使用不同的中间件栈。例：<code>app.use(vhost('*.user.local', userapp))</code>以及<code>app.use(vhost('assets-*.example.com', staticapp))</code>，其中<code>userapp</code>与<code>staticapp</code>是有不同中间件栈的不同express实例。  </li>
  <li><a href="https://github.com/expressjs/csurf">csrurf</a>: 使用<code>session</code>或<code>cookie-parser</code>在响应中添加token，起到防止跨站请求伪造（Cross-site request forgery, CSRF）的作用。例：<code>app.use(csrf())</code>。  </li>
  <li><a href="https://github.com/expressjs/timeout">timeout</a>: 当程序执行时间超过预设值时终止程序。例：<code>app.use(timeout('5s'));</code>。你需要自定义一个中间件检查每一个请求<code>if(!req.timeout) next();</code>。  </li>
</ul>

<h2 id="api-postmancurl">API 客户端（浏览器，Postman和curl）</h2>
<p>我知道你还没有创建路由，我们在下一节中将会创建。通过你创建的API，有三种方式来查询、改动或删除数据。  </p>

<h3 id="curl">Curl</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Create tasks </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre> 
<span class="error">#</span> Create task
curl -XPOST http:<span class="comment">//localhost:3000/todos -d 'name=Master%20Routes&amp;completed=false&amp;note=soon...'</span>

<span class="error">#</span> List tasks
curl -XGET http:<span class="comment">//localhost:3000/todos</span>
</pre></td>
</tr></table>
 </figure></notextile></div>

<h3 id="postman">浏览器和Postman</h3>
<p>当你打开浏览器并在地址栏输入<code>localhost:3000/todos</code>你将会看到所有的任务（当你实现了API之后）。然而，默认情况下你并不能POST命令。为了后面的测试，我们可以使用一个名为Postman[link]的Chrome插件。它使你能够很容易地使用所有的HTTP命令，如果需要添加参数时，选中<code>x-www-form-urlencoded</code>。（译者注：使用RestClient for Firefox一样很方便）。  </p>

<p><img src="http://dl.iteye.com/upload/picture/pic/133681/84a293ae-e910-37af-abae-194e60294aed.png" /></p>

<h3 id="section-1">网站和移动应用</h3>
<p>这很有可能是最主要的API调用者。你可以使用jQuery<code>$ajax</code>方便地与RESTful API交互，或者使用它的包装器–BackboneJS的Collections/models， AngularJS的<code>$http</code>或<code>$resource</code>，或许许多多其他的库/框架以及移动客户端。  </p>

<p>最后，我们来阐释如何使用AngularJS与API交互。  </p>

<p><img src="http://dl.iteye.com/upload/picture/pic/133683/1737b0c6-2c33-3ed9-89aa-9bc385dd89cd.png" /><br />
（图片来自CodeSchool）  </p>

<p>整合MEAN技术栈</p>

<h2 id="expressjs-2">引导ExpressJS</h2>

<p>花了较大篇幅来了解Node CLI，MongoDB，Mongoose，工具以及中间件之后，让我们回到我们的express应用todoApp。现在我们创建路由并最终实现我们的RESTful API。<br />
通过<code>express -e todoApp</code>创建应用。安装所有依赖<code>cd todoApp &amp;&amp; npm install</code>。运行该应用：<code>DEBUG=todoApp ./bin/www</code>；  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
</pre></td>
  <td class="code"><pre> 
express -e todoApp
<span class="error">#</span> =&gt;   create : todoApp                  <span class="error">#</span> app directory  
<span class="error">#</span> =&gt;   create : todoApp/<span class="reserved">package</span>.json     <span class="error">#</span> file containing all the dependencies
<span class="error">#</span> =&gt;   create : todoApp/app.js           <span class="error">#</span> Entry point of the application: defines middleware, 
initialize database connections, routes and more.
<span class="error">#</span> =&gt;   create : todoApp/<span class="reserved">public</span>           <span class="error">#</span> all files contained here are accessible through to 
<span class="reserved">public</span> (browser or API calls).
<span class="error">#</span> =&gt;   create : todoApp/<span class="reserved">public</span>/javascripts
<span class="error">#</span> =&gt;   create : todoApp/<span class="reserved">public</span>/images
<span class="error">#</span> =&gt;   create : todoApp/<span class="reserved">public</span>/stylesheets
<span class="error">#</span> =&gt;   create : todoApp/<span class="reserved">public</span>/stylesheets/style.css
<span class="error">#</span> =&gt;   create : todoApp/routes           <span class="error">#</span> containes all the routes files
<span class="error">#</span> =&gt;   create : todoApp/routes/index.js
<span class="error">#</span> =&gt;   create : todoApp/routes/users.js
<span class="error">#</span> =&gt;   create : todoApp/views            <span class="error">#</span> contains all the HTML templates
<span class="error">#</span> =&gt;   create : todoApp/views/index.ejs
<span class="error">#</span> =&gt;   create : todoApp/views/error.ejs
<span class="error">#</span> =&gt;   create : todoApp/bin              <span class="error">#</span> contains executable files
<span class="error">#</span> =&gt;   create : todoApp/bin/www          <span class="error">#</span> bootstrap the app: loads app.js, and set the port 
<span class="keyword">for</span> the webserver.
<span class="error">#</span> =&gt;
<span class="error">#</span> =&gt;   install dependencies:
<span class="error">#</span> =&gt;     <span class="predefined">$</span> cd todoApp &amp;&amp; npm install
<span class="error">#</span> =&gt;
<span class="error">#</span> =&gt;   run the app:
<span class="error">#</span> =&gt;     <span class="predefined">$</span> DEBUG=todoApp .<span class="regexp"><span class="delimiter">/</span><span class="content">bin</span><span class="delimiter">/</span></span>www
</pre></td>
</tr></table>
 </figure></notextile></div>

<h3 id="expressjsmongodb">将ExpressJS与MongoDB连接</h3>
<p>在上一节中你已经安装好了MongoDB，键入以下命令来启动它：<br />
<code>mongod</code><br />
为NodeJS安装名为mongoose的MongoDB驱动：<br />
<code>npm install mongoose --save</code>  </p>

<p>注意<code>--save</code>参数，这将会把它加到<code>todoApp/package.json</code>里。<br />
接下来，你需要在<code>todoApp/app.js</code>里引入mongoose。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre> 
<span class="keyword">var</span> mongoose = require(<span class="string"><span class="delimiter">'</span><span class="content">mongoose</span><span class="delimiter">'</span></span>);
mongoose.connect(<span class="string"><span class="delimiter">'</span><span class="content">mongodb://localhost/todoApp</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>(err) {
    <span class="keyword">if</span>(err) {
        console.log(<span class="string"><span class="delimiter">'</span><span class="content">connection error</span><span class="delimiter">'</span></span>, err);
    } <span class="keyword">else</span> {
        console.log(<span class="string"><span class="delimiter">'</span><span class="content">connection successful</span><span class="delimiter">'</span></span>);
    }
});
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>现在，你可以运行<code>npm start</code>或者<code>./bin/www</code>，你将会注意到下面的信息：<code>connection successful</code>。看到了吗？很好！  </p>

<p>你可以查看<a href="https://github.com/amejiarosario/todoAPIjs">完整的代码</a>， 或者截止目前我们所做的<a href="https://github.com/amejiarosario/todoAPIjs/commit/d3be6a287e8aff39ab862971da4f050d04e552a1">改动</a>。  </p>

<h3 id="mongoosetodo">使用Mongoose创建Todo模型</h3>

<p>表演时间到！目前为止，上面所做的工作都是搭建环境和准备工作。现在我们开始专注于实现API。<br />
创建<code>models</code>目录以及<code>Todo.js</code>模型：<br />
<code>mkdir models  
touch models/Todo.js</code></p>

<p>编辑models/Todo.js文件：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre> 
<span class="keyword">var</span> mongoose = require(<span class="string"><span class="delimiter">'</span><span class="content">mongoose</span><span class="delimiter">'</span></span>);
<span class="keyword">var</span> TodoSchema = <span class="keyword">new</span> mongoose.Schema({
  <span class="key">name</span>: String,
  <span class="key">completed</span>: Boolean,
  <span class="key">note</span>: String,
  <span class="key">updated_at</span>: { <span class="key">type</span>: Date, <span class="keyword">default</span>: Date.now },
});
module.exports = mongoose.model(<span class="string"><span class="delimiter">'</span><span class="content">Todo</span><span class="delimiter">'</span></span>, TodoSchema);
</pre></td>
</tr></table>
 </figure></notextile></div>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/afc908027339b22f10de3b77518ac0728668d470">变更</a>  </p>

<p>这里发生了什么？MongoDB难道不是无模式的吗？没错，它确实无模式并且很灵活，然而，很多情况下我们会想要使我们的数据保持一个一致的结构，从而方便验证，也方便我们的API/WebApp实际应用。Mongoose帮我们做了这些事情。  </p>

<p>我们可以使用下面的类型：  </p>

<ul>
  <li>String  </li>
  <li>Boolean  </li>
  <li>Date  </li>
  <li>Array   </li>
  <li>Number   </li>
  <li>ObjectId   </li>
  <li>Mixed   </li>
  <li>Buffer  </li>
</ul>

<h3 id="expressjs-">ExpressJS 路由</h3>
<p>我们将要实现以下API：  </p>
<table>
<tbody>
<tr><td><strong>Resource(URI) </strong></td><td><strong>POST(创建) </strong></td><td><strong>GET(读取) </strong></td><td><strong>PUT(更新 )</strong></td><td><strong>DELETE(删除) </strong></td></tr>
<tr><td>/todos</td><td>创建新的任务 </td><td>列出所有任务  </td><td>N/A（更新全部）</td><td>N/A（删除全部） </td></tr>
<tr><td>/todos/:id </td><td>错误 </td><td>显示ID为:id的任务  </td><td>更新ID为:id的任务  </td><td>删除ID为:id的任务  </td></tr>
</tbody>
</table>
<p><br /></p>

<p>建立路由：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Create a new route called `todos.js` in the `routes` folder or rename `users.js` </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>  
mv routes/users.js routes/todos.js
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>在<code>app.js</code>中，添加新的<code>todos</code>路由，或者替换<code>./routes/users</code>为<code>./routes/todos</code>  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Adding todos routes </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">var</span> todos = require(<span class="string"><span class="delimiter">'</span><span class="content">./routes/todos</span><span class="delimiter">'</span></span>);
app.use(<span class="string"><span class="delimiter">'</span><span class="content">/todos</span><span class="delimiter">'</span></span>, todos);
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>搞定！现在返回编辑<code>routes/todos.js</code>。 </p>

<p><strong>查询： GET /todos</strong><br />
还记得Mongoose查询API吗？下面的例子显示如何在上下文中使用它：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>routes/todos.js </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">var</span> express = require(<span class="string"><span class="delimiter">'</span><span class="content">express</span><span class="delimiter">'</span></span>);
<span class="keyword">var</span> router = express.Router();
<span class="keyword">var</span> mongoose = require(<span class="string"><span class="delimiter">'</span><span class="content">mongoose</span><span class="delimiter">'</span></span>);
<span class="keyword">var</span> Todo = require(<span class="string"><span class="delimiter">'</span><span class="content">../models/Todo.js</span><span class="delimiter">'</span></span>);
<span class="comment">/* GET /todos listing. */</span>
router.get(<span class="string"><span class="delimiter">'</span><span class="content">/</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>(req, res, next) {
  Todo.find(<span class="keyword">function</span> (err, todos) {
    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);
    res.json(todos);
  });
});
module.exports = router;
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>收获时间到！数据库里暂时没有任务记录，不过我们至少可以证明它能够正常工作：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Testing all together </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>
<span class="error">#</span> Start database
mongod
<span class="error">#</span> Start Webserver (<span class="keyword">in</span> other terminal tab)
DEBUG=todoApp .<span class="regexp"><span class="delimiter">/</span><span class="content">bin</span><span class="delimiter">/</span></span>www
<span class="error">#</span> Test API (<span class="keyword">in</span> other terminal tab)
curl localhost:<span class="integer">3000</span>/todos
<span class="error">#</span> =&gt; []% 
</pre></td>
</tr></table>
 </figure></notextile></div>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/54ab912ea9aa2b6633ae12816beb6e6c3d2702e6">变更</a></p>

<p>如果看到返回空数组[]则证明一切都准备就绪了。如果你看到错误，尝试回顾并确认没有遗漏每个步骤，或者在本贴子下面添加评论以寻求帮助。  </p>

<p><strong>创建： POST/ todos</strong><br />
回到<code>routes/todos.js</code>，我们将使用mongoose create[link]来实现用于创建的API。你能够在不参照下面例子的情况下尝试实现它吗？  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>routes/todos.js (showing just create route) </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">/* POST /todos */</span>
router.post(<span class="string"><span class="delimiter">'</span><span class="content">/</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>(req, res, next) {
  Todo.create(req.body, <span class="keyword">function</span> (err, post) {
    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);
    res.json(post);
  });
});
</pre></td>
</tr></table>
 </figure></notextile></div>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/28b60c4bf9c6d8b08c3351f725e17c7f40a077be">变更</a>  </p>

<p>几点需要注意：  </p>

<ul>
  <li>这里我们使用<code>router.post</code>而不是<code>router.get</code>。  </li>
  <li>你必须关掉并且重启服务：<code>DEBUG=todoApp ./bin/www</code>。强烈推荐使用<code>nodemon</code>以自动刷新。执行<code>npm install nodemon</code>，然后通过<code>nodemon</code>运行程序。  </li>
</ul>

<p><strong>展示单条任务： GET /todos/:id</strong><br />
以下是一个使用<code>Todo.findeById</code>和<code>req.params</code>的快照。请注意<code>params</code>与路径中占位符名称相匹配。这里我们用的是<code>:id</code>。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>routes/todos.js (showing just show route) </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">/* GET /todos/id */</span>
router.get(<span class="string"><span class="delimiter">'</span><span class="content">/:id</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>(req, res, next) {
  Todo.findById(req.params.id, <span class="keyword">function</span> (err, post) {
    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);
    res.json(post);
  });
});
</pre></td>
</tr></table>
 </figure></notextile></div>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/7d8bc67178a4f162858395845c076d9223926bf8">变更</a></p>

<p>通过<em>POSTMAN</em>，使用一个你已经创建的元素<code>_id</code>来进行测试。例如：<code>localhost:3000/todos/542d7d290a705126360ac635</code>。  </p>

<p><strong>更新： PUT /todos/:id</strong><br />
回到<code>routes/todos.js</code>，我们来实现用于更新任务的API。请回顾findByIdAndUpdate[link]方法，并尝试利用它来实现该API。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>routes/todos.js (showing just update route) </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">/* PUT /todos/:id */</span>
router.put(<span class="string"><span class="delimiter">'</span><span class="content">/:id</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>(req, res, next) {
  Todo.findByIdAndUpdate(req.params.id, req.body, <span class="keyword">function</span> (err, post) {
    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);
    res.json(post);
  });
});
</pre></td>
</tr></table>
 </figure></notextile></div>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/00dafe491e0d0b59fa53e86d8c187c42d7824200">变更</a></p>

<p>同样请在<em>POSTMAN</em>中测试 :-)  </p>

<p><strong>删除： DELETE /todos/:id</strong><br />
终于轮到最后一个API了！几乎与<code>update</code>完全相同，使用<code>findByIdAndRemove</code>。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>routes/todos.js (showing just update route) </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">/* DELETE /todos/:id */</span>
router.<span class="keyword">delete</span>(<span class="string"><span class="delimiter">'</span><span class="content">/:id</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>(req, res, next) {
  Todo.findByIdAndRemove(req.params.id, req.body, <span class="keyword">function</span> (err, post) {
    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);
    res.json(post);
  });
});
</pre></td>
</tr></table>
 </figure></notextile></div>

<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/cbf5366e2b4e1a683ed50d2148ed6a548616d3f8">变更</a>  </p>

<p>上面的API都正常工作吗？非常好，你已经完成了我们教程的第二部分。如果有错误，请参照<a href="https://github.com/amejiarosario/todoAPIjs">完整代码</a>。  </p>

<h2 id="section-2">下一步？</h2>
<p>将AngularJS与后台服务连接。  </p>

<ul>
  <li>第三部分 - <a href="http://gocwind.com/blog/2015/06/09/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">MEAN全栈开发：前后端整合</a>    </li>
</ul>

<p><img src="http://dl.iteye.com/upload/picture/pic/133685/7c4ef50f-b7cd-3334-a29e-816cfcea7eba.png" />  </p>

<p><strong>相关教程：</strong>  </p>

<ul>
  <li>第一部分 - <a href="http://gocwind.com/blog/2015/06/05/angularjs-tutorial-for-beginners/">MEAN全栈开发：AngularJS实战教程</a>  </li>
  <li>第三部分 - <a href="http://gocwind.com/blog/2015/06/09/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">MEAN全栈开发：前后端整合</a>  </li>
  <li><a href="http://adrianmejia.com/blog/categories/backbonejs">BackboneJS教程</a>    </li>
</ul>

<p>原文链接：<a href="http://adrianmejia.com/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">Creating RESTful APIs With NodeJS and MongoDB Tutorial (Part II)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MEAN全栈开发：AngularJS实战教程]]></title>
    <link href="http://cwind001.github.io/blog/2015/06/05/angularjs-tutorial-for-beginners/"/>
    <updated>2015-06-05T21:36:10+08:00</updated>
    <id>http://cwind001.github.io/blog/2015/06/05/angularjs-tutorial-for-beginners</id>
    <content type="html"><![CDATA[<p>本系列教程的主要目的是尽可能清楚地阐释如何使AngularJS与Node.js、Express.js和MongoDB实现的后台服务连接 – 这套技术栈也被称为MEAN stack（M=MongoDB, E = Express.js, A = AngularJS, N = Node.js）。让我们从AngularJS开始。  </p>

<h1 id="angularjs">第一部分：AngularJS</h1>

<p>我们将会在一个单独的HTML文件中构建所有的示例，它将嵌入javascript，同时为了简化，我们并不关心样式/CSS。我们将在后续教程中讨论如何利用angularJS模块来分解代码，加入测试以及样式。<br />
<!--more--></p>

<p><strong>Angular.js是什么？</strong><br />
<img src="http://dl.iteye.com/upload/picture/pic/133659/9d9848ea-e94e-322c-9d73-f7d9c072146f.jpg" /><br />
Angular.js是一个MVW（模型-视图-随便什么）开源的JavaScript Web框架，使得创建单页应用（SPA）和数据驱动的应用更加方便快捷。  </p>

<h2 id="section">背景简介</h2>
<p><strong>AngularJS vs jQuery vs BackbonesJS vs EmberJS</strong><br />
AngularJS非常适用于构建可测试的单页应用（SPA），以及数据驱动的CRUD应用。  </p>

<p>AngularJS的格言是：”HTML enhanced for web apps（为网络应用增强HTML）！”。它扩展了标准HTML标签和属性，用以绑定事件和数据。它与其他js库诸如jQuery, Backbones.JS和Ember.js等采用了不同的处理方法——它们更接近于“Unobtrusive JavaScript（译者注：此词叫法不一，为防止误解保留原文。<a href="http://www.thinksaas.cn/group/topic/285570/">了解更多</a>）”。  </p>

<p>传统的Unobtrusive JavaScript的处理方式是，通过ID或元素中的class获取将要操作的元素，而不是通过在这些元素上添加事件处理器。这样做的好处是使得结构（HTML）和行为（Javascript）分离。然而，它对降低代码复杂度和增强可读性并没有帮助。  </p>

<p>随着时间的发展前端技术也在演变。让我们来看一下AngularJS是如何尝试降低代码复杂读和增强可读性的。  </p>

<ul>
  <li><strong>单元测试</strong>：通常来说，当DOM的操作与业务逻辑结合在一起时，JavaScript是非常难以进行单元测试的（例如基于jQuery的代码）。AngularJS将DOM的操作保持在HTML内部，与业务逻辑相分离。数据和依赖在需要的时候通过$inject注入。</li>
  <li><strong>DOM操作</strong>：将DOM操作与应用逻辑解耦。</li>
  <li><strong>单页应用（SPA）</strong>：AngularJS是用于创建单页应用的不二之选。</li>
  <li><strong>全局命名空间</strong>：表达式和方法定义在controllers中并限制在其范围内，因此它们并不会污染全局命名空间。</li>
  <li><strong>数据模型</strong>：普通老式Java对象（POJO）。</li>
  <li><strong>写更少的代码</strong>：AngularJS的主要特性诸如指令（directives），过滤器（filters）以及自动数据绑定减少了代码量。</li>
  <li>AngularJS提供了编写模块化的代码和依赖管理的解决方案。  </li>
</ul>

<h2 id="angularjs-1">AngularJS主要组件</h2>

<h3 id="angularjs-2">AngularJS指令</h3>

<p>关于AngularJS，你需要了解的第一个概念就是指令（directives）。</p>

<p><strong>Directives</strong>是指HTML标记扩展，通常以属性、元素名称、CSS类甚至HTML注释等形式存在。当AngularJS框架被加载之后，ng-app指令中的一切 – 数据、事件和DOM转换将与该指令绑定。</p>

<p>请注意，在下面的例子中有两个指令：ng-app和ng-model。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Hello World in AngularJS </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>  
<span class="tag">&lt;html</span> <span class="attribute-name">ng-app</span><span class="tag">&gt;</span>
<span class="tag">&lt;head&gt;</span>
  <span class="tag">&lt;title&gt;</span>Hello World in AngularJS<span class="tag">&lt;/title&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body&gt;</span>

<span class="tag">&lt;input</span> <span class="attribute-name">ng-model</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span> Hello { { name } }

<span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular.min.js</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span>
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>让我们了解一下主要的内嵌指令：  </p>

<ul>
  <li><strong>ng-app</strong>: 是一个用于引导AngularJS的指令，它同时把调用者元素指派为根。通常置于&lt;html&gt;或&lt;body&gt;标签上  </li>
  <li><strong>ng-model</strong>: 是一个用于绑定如input、select、checkboxes、textarea或其他定制页面元素到一个称为$scope的属性上的指令。有关$scope和数据绑定将在下一节中详细介绍。现在我们只需要记住文本框的值被绑定到 {{ name }}上  </li>
  <li><strong>{{ name }}</strong>:  {{ }} 是绑定模型到HTML页面元素的一种方式。在上面的示例中ng-model 名字被绑定到占位符{{ name }}。  </li>
</ul>

<p>你可能在猜想添加这个指令是否会使HTML验证器产生警告，提示存在未知的或非标准化的属性 —— 的确如此。然而，这可以通过在每个Angular.js指令前添加 ‘data-‘前缀并且作为属性、类或者注释而不是作为元素来使用加以解决。让我们看看下面的示例，同时来创建自己的指令：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Directive types: elements, attributes, comments and classes </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>  
  <span class="tag">&lt;hello&gt;</span>Element<span class="tag">&lt;/hello&gt;</span> Element
  <span class="tag">&lt;div</span> <span class="attribute-name">data-hello</span><span class="tag">&gt;</span>Attribute<span class="tag">&lt;/div&gt;</span> data-Attribute
  <span class="tag">&lt;div</span> <span class="attribute-name">hello</span><span class="tag">&gt;</span>Attribute<span class="tag">&lt;/div&gt;</span> Attribute
  <span class="comment">&lt;!-- directive: hello --&gt;</span> Comment
  <span class="tag">&lt;p</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">hello</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/p&gt;</span> Class
</pre></td>
</tr></table>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Custom AngularJS directives </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre>  
<span class="keyword">var</span> app = angular.module(<span class="string"><span class="delimiter">'</span><span class="content">app</span><span class="delimiter">'</span></span>, []);

app.directive(<span class="string"><span class="delimiter">'</span><span class="content">hello</span><span class="delimiter">'</span></span>, [<span class="keyword">function</span> () {
  <span class="keyword">return</span> {
    <span class="key">restrict</span>: <span class="string"><span class="delimiter">'</span><span class="content">CEMA</span><span class="delimiter">'</span></span>, <span class="comment">// C: class, E: element, M: comments, A: attributes</span>
    <span class="key">replace</span>: <span class="predefined-constant">true</span>, <span class="comment">// replaces original content with template</span>
    <span class="key">template</span>: <span class="string"><span class="delimiter">'</span><span class="content">&lt;span&gt;&lt;br&gt;Hello&lt;/span&gt;</span><span class="delimiter">'</span></span>
  }
}]);
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>如果你对指令的其他选项感兴趣，可以阅读 <a href="http://www.sitepoint.com/practical-guide-angularjs-directives/">A Practical Guide to AngularJS Directives</a></p>

<h3 id="angularjs-3">AngularJS数据绑定</h3>
<p>数据绑定是AngularJS的特性之一，它使得模型数据可以与HTML自动同步。这非常了不起因为模型是“唯一的真相来源”同时你不需要关心如何去更新它。这里有一张来自docs.angularjs.org的图：<br />
<img src="http://dl.iteye.com/upload/picture/pic/133665/3d238e26-a15f-3865-b217-1e8723407f67.png" />  </p>

<p>无论什么时候HTML发生变化时，模型将会被更新；同时无论什么时候模型被更新时，它将会反映到HTML上。  </p>

<h3 id="angularjs-4">AngularJS作用域</h3>
<p>$scope是一个包含了HTML绑定的所有数据的对象。它是javascript代码(controllers)与视图(HTML)之间的胶水。附加在$scope上的所有数据，将会被AngularJS自动地”$watch”以及更新。  </p>

<p>作用域可以绑定到javascript函数上。你也可以使用多个$scope，或者从外部$scope继承。在控制器一节中我们将继续深入讨论。  </p>

<h3 id="angularjs-5">AngularJS控制器</h3>
<p>AngularJS控制器是用于”控制”包含了特定DOM元素的区域的代码段。它们封装了行为、回调函数并且把$scope模型和视图粘合起来。让我们通过下面示例代码来加深对此概念的理解：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>AngularJS Controller Example </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
</pre></td>
  <td class="code"><pre>  
<span class="tag">&lt;body</span> <span class="attribute-name">ng-controller</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">TodoController</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
  <span class="tag">&lt;ul&gt;</span>
    <span class="tag">&lt;li</span> <span class="attribute-name">ng-repeat</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo in todos</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
      <span class="tag">&lt;input</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">checkbox</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-model</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo.completed</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
      { { todo.name } }
    <span class="tag">&lt;/li&gt;</span>
  <span class="tag">&lt;/ul&gt;</span>

  <span class="tag">&lt;script&gt;</span>
<span class="inline">    <span class="keyword">function</span> <span class="function">TodoController</span>(<span class="predefined">$scope</span>){
      <span class="predefined">$scope</span>.todos = [
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Master HTML/CSS/Javascript</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">true</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Learn AngularJS</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Build NodeJS backend</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Get started with ExpressJS</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Setup MongoDB database</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Be awesome!</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> },
      ]
    }</span>
  <span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;/body&gt;</span>
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>你可能会注意到这些新朋友：ng-controller, ng-repeat和$scope  </p>

<ul>
  <li><strong>ng-controller</strong> 是一个指令，它告诉angular对于特定的视图应当使用哪个控制器。每当AngularJS加载时，它读取该指令的参数（示例中是”TodoController”）。然后，它在javascript对象(POJO)中查找具有相同名字的函数，或者查找与angular.controller匹配的名字。</li>
  <li><strong>$scope</strong>，正如之前提到的，$scope是粘合控制器中数据模型和视图的胶水。看一下我们的”TodoController”，它有一个名为$scope的参数。AngularJS将会传递（注入）那个参数，以及与其相关的所有数据，从而使其在视图中可用。示例中主要是todos这个对象数组。</li>
  <li><strong>ng-repeat</strong>，正如其名，它将会在声明该指令的地方“重复”输出元素及其子元素。对于示例，它将会遍历$scope.todos数组中的每一个元素。</li>
  <li><strong>ng-model</strong>，请注意复选框被绑定到todo.completed属性。如果todo.completed为true，复选框将被自动选中，反之亦然。</li>
</ul>

<h3 id="angularjs-6">AngularJS模块</h3>
<p>模块是用来封装应用中不同部分（指令、控制器、工厂……）的一种方式，可以方便地在其他地方重用。这里有一个通过模块来重写我们之前的控制器的实例：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Custom AngularJS directives </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>  
angular.module(<span class="string"><span class="delimiter">'</span><span class="content">app</span><span class="delimiter">'</span></span>, [])
  .controller(<span class="string"><span class="delimiter">'</span><span class="content">TodoController</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">$scope</span><span class="delimiter">'</span></span>, <span class="keyword">function</span> (<span class="predefined">$scope</span>) {
    <span class="predefined">$scope</span>.todos = [
      { <span class="key">title</span>: <span class="string"><span class="delimiter">'</span><span class="content">Learn Javascript</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">true</span> },
      { <span class="key">title</span>: <span class="string"><span class="delimiter">'</span><span class="content">Learn Angular.js</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> },
      { <span class="key">title</span>: <span class="string"><span class="delimiter">'</span><span class="content">Love this tutorial</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">true</span> },
      { <span class="key">title</span>: <span class="string"><span class="delimiter">'</span><span class="content">Learn Javascript design patterns</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> },
      { <span class="key">title</span>: <span class="string"><span class="delimiter">'</span><span class="content">Build Node.js backend</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> },
    ];
  }]);
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>使用模块可以带来许多好处，比如可以以任意顺序加载模块，并行加载依赖，测试可以只加载需要的模块以加快速度，使得依赖关系更加清晰。  </p>

<h3 id="angularjs-7">AngularJS模板</h3>
<p>模板同时包含HTML与Angular元素（指令、标记、过滤器或表单控件）。它们可以被缓存或者被通过id引用。  </p>

<p>这里有一个示例：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre>  
  <span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/ng-template</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">/todos.html</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="inline">    <span class="tag">&lt;ul&gt;</span>
      <span class="tag">&lt;li</span> <span class="attribute-name">ng-repeat</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo in todos</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;input</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">checkbox</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-model</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo.completed</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
       
      <span class="tag">&lt;/li&gt;</span>
    <span class="tag">&lt;/ul&gt;</span></span>
  <span class="tag">&lt;/script&gt;</span>
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>代码看起来眼熟吗？；）</p>

<p>请注意script标签中的类型属性为“text/ng-template”。</p>

<h3 id="angularjsngroutes">AngularJS路由（ngRoutes）</h3>
<p>ngRoutes模块使得我们能够更改我们在应用中看到的东西，基于URL(路由)。通常，它使用模板向应用中注入HTML。  </p>

<p>它并没有包含在AngularJS核心模块里面，我们必须将其作为一个依赖引入。我们可以从Google CDN上获取它：  </p>

<p><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular-route.min.js"&gt;&lt;/script&gt;</code></p>

<p><strong>新功能</strong>：向todo任务中添加记录。让我们从路由开始。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Custom AngularJS directives </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>  

angular.module(<span class="string"><span class="delimiter">'</span><span class="content">app</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">ngRoute</span><span class="delimiter">'</span></span>])
  .config([<span class="string"><span class="delimiter">'</span><span class="content">$routeProvider</span><span class="delimiter">'</span></span>, <span class="keyword">function</span> (<span class="predefined">$routeProvider</span>) {
    <span class="predefined">$routeProvider</span>
      .when(<span class="string"><span class="delimiter">'</span><span class="content">/</span><span class="delimiter">'</span></span>, {
        <span class="key">templateUrl</span>: <span class="string"><span class="delimiter">'</span><span class="content">/todos.html</span><span class="delimiter">'</span></span>,
        <span class="key">controller</span>: <span class="string"><span class="delimiter">'</span><span class="content">TodoController</span><span class="delimiter">'</span></span>
      });
  }]);

</pre></td>
</tr></table>
 </figure></notextile></div>

<ul>
  <li>首先请注意我们将ng-controller=”TodoController”从body标签移除了。现在控制器将通过路由被调用。</li>
  <li>ngView是$routeProvider所使用的指令，用于渲染HTML。每次URL变化时，一个新的HTML模板和控制器将会被注入ngView。</li>
</ul>

<h3 id="angularjs-8">AngularJS服务（工厂）</h3>
<p>请注意目前暂时无法创建第二个控制器并共享$scope.todos。当我们使用服务时，就方便了许多。服务是我们将数据依赖注入到控制器中的一种方式，他们通过工厂生成。我们看实例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Custom AngularJS directives </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
</pre></td>
  <td class="code"><pre>  
 angular.module(<span class="string"><span class="delimiter">'</span><span class="content">app</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">ngRoute</span><span class="delimiter">'</span></span>])

    .factory(<span class="string"><span class="delimiter">'</span><span class="content">Todos</span><span class="delimiter">'</span></span>, <span class="keyword">function</span>(){
      <span class="keyword">return</span> [
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">AngularJS Directives</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">true</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Data binding</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">true</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">$scope</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">true</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Controllers and Modules</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">true</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Templates and routes</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">true</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Filters and Services</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Get started with Node/ExpressJS</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Setup MongoDB database</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> },
        { <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">Be awesome!</span><span class="delimiter">'</span></span>, <span class="key">completed</span>: <span class="predefined-constant">false</span> },
      ];
    })

    .controller(<span class="string"><span class="delimiter">'</span><span class="content">TodoController</span><span class="delimiter">'</span></span>, [<span class="string"><span class="delimiter">'</span><span class="content">$scope</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Todos</span><span class="delimiter">'</span></span>, <span class="keyword">function</span> (<span class="predefined">$scope</span>, Todos) {
      <span class="predefined">$scope</span>.todos = Todos;
    }])
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>我们现在把数据依赖“Todo”注入到控制器中。通过这种方式我们可以在需要的任何控制器或模块中重用这些数据。不仅可用于静态数据（如上例中的数组），也可以用于通过$http或$resource从服务器获得的数据。  </p>

<p>我们想要在点击的时候展示任务的细节。为了实现这个需求，我们需要添加同样使用这个服务的第二个控制器、模板以及路由。  </p>

<p>发生的动作如下：<br />
1. 我们在HTML标签中创建了第二个模板 ‘/todoDetails.html’, 它包含了想要展示的待做事项细节<br />
2. 同样，在我们前一个模板 ‘/todos.html’ 我们想要有一个链接指向 todo 细节。我们使用了$index，它是ng-repeat中相应想的序号。<br />
3. 在JS标签中，我们创建了一个新的$routeProvider，它指向一个新的控制器 ‘TodoDetailCtrl’ 与#1中新创建的模板。在控制器中：id参数通过$routeParams来访问。<br />
4. 创建新的控制器 ‘TodoDetailCtrl’并且注入$scope, Todos（工厂）等依赖，以及包含了id参数的$routeParams<br />
5. 在新的控制器中设置$scope。我们将通过第二步中设置的id选择唯一的一个待办事项，而不是整个待办事项数组。  </p>

<p>注意：在codepen中你无法看到URL。如果你想要看到它的变化，你可以在 这里 [ url ]下载整个示例。  </p>

<h3 id="angularjs-9">AngularJS过滤器</h3>

<p>过滤器使你可以格式化并转换双括号里表达式的输出。AngularJS内置了许多有用的过滤器。  </p>

<p><strong>内置过滤器</strong>：</p>

<ul>
  <li><strong>filter</strong>: 在一个数组中查找给定的字符串，返回匹配值。  </li>
  <li><strong>Number</strong>: 在每个千位添加逗号分隔，设置两位小数  </li>
  <li><strong>Currency</strong>：与Number类似，但是最前面添加美元$符号  </li>
  <li><strong>Date</strong>：取一个Unix时间戳（例如：1288323623006）或日期字符串作为输入，用指定的格式输出（例如：‘longDate’或’yyyy’用以表示四位数字的年）。完整列表：https://docs.angularjs.org/api/ng/filter/date  </li>
  <li><strong>JSON</strong>：把javascript对象转换为JSON字符串。  </li>
  <li><strong>lowercase/uppercase</strong>: 把字符串转换为小写/大写  </li>
  <li><strong>limitTo</strong>: 从数组中展示的元素数量  </li>
  <li><strong>orderBy</strong>: 利用指定的key排好序的对象数组  </li>
</ul>

<p><strong>注意</strong>你可以将多个过滤器组合为过滤器链使用，也可以定义你自己的过滤器  </p>

<p><strong>新功能</strong>：通过名字搜索代办任务。让我们使用过滤器来解决这个问题。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre>  
  <span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/ng-template</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">/todos.html</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="inline">    Search: &lt;input type=<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span> ng-model=<span class="string"><span class="delimiter">&quot;</span><span class="content">search.name</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="tag">&lt;ul&gt;</span>
      <span class="tag">&lt;li</span> <span class="attribute-name">ng-repeat</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo in todos | filter: search</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;input</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">checkbox</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">ng-model</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">todo.completed</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/a&gt;</span>
      <span class="tag">&lt;/li&gt;</span>
    <span class="tag">&lt;/ul&gt;</span></span>
  <span class="tag">&lt;/script&gt;</span>
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>请注意我们在ng-model中使用search.name用于搜索。这将会把搜索限制在’name’属性，search.notes将会只在notes里搜索。猜猜不指定属性只使用‘search’将会做些什么？没错！它会在所有的属性中搜索。  </p>

<h2 id="section-1">下一步？</h2>
<p>祝贺你！你已经完成了第一部分。我们将会使用目前所学构建一些东西。在后续文章中我们将会使用NodeJS和MongoDB搭建后台，连接到AngularJS上来提供一个具备完整功能的CRUD应用。  </p>

<p>第二部分 - <a href="http://gocwind.com/blog/2015/06/09/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">MEAN全栈开发：使用NodeJS和MongoDB创建REST服务</a>  </p>

<p><img class="left" src="http://dl.iteye.com/upload/picture/pic/133663/abf21050-a55a-347e-9e0f-501586af10c7.png" /><br />
<img src="http://dl.iteye.com/upload/picture/pic/133661/636d3c41-5c03-33a4-af9f-a539fc997fcd.png" />  </p>

<p>第三部分 - <a href="http://gocwind.com/blog/2015/06/09/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">MEAN全栈开发： 前后端整合</a>  </p>

<p>如果想要学习BackboneJS，可以访问我的<a href="http://adrianmejia.com/blog/categories/backbonejs">BackboneJS教程</a>  </p>

<p><strong>ng-test</strong>  </p>

<p>现在是时候测试一下你所学的知识了。测试驱动学习（TDL）;). 挑战如下：使用你最喜欢的编辑器打开<a href="https://gist.githubusercontent.com/amejiarosario/26751cb85d088fd59c28/raw/c2dde0797c8d47d359c2137fc9a15a9228c272ca/index.html">这个文件</a>。拷贝样板代码，构建我们前面例子中完整的应用。当然，当你卡住时你可以不时地参考一下。  </p>

<p>把这个文件下载为：index.html  </p>

<p><strong>ng-solution</strong>  </p>

<p>这里是完整的<a href="https://cdn.rawgit.com/amejiarosario/068143b53e54db43ef38/raw/b703b591bc84f2d59a2a483169294e2fb232419d/ngTodo.html#/">应用展示</a>。  </p>

<p><a href="https://github.com/cwind001/CwindJsLab/tree/master/todoAPIjs">项目代码@Github</a>  </p>

<p>原文链接：<a href="http://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">AngularJS Tutorial for Beginners With NodeJS ExpressJS and MongoDB (Part I)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[轻量级框架与重量级框架]]></title>
    <link href="http://cwind001.github.io/blog/2015/05/11/lightweight-framework-vs-heavyweight-framework/"/>
    <updated>2015-05-11T22:31:22+08:00</updated>
    <id>http://cwind001.github.io/blog/2015/05/11/lightweight-framework-vs-heavyweight-framework</id>
    <content type="html"><![CDATA[<p>事实上“轻量级”与“重量级”并没有确切的定义。轻重量级之分应当考虑如下几个方面：  </p>

<h3 id="section">加载的资源</h3>

<p>Spring相对于EJB是轻量级的，但这就好像说大象比鲸轻。<br />
如果你想要运行一个Java EE应用程序，你不能够简单地创建一个应用并直接运行它本身。需要一个JavaEE服务器来运行应用，例如Glassfish，WebLogic或WebSphere。多数应用服务器都是非常巨大并且复杂的，并不容易安装和配置。  </p>

<p>EJB应用启动时要消耗大量的资源，内存、CPU等，把所有的服务都加载进来；Spring则是可定制服务，需要什么加载什么。<br />
<!--more-->  </p>

<h3 id="section-1">侵入性（或曰框架依赖性，耦合性）</h3>

<p>重量级框架（如EJB2.0和Struts1.2）侵入性较高。它强制开发者写一些与框架绑定的类。这使得这些类很难被测试。<br />
Spring将侵入性降到最低，它允许使用POJO进行开发。Spring并不强制实现Spring API接口或扩展Spring API类。这使得这些类方便测试。这使得把类迁移到其他轻量级容器更加容易。  </p>

<h3 id="section-2">开发的方便程度</h3>
<p>如上条所述，使用重量级框架要写一些框架绑定的类，部署、运行及测试过程都较为复杂，开发起来并不方便。而轻量级框架反之。  </p>

<h2 id="section-3">解决问题的侧重点不同：</h2>
<p>轻量级框架侧重于减小开发的复杂度，相应它的处理能力较弱（事务功能弱，不具备分布式处理能力），适用于开发中小型企业应用。
重量级框架则强调高可伸缩性，适合于开发大型企业应用。  </p>

<h2 id="section-4">轻量级框架的特点：</h2>
<p>一般是非侵入性的、依赖的东西非常少，占用资源非常少，部署简单，比较容易使用。  </p>

<h2 id="spring">为何说Spring是轻量级框架：</h2>
<ul>
  <li>Spring以集中的、自动化的方式进行应用程序对象创建和装配，管理对象生命周期，组合成复杂的应用程序。  </li>
  <li>Spring提供了不同的模块，基于需求可以灵活选择。Spring jar的大小通常在几MB。  </li>
  <li>相比较EJB，Spring需要写更少的代码和更少的配置。使得开发人员能够更关注业务逻辑。  </li>
  <li>Spring容器是非侵入性的，完全采用POJO进行开发，方便测试。  </li>
  <li>Spring方便与其他框架与第三方类库无缝集成。  </li>
</ul>

<p>Spring与其他基于POJO的容器相比，例如Guice和Plexus，仍然称得上是“重量级”。因为完整的Spring技术栈包含了POJO之上的层次，它的MVC框架需要Servlets基础设施。<br />
Spring相比EJB2.x确实是轻量级，最主要的卖点是POJO的使用。  </p>

<h2 id="ejb">为何说EJB是重量级框架？</h2>
<p>首先这是Rod Johnson说的，Spring狂热者奉之为圭臬的论断。<br />
2004年以前EJB2.x确实是重量级，它需要EJB容器来运行，需要加载较多的资源，代码侵入性较高–需要实现特定的EJB接口，相对来说开发并不方便。  </p>

<h2 id="section-5">总结</h2>
<p>轻重量级是相对的，主要从加载资源、代码侵入性和开发便捷性等方面去考虑和比较。类似地，使用volatile变量可以用来确保变量的更新操作被同步到其他线程，这种同步机制相对于同步容器就是轻量级的（当然更具可伸缩性和实用性的是并发容器而非上述二者）；而jetty相对于tomcat而言，由于其加载资源更少，也可以称之为轻量级的。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[进程内缓存与分布式缓存的比较]]></title>
    <link href="http://cwind001.github.io/blog/2015/04/08/in-processes-vs-distributed-caching/"/>
    <updated>2015-04-08T21:53:14+08:00</updated>
    <id>http://cwind001.github.io/blog/2015/04/08/in-processes-vs-distributed-caching</id>
    <content type="html"><![CDATA[<p>在这篇文章里我们将比较当需要对缓存方案进行技术选型时，使用进程内缓存与分布式缓存的优劣。 </p>

<p>首先来看一下二者的定义。顾名思义，进程内缓存是与应用程序在相同地址空间的缓存。Google Guava是一个提供了简单进程内缓存API的很好的例子。另一方面，分布式缓存是应用程序的外部扩展，通常部署在多个节点上，共同构成一个大的逻辑缓存。Memcached是一个流行的分布式缓存。Terracotta公司的Ehcache则是一个通过配置可以以任一种方式使用的缓存产品。<br />
<!--more--></p>

<h2 id="section">一致性</h2>
<p><strong>进程内缓存</strong><br />
当使用进程内缓存时，缓存元素是特定应用程序实例本地的。然而，许多中到大型应用通常会做负载均衡，从而不存在一个作为整体的独立应用。在这种情况下，很可能会构建出一个有多少应用实例就有多少缓存的解决方案，每个缓存都有各自的状态，这就导致了不一致性。随着缓存元素的过期或被逐出，所有缓存实例间可能达到最终一致性。  </p>

<p><strong>分布式缓存</strong><br />
分布式缓存，虽然部署在由多个节点构成的集群上，会提供一个单一缓存的逻辑视图（以及状态）。多数情况下，分布式缓存中的对象将会存在于集群中的单个节点。通过哈希算法，缓存引擎总是可以判断出某个键值对位于哪个特定节点。由于整个集群总是会有一个特定状态，所以从来不会存在不一致的情况。  </p>

<p><strong>备注</strong><br />
如果你需要缓存不变的对象，一致性将不是一个问题。在这种情况下，进程内缓存是一个更好的解决方案，因为它没有分布式缓存的典型管理开销。如果你的应用部署在多个节点上，想要缓存可变的对象同时需要每次读都是一致的而不仅仅满足最终一致性，则应当采用分布式缓存。  </p>

<h2 id="section-1">开销</h2>
<p><strong>进程内缓存</strong><br />
揭开进程内缓存的奥秘 一文中提到进程内缓存可能会影响垃圾回收进而影响系统性能。而这将会由缓存大小以及对象逐出和过期的频率决定。  </p>

<p><strong>分布式缓存</strong><br />
分布式缓存有两大主要开销会导致其慢于进程内缓存（但优于无缓存方案）：网络延迟和对象序列化。</p>

<p><strong>备注</strong><br />
正如之前所提到的，如果你试图寻求一个多节点部署情况下的强一致性缓存解决方案，采用分布式缓存。  </p>

<h2 id="section-2">可靠性</h2>
<p><strong>进程内缓存</strong><br />
进程内缓存使用与应用程序相同的堆空间，因此必须非常小心地决定缓存所能使用的内存大小上限。如果应用程序用光了内存，想要试图恢复并不容易。  </p>

<p><strong>分布式缓存</strong><br />
分布式缓存作为多个节点的独立进程运行，因此单点故障并不会导致缓存失效。丢失的缓存元素将会在下一次缓存未命中时进入存活的节点。分布式缓存情况下，缓存整体失效的最坏后果是降低系统性能，而不是导致系统整体故障。  </p>

<p><strong>备注</strong>
进程内缓存适用于较小且频率可预见的访问场景，尤其适用于不变对象。对于较大且不可预见的规模的访问，最好采用分布式缓存。  </p>

<h2 id="section-3">建议</h2>
<p>对于不变对象的较小规模的、可预见次数的访问，进程内缓存是一个理想解决方案，性能上它优于分布式缓存。然而，对于要缓存的对象数量是未知的并且较大的情况下，同时要求读一致性，分布式缓存是一个更好的解决方案，尽管它可能具备与进程内缓存相同的性能。自不用说，应用程序可以同时应用两种类型的缓存，取决于最适用的应用场景。  </p>

<p>原文链接：<a href="http://java.dzone.com/articles/process-caching-vs-distributed">In-Process Caching vs. Distributed Caching</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java读写Excel：Apache POI, JXL与OpenCSV]]></title>
    <link href="http://cwind001.github.io/blog/2015/02/27/apachepoi/"/>
    <updated>2015-02-27T07:53:53+08:00</updated>
    <id>http://cwind001.github.io/blog/2015/02/27/apachepoi</id>
    <content type="html"><![CDATA[<p>前些日子把JXL替换为ApachePOI，原因很简单，JXL在2009年10月已经停止更新，并且不支持Excel 2007 OOXML （.xlsx）格式的文件。事实上把JXL与POI进行比较并不公平，因为JXL只能够操作OLE2格式的Excel（即.xls），而POI则是能够读写xls(x)、doc(x)、ppt(x)的一整套解决方案。<br />
<!--more--></p>

<p>不同版本Excel的行列数限制：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>   
+-----------------+-----------+--------------+---------------------+
|                 | Max. Rows | Max. Columns | Max. Cols by letter |
+-----------------+-----------+--------------+---------------------+
| Excel <span class="integer">365</span>*      | <span class="integer">1</span>,<span class="integer">048</span>,<span class="integer">576</span> | <span class="integer">16</span>,<span class="integer">384</span>       | XFD                 |
| Excel <span class="integer">2013</span>      | <span class="integer">1</span>,<span class="integer">048</span>,<span class="integer">576</span> | <span class="integer">16</span>,<span class="integer">384</span>       | XFD                 |
| Excel <span class="integer">2010</span>      | <span class="integer">1</span>,<span class="integer">048</span>,<span class="integer">576</span> | <span class="integer">16</span>,<span class="integer">384</span>       | XFD                 |
| Excel <span class="integer">2007</span>      | <span class="integer">1</span>,<span class="integer">048</span>,<span class="integer">576</span> | <span class="integer">16</span>,<span class="integer">384</span>       | XFD                 |
| Excel <span class="integer">2003</span>      | <span class="integer">65</span>,<span class="integer">536</span>    | <span class="integer">256</span>          | IV                  |
| Excel <span class="integer">2002</span> (XP) | <span class="integer">65</span>,<span class="integer">536</span>    | <span class="integer">256</span>          | IV                  |
| Excel <span class="integer">2000</span>      | <span class="integer">65</span>,<span class="integer">536</span>    | <span class="integer">256</span>          | IV                  |
| Excel <span class="integer">97</span>        | <span class="integer">65</span>,<span class="integer">536</span>    | <span class="integer">256</span>          | IV                  |
| Excel <span class="integer">95</span>        | <span class="integer">16</span>,<span class="integer">384</span>    | <span class="integer">256</span>          | IV                  |
| Excel <span class="integer">5</span>         | <span class="integer">16</span>,<span class="integer">384</span>    | <span class="integer">256</span>          | IV                  |
+-----------------+-----------+--------------+---------------------+  
</pre></div>
</div>
 </figure></notextile></div>

<p><em>*Excel 365 unverified.</em></p>

<p><strong>JXL - JExcelApi</strong><br />
<a href="http://mvnrepository.com/artifact/net.sourceforge.jexcelapi/jxl/2.6.12">Maven Repo</a><br />
<a href="http://www.andykhan.com/jexcelapi/index.html">官方网站</a><br />
最近更新：Oct 24，2009</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>   
&lt;dependency&gt;
 &lt;groupId&gt;net.sourceforge.jexcelapi&lt;/groupId&gt;
 &lt;artifactId&gt;jxl&lt;/artifactId&gt;
 &lt;version&gt;<span class="float">2.6</span><span class="float">.12</span>&lt;/version&gt;
&lt;/dependency&gt;
</pre></div>
</div>
 </figure></notextile></div>

<p>JXL是一个日本人写的简单类库。<a href="http://www.jexcelapi.org/">作者主页</a>。<a href="http://blog.csdn.net/jarvis_java/article/details/4924099">POI和jxl.jar性能比较</a>一贴中提到其性能较poi更高，内存消耗更少。当且仅当目标文档是行数接近但不超过65536的xls格式时成立。  </p>

<p>类图：<br />
<img src="http://dl.iteye.com/upload/picture/pic/132574/73b48deb-3ba5-396c-b01c-5546b1aecba0.jpg" />  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>JXL Demo</span> &mdash; <a href="https://github.com/cwind001/CwindJavaLab/blob/master/POITest/src/main/java/com/cwind/jxl/JXLDataSheetWriter.java">link</a></figcaption> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
</pre></td>
  <td class="code"><pre>   
 <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args) {
  <span class="keyword">try</span> {
   <span class="comment">// create writable wookbook</span>
   WritableWorkbook workbook 
    = Workbook.createWorkbook(<span class="keyword">new</span> <span class="predefined-type">File</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">jxlOutput.xls</span><span class="delimiter">&quot;</span></span>));
   
   <span class="comment">// create writable sheet</span>
   WritableSheet sheet = workbook.createSheet(<span class="string"><span class="delimiter">&quot;</span><span class="content">First Sheet</span><span class="delimiter">&quot;</span></span>, <span class="integer">0</span>);
   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="integer">0</span>; i &lt; data.length; i++) {
    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="integer">0</span>; j &lt; data[i].length; j++){
     
     <span class="comment">// create a cell at position (i, j) and add to the sheet</span>
     <span class="predefined-type">Label</span> label = <span class="keyword">new</span> <span class="predefined-type">Label</span>(i, j, data[i][j]);
     sheet.addCell(label);
    }
   }
   workbook.write();
   workbook.close();
  } <span class="keyword">catch</span> (<span class="exception">IOException</span> | WriteException e) {
   e.printStackTrace();
  }
 }
</pre></td>
</tr></table>
 </figure></notextile></div>

<p><strong>Apache POI</strong><br />
<a href="http://mvnrepository.com/artifact/org.apache.poi/poi">Maven Repo</a><br />
<a href="http://poi.apache.org/">官方网站</a><br />
最近更新：Dec 17，2014  </p>

<p>类图：<br />
<img src="http://dl.iteye.com/upload/picture/pic/132576/6230920a-edc2-3e7c-ac23-d4590f095048.jpg" /> </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>   
&lt;dependency&gt; 
  &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;
  &lt;artifactId&gt;poi&lt;/artifactId&gt;
  &lt;version&gt;<span class="float">3.10</span><span class="float">.1</span>&lt;/version&gt;
&lt;/dependency&gt; 
 
 &lt;dependency&gt;
     &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;
     &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;
     &lt;version&gt;<span class="float">3.9</span>&lt;/version&gt;
 &lt;/dependency&gt;
</pre></div>
</div>
 </figure></notextile></div>

<p><strong>Apache POI API的一些重点：</strong></p>

<ul>
  <li>Apache POI包含 Excel 97(-2007)文件格式(.xls)的Java实现 – HSSF。（彩蛋：H指Horrible）  </li>
  <li>Apache POI包含 Excel 2007 OOXML文件格式(.xlsx)的Java实现 – XSSF。  </li>
  <li>Apache POI的HSSF和XSSF API提供了读写和修改Excel电子表格的功能。  </li>
  <li>Apache POI也提供了SXSSF API（流式XSSF），它是XSSF的扩展，用于写入非常大的excel文件。SXSSF API需求较小的内存，适用于在堆内存受限时处理较大excel文件的情况。  </li>
  <li>可以选择两种模型：Event Model和User Model。Event Model需求较小的内存，流式读取并处理每个单元；User Model更具备面向对象的特征，方便操作。  </li>
  <li>Apache POI提供了对excel附加功能的完美支持，如公式、单元格样式、颜色、字体、数据验证、图像和超链接等。  </li>
</ul>

<p>SpreadSheet API 功能摘要：<br />
<img src="http://dl.iteye.com/upload/picture/pic/132578/9b044f00-622e-3a07-9471-3ee912e42819.jpg" /> <br />
以下是两个基于XSSF读写xlsx文件的例子：<br />
<a href="https://github.com/cwind001/CwindJavaLab/blob/master/POITest/src/main/java/com/cwind/poi/SimpleDatasheetReader.java">读取xlsx文件</a><br />
<a href="https://github.com/cwind001/CwindJavaLab/blob/master/POITest/src/main/java/com/cwind/poi/SimpleDatasheetWriter.java">写入xlsx文件</a>  </p>

<p><strong>OpenCSV：</strong> <br />
CSV文件以纯文本形式存储表格数据（数字和文本）。OpenCSV是一个用于读写CSV文件的简单Java类库。<br />
<a href="http://mvnrepository.com/artifact/net.sf.opencsv/opencsv/2.3">Maven Repo</a><br />
<a href="http://opencsv.sf.net">官方网站</a><br />
最近更新：Jul 28，2011</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>  
&lt;dependency&gt;
 &lt;groupId&gt;net.sf.opencsv&lt;/groupId&gt;
 &lt;artifactId&gt;opencsv&lt;/artifactId&gt;
 &lt;version&gt;<span class="float">2.3</span>&lt;/version&gt;
&lt;/dependency&gt;
</pre></div>
</div>
 </figure></notextile></div>

<p>OpenCSV将CSV文件中的每一行读取为一个String数组。相应地，写文件时通过<code>csvWriter.writeNext(array)</code>把String数组内容作为一行写入CSV文件</p>

<p>读写CSV文件的例子：<br />
<a href="https://github.com/cwind001/CwindJavaLab/blob/master/POITest/src/main/java/com/cwind/opencsv/ReadCSVDemo.java">读取csv文件内容</a><br />
<a href="https://github.com/cwind001/CwindJavaLab/blob/master/POITest/src/main/java/com/cwind/opencsv/OpenCSVDemo.java">将xlsx文件内容写入csv</a>  </p>

<p><strong>References:</strong><br />
1. <a href="http://poi.apache.org/spreadsheet/">POI-HSSF and POI-XSSF - Java API To Access Microsoft Excel Format Files</a><br />
2. <a href="http://www.journaldev.com/2562/java-readwrite-excel-file-using-apache-poi-api">Java Read/Write Excel File using Apache POI API</a>  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java文件变更监控的两种实现]]></title>
    <link href="http://cwind001.github.io/blog/2015/01/30/java-file-monitor/"/>
    <updated>2015-01-30T14:25:04+08:00</updated>
    <id>http://cwind001.github.io/blog/2015/01/30/java-file-monitor</id>
    <content type="html"><![CDATA[<p><strong>对文件及文件夹进行修改变更监测有很广泛的应用，例如：</strong>  </p>

<ul>
  <li>通知配置文件的改变  </li>
  <li>跟踪某些关键的系统文件的变化  </li>
  <li>监控某个分区磁盘的整体使用情况  </li>
  <li>系统崩溃时进行自动清理<br />
<!--more--></li>
  <li>自动触发备份进程  </li>
  <li>向服务器上传文件结束时发出通知    </li>
</ul>

<p>下面给出Java的两种实现，源码可以在GitHub上找到 <a href="https://github.com/cwind001/CwindJavaLab/tree/master/FileMonitor">FileMonitor</a></p>

<p><strong>JDK1.6及之前版本: 基于Timer实现</strong><br />
<strong>两个关键类：</strong>  </p>

<ul>
  <li>java.util.Timer  </li>
  <li>java.util.TimerTask</li>
</ul>

<p>Timertask是由Timer执行的实际任务，实现了Rannable接口。通过重写run()方法来指定具体任务细节。<br />
<img src="http://dl2.iteye.com/upload/attachment/0105/5397/ddf9a7c5-f08a-3fd3-b1f8-6859e1054bd8.jpg" /></p>

<p><strong>Timer工作原理：</strong><br />
Timer是用于调度一次性执行或重复执行的工具类。通过TaskQueue保存需要调度的TimerTask，当某个Task被废弃时（一次性任务结束或TimerTask.cancel()），将其从该队列中移除。<br />
Timer类维护一个后台线程（守护线程或用户线程，取决于如何创建Timer对象），该线程通常称为Timer任务执行线程。在TimerThread的mainLoop()中依据各个TimerTask的状态和调度时间设定，决定执行或移除TimerTask。<br />
<strong>TimerTask应设计为执行不占用太长时间</strong>，否则同一个Timer队列中其他的TimerTask的执行将会延迟。<br />
更多可参见：<a href="http://javarevisited.blogspot.com/2013/02/what-is-timer-and-timertask-in-java-example-tutorial.html">What is Timer and TimerTask in Java</a></p>

<p><strong>基于Timer的FileMonitor的实现：</strong><br />
<img src="http://dl2.iteye.com/upload/attachment/0105/5399/4b7c54fa-cac9-3d7b-85c7-6e655ff8bbcb.jpg" /></p>

<p>通过实现FileChangeObserver接口，该FileMonitor允许对任意文件添加任意多个Observer。<br />
<a href="https://github.com/cwind001/CwindJavaLab/blob/master/FileMonitor/src/main/java/com/cwind/file/FileChangeMonitor.java">FileChangeMonitor及FileChangeTask源码</a><br />
FileChangeMonitor本身是一个单例。fileObservers由Collections.synchronizedMap()初始化，保证在该map上的每一个原子操作都将被同步。在其addObserver方法中为每一个fileChangeObserver创建一个FileChangeTask，将其加入fileObservers中。FileChangeTask扩展了TimerTask，由Timer调度执行。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>FileChangeMonitor.addObserver()</span> &mdash; <a href="https://github.com/cwind001/CwindJavaLab/blob/master/FileMonitor/src/main/java/com/cwind/file/FileChangeMonitor.java">link</a></figcaption> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>
    <span class="directive">public</span> <span class="type">void</span> addObserver(FileChangeObserver observer, 
      <span class="predefined-type">String</span> filename, <span class="type">long</span> delay) <span class="directive">throws</span> <span class="exception">FileNotFoundException</span> {  
        <span class="predefined-type">TimerTask</span> task = <span class="keyword">new</span> FileChangeTask(observer , filename );  
        <span class="predefined-type">List</span>&lt;<span class="predefined-type">TimerTask</span>&gt; tasks = fileObservers.get(filename );  
        <span class="keyword">if</span>(tasks ==<span class="predefined-constant">null</span>){  
            tasks = <span class="keyword">new</span> <span class="predefined-type">ArrayList</span>&lt;<span class="predefined-type">TimerTask</span>&gt;();  
           }  
        tasks.add( task);  
        fileObservers.put(filename , tasks );  
        timer.schedule( task, delay, delay);  
    }  
</pre></td>
</tr></table>
 </figure></notextile></div>
<p>在FileChangeTask的run()函数中，通过比对时间戳来判断文件是否修改，若发生改动，则通知其Observer进行相应处理。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>FileChangeTask.run()</span> &mdash; <a href="https://github.com/cwind001/CwindJavaLab/blob/master/FileMonitor/src/main/java/com/cwind/file/FileChangeMonitor.java">link</a></figcaption> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre>  
<span class="directive">public</span> <span class="type">void</span> run() {
        <span class="keyword">try</span>    {
            <span class="type">long</span> newLastModified = file.lastModified();
            <span class="keyword">if</span> (newLastModified &gt; lastModified) {
                lastModified = newLastModified;
                observer.fileChanged(file.getPath());
            }
        }
        <span class="keyword">catch</span> (<span class="exception">Exception</span> e)    {
            <span class="predefined-type">System</span>.err.println(e.getMessage());
        }
    } 
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>测试用例<a href="https://github.com/cwind001/CwindJavaLab/blob/163448ce07ecca1738b306bed9bf1b39464d345c/FileMonitor/src/test/java/com/cwind/file/FileMonitorTest.java">FileMonitorTest</a>中为sample1.txt添加了consoleObserver和emailObserver，为sample2.txt添加了consoleObserver。然后对这两个文件分别进行修改。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>FileMonitorTest</span> &mdash; <a href="https://github.com/cwind001/CwindJavaLab/blob/163448ce07ecca1738b306bed9bf1b39464d345c/FileMonitor/src/test/java/com/cwind/file/FileMonitorTest.java">link</a></figcaption> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">package</span> <span class="namespace">com.cwind.file</span>;

<span class="keyword">import</span> <span class="include">java.io.File</span>;
<span class="keyword">import</span> <span class="include">java.io.FileOutputStream</span>;
<span class="keyword">import</span> <span class="include">java.io.IOException</span>;

<span class="keyword">import</span> <span class="include">org.junit.After</span>;
<span class="keyword">import</span> <span class="include">org.junit.Before</span>;
<span class="keyword">import</span> <span class="include">org.junit.Test</span>;

<span class="directive">public</span> <span class="type">class</span> <span class="class">FileMonitorTest</span> {
    
    <span class="predefined-type">File</span> sampleFile1, sampleFile2;
    FileChangeMonitor monitor;
    ConsoleFileChangeObserver consoleObserver;
    EmailFileChangeObserver emailObserver;
    
    <span class="annotation">@Before</span>
    <span class="directive">public</span> <span class="type">void</span> setUp() <span class="directive">throws</span> <span class="exception">Exception</span> {
        sampleFile1 = <span class="keyword">new</span> <span class="predefined-type">File</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">sample1.txt</span><span class="delimiter">&quot;</span></span>); 
        sampleFile2 = <span class="keyword">new</span> <span class="predefined-type">File</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">sample2.txt</span><span class="delimiter">&quot;</span></span>);
        monitor = FileChangeMonitor.getInstance();
        consoleObserver = <span class="keyword">new</span> ConsoleFileChangeObserver();
        emailObserver = <span class="keyword">new</span> EmailFileChangeObserver(<span class="string"><span class="delimiter">&quot;</span><span class="content">billchen01@163.com</span><span class="delimiter">&quot;</span></span>);
    }

    <span class="annotation">@After</span>
    <span class="directive">public</span> <span class="type">void</span> tearDown() <span class="directive">throws</span> <span class="exception">Exception</span>    {
        
    }
    
    <span class="annotation">@Test</span>
    <span class="directive">public</span> <span class="type">void</span> testMonitorSampleFile() <span class="directive">throws</span> <span class="exception">InterruptedException</span>, 
        <span class="exception">IOException</span>{
        monitor.addObserver(consoleObserver, sampleFile1.getPath(), 
            FileChangeMonitor.DELAY_TIME);
        monitor.addObserver(emailObserver, sampleFile1.getPath(), 
            FileChangeMonitor.DELAY_TIME);
        monitor.addObserver(consoleObserver, sampleFile2.getPath(), 
            FileChangeMonitor.DELAY_TIME);
        
        <span class="predefined-type">FileOutputStream</span> fos1 = <span class="keyword">new</span> <span class="predefined-type">FileOutputStream</span>(sampleFile1);
        <span class="predefined-type">FileOutputStream</span> fos2 = <span class="keyword">new</span> <span class="predefined-type">FileOutputStream</span>(sampleFile2);
        fos1.write(<span class="integer">0</span>);
        fos2.write(<span class="integer">0</span>);
        fos1.flush();
        fos2.flush();
        fos1.close();
        fos2.close();
        <span class="predefined-type">Thread</span>.sleep(<span class="integer">3000</span>);
    }
}
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>输出结果如下：<br />
<code>Console: File sample1.txt is changed, will print warning message to console.</code><br />
<code>File sample1.txt is changed, will send email to billchen01@163.com.</code><br />
<code>Console: File sample2.txt is changed, will print warning message to console.</code>  </p>

<p><strong>JDK 1.7 及之后版本：基于WatchService实现</strong><br />
Java 7 的新IO - NIO.2提供了一组新的类和方法，主要存在于java.nio包内。它完全取代了java.io.File与文件系统的交互，并提供了新的异步处理类，无需手动配置线程池和其他底层并发控制，便可在后台线程中执行文件和网络IO操作。<br />
其中Path是新文件IO的基石。为与之前版本兼容，java.io.File类中新增了toPath()方法，Path类中提供了toFile()方法。
Watch Service API可用于将指定目录注册到监视服务上。注册时须指定事件类型，如文件创建、修改、删除等。相关类图如下：<br />
<img src="http://dl2.iteye.com/upload/attachment/0105/5403/f20e959b-2ded-3a35-b984-61f5010f7efb.jpg" />  </p>

<p>WatchService是监视服务接口，在不同系统上有不同的实现类。实现了Watchable接口的对象方可注册监视服务，java.nio.file.Path实现了此接口。WatchKey表示Watchable对象和WatchService的关联关系，在注册时被创建。注册完成后，WatchKey将被置为’ready’状态，直到下列三种情况之一发生：  </p>

<ol>
  <li>WatchKey.cancel()被调用</li>
  <li>被监控的目录不存在或不可访问</li>
  <li>WatchService对象被关闭  </li>
</ol>

<p>当文件改动发生时，WatchKey的状态将会被置为”signaled”然后被放入待处理队列中。WatchService提供了<strong>三种从队列中获取WatchKeys的方式：</strong></p>

<ol>
  <li>poll - 返回队列中的一个key。如果没有可用的key，将立即返回null。</li>
  <li>poll(long, TimeUnit) - 如果队列中存在可用的key则将之返回，否则在参数预置的时间内等待可用的key。TimeUnit用来指定前一个参数表示的时间是纳秒、毫秒或是其他的时间单位。
例子：final WatchKey watchKey = watchService.poll(1, TimeUnit.MINUTES);将会等待1分钟</li>
  <li>take - 方法将会等待直到可用的key被返回。</li>
</ol>

<p><strong>获取WatchKey后进行处理：</strong></p>

<ol>
  <li>通过WatchKey.pollEvents()函数得到WatchEvents列表。</li>
  <li>对于每一个WatchEvent，可以通过kind()函数获得其改动类型。</li>
  <li>通过WatchEvent.context()函数得到发生该事件的文件名</li>
  <li>当该key的所有事件处理完成后，需要调用WatchKey.reset()方法把该key重置为ready状态。若不重置，该key将无法接收后续的改动。若reset返回false，表示该WatchKey不再合法，主循环可以退出。</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>WatchServiceTest</span> &mdash; <a href="https://github.com/cwind001/CwindJavaLab/blob/163448ce07ecca1738b306bed9bf1b39464d345c/FileMonitor/src/test/java/com/cwind/file/WatchServerTest.java">link</a></figcaption> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">package</span> <span class="namespace">com.cwind.file</span>;

<span class="keyword">import</span> <span class="include">java.io.IOException</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.FileSystems</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.Path</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.Paths</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.StandardWatchEventKinds</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.WatchEvent</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.WatchKey</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.WatchService</span>;

<span class="directive">public</span> <span class="type">class</span> <span class="class">WatchServerTest</span> {
    <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args) <span class="directive">throws</span> <span class="exception">InterruptedException</span>, 
        <span class="exception">IOException</span> {
        WatchService watchService 
            = FileSystems.getDefault().newWatchService();
        <span class="directive">final</span> Path path = Paths.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">.</span><span class="delimiter">&quot;</span></span>);
        <span class="directive">final</span> WatchKey watchKey = path.register(watchService, 
            StandardWatchEventKinds.ENTRY_MODIFY,
            StandardWatchEventKinds.ENTRY_CREATE,
            StandardWatchEventKinds.ENTRY_DELETE);
        <span class="type">boolean</span> fileNotChanged = <span class="predefined-constant">true</span>;
        <span class="type">int</span> count = <span class="integer">0</span>;
        <span class="keyword">while</span> (fileNotChanged) {
            <span class="directive">final</span> WatchKey wk = watchService.take();
            <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Loop count: </span><span class="delimiter">&quot;</span></span> + count);
            <span class="keyword">for</span> (WatchEvent&lt;?&gt; event : wk.pollEvents()) {
                <span class="directive">final</span> Path changed = (Path) event.context();
                <span class="predefined-type">System</span>.out.println(changed + <span class="string"><span class="delimiter">&quot;</span><span class="content">, </span><span class="delimiter">&quot;</span></span> + event.kind());
                <span class="keyword">if</span> (changed.endsWith(<span class="string"><span class="delimiter">&quot;</span><span class="content">sample1.txt</span><span class="delimiter">&quot;</span></span>)) {
                    <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Sample file has changed</span><span class="delimiter">&quot;</span></span>);
                }
            }
            <span class="comment">// reset the key</span>
            <span class="type">boolean</span> valid = wk.reset();
            <span class="keyword">if</span> (!valid) {
                <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Key has been unregisterede</span><span class="delimiter">&quot;</span></span>);
            }
            count++;
        }
    }
}
</pre></td>
</tr></table>
 </figure></notextile></div>
<p>总结，使用WatchService步骤如下：  </p>

<ol>
  <li>创建WatchService</li>
  <li>得到待检测目录的Path</li>
  <li>将目录登记到变化监测名单中</li>
  <li>执行WatchService的take()方法，直到WatchKey到来。</li>
  <li>得到WatchKey后遍历WatchEvent进行检测</li>
  <li>重置key准备下一个事件，继续等待  </li>
</ol>

<p>大多数文件系统实现包含了文件更改通知的本地支持，Watch Service API正是利用了文件系统的这种机制。若文件系统并不支持变更通知机制，Watch Service仍然会轮询文件系统，等待事件产生。</p>

<p><strong>References:</strong>  </p>

<ol>
  <li><a href="http://docs.oracle.com/javase/tutorial/essential/io/notification.html">Watching a Directory for Changes</a></li>
  <li><a href="http://java.dzone.com/articles/using-java-7s-watchservice">Using Java 7’s WatchService to Monitor Directories</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java PropertyDescriptor 应用及源码分析]]></title>
    <link href="http://cwind001.github.io/blog/2014/03/08/java-propertydescriptor/"/>
    <updated>2014-03-08T22:15:28+08:00</updated>
    <id>http://cwind001.github.io/blog/2014/03/08/java-propertydescriptor</id>
    <content type="html"><![CDATA[<p>前文<a href="http://gocwind.com/blog/2014/01/20/java-introspector/">从Introspector谈Java内省机制</a>提到了通过Introspector.getBeanInfo()方法获取属性描述符数组，进而读取属性值的方式，但未对PropertyDescriptor的应用和实现作进一步阐释，在此作个补完。<br />
<!--more-->
<strong>1. 概述</strong><br />
PropertyDescriptor描述Java Bean中通过一对存储器方法（getter / setter）导出的一个属性。我们可以通过该PropertyDescriptor对bean中的该属性进行读取和写入操作，也可以设置其getter / setter。<br />
<img src="http://dl2.iteye.com/upload/attachment/0094/6177/5c9f92d1-c105-38f0-88e5-18f00e4d5531.jpg" /> <br />
<a href="http://www.oschina.net/code/explore/gcc-4.5.2/libjava/classpath/java/beans/PropertyDescriptor.java">PropertyDescriptor源码见此</a><br />
<strong>2. 关键接口及内部属性</strong>  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
</pre></td>
  <td class="code"><pre> 
<span class="directive">public</span> <span class="predefined-type">PropertyDescriptor</span>(<span class="predefined-type">String</span> name, 
    <span class="predefined-type">Class</span>&lt;?&gt; beanClass) <span class="directive">throws</span> <span class="exception">IntrospectionException</span>  
<span class="directive">public</span> <span class="predefined-type">PropertyDescriptor</span>(<span class="predefined-type">String</span> name, <span class="predefined-type">Class</span>&lt;?&gt; beanClass, 
<span class="predefined-type">String</span> getMethodName, <span class="predefined-type">String</span> setMethodName) <span class="directive">throws</span> <span class="exception">IntrospectionException</span>  
<span class="directive">public</span> <span class="predefined-type">PropertyDescriptor</span>(<span class="predefined-type">String</span> name, 
<span class="predefined-type">Method</span> readMethod, <span class="predefined-type">Method</span> writeMethod) <span class="directive">throws</span> <span class="exception">IntrospectionException</span>  
  
<span class="directive">public</span> <span class="predefined-type">Class</span>&lt;?&gt; getPropertyType()  
<span class="directive">public</span> <span class="predefined-type">Method</span> getReadMethod()  
<span class="directive">public</span> <span class="predefined-type">Method</span> getWriteMethod()  
  
<span class="directive">public</span> <span class="type">void</span> setReadMethod(<span class="predefined-type">Method</span> readMethod) <span class="directive">throws</span> <span class="exception">IntrospectionException</span>  
<span class="directive">public</span> <span class="type">void</span> setWriteMethod(<span class="predefined-type">Method</span> writeMethod)  
<span class="directive">public</span> <span class="type">boolean</span> equals(<span class="predefined-type">Object</span> o)   
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>相关的PropertyDescriptor内部属性如下：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre> 
    <span class="predefined-type">Class</span>&lt;?&gt; propertyType;     <span class="comment">//该属性的类型  </span>
    <span class="predefined-type">Method</span> getMethod;     <span class="comment">//getter  </span>
    <span class="predefined-type">Method</span> setMethod;     <span class="comment">//setter  </span>
</pre></div>
</div>
 </figure></notextile></div>
<p>还有继承自其父类FeatureDescriptor的功能，用于指定该属性的编程名称<br />
<strong>3. 简单应用</strong><br />
现有Person类如下：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
</pre></td>
  <td class="code"><pre>   
<span class="keyword">package</span> <span class="namespace">com.cwind.property</span>;  
  
<span class="directive">public</span> <span class="type">class</span> <span class="class">Person</span> {  
        <span class="directive">private</span> <span class="predefined-type">String</span> name ;  
        <span class="directive">private</span> <span class="type">int</span> age ;  
         
        <span class="directive">public</span> Person(){ <span class="local-variable">this</span>.name = <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>; <span class="local-variable">this</span>.age = <span class="integer">0</span>; }  
        <span class="directive">public</span> Person(<span class="predefined-type">String</span> name, <span class="type">int</span> age) { <span class="local-variable">super</span>(); <span class="local-variable">this</span>.name = name; 
    <span class="local-variable">this</span>. age = age; }  
  
        <span class="directive">public</span> <span class="predefined-type">String</span> getName() { <span class="keyword">return</span> name; }  
        <span class="directive">public</span> <span class="type">void</span> setName(<span class="predefined-type">String</span> name) { <span class="local-variable">this</span>. name = name; }  
  
        <span class="directive">public</span> <span class="type">int</span> getAge() { <span class="keyword">return</span> age; }  
        <span class="directive">public</span> <span class="type">void</span> setAge(<span class="type">int</span> age) { <span class="local-variable">this</span>. age = age; }  
         
        <span class="directive">public</span> <span class="predefined-type">String</span> getNameInUpperCase(){  
               <span class="keyword">return</span> <span class="local-variable">this</span> .name .toUpperCase();  
       }  
        <span class="directive">public</span> <span class="type">void</span> setNameToLowerCase(<span class="predefined-type">String</span> name){  
               <span class="local-variable">this</span>.name = name.toLowerCase();  
       }  
}  
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>该类中除了name和age两个属性的标准getter和setter之外，还有增加了一个获取大写name的get方法和一个将name设置为小写的set方法。<br />
在测试类中，首先获得这两个方法对象。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
</pre></td>
  <td class="code"><pre> 
<span class="predefined-type">Class</span> personClass = <span class="predefined-type">Class</span>.forName(<span class="string"><span class="delimiter">&quot;</span><span class="content">com.cwind.property.Person</span><span class="delimiter">&quot;</span></span>);  
<span class="predefined-type">Method</span> read = personClass.getMethod(<span class="string"><span class="delimiter">&quot;</span><span class="content">getNameInUpperCase</span><span class="delimiter">&quot;</span></span>, <span class="predefined-constant">null</span>);  
<span class="predefined-type">Method</span> write = personClass.getMethod(<span class="string"><span class="delimiter">&quot;</span><span class="content">setNameToLowerCase</span><span class="delimiter">&quot;</span></span>, <span class="predefined-type">String</span>.class );  
  
<span class="comment">//然后可以通过两种方式构造PropertyDescriptor  </span>
<span class="predefined-type">PropertyDescriptor</span> prop1 = <span class="keyword">new</span> <span class="predefined-type">PropertyDescriptor</span>( <span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>, Person.class );
     <span class="comment">//使用其标准getter和setter  </span>
<span class="predefined-type">PropertyDescriptor</span> prop2 = <span class="keyword">new</span> <span class="predefined-type">PropertyDescriptor</span>( <span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>, read, write);
     <span class="comment">//使用read和write两个方法对象所自定义的getter和setter  </span>
  
<span class="comment">//下面构建一个Person对象  </span>
Person person = <span class="keyword">new</span> Person(<span class="string"><span class="delimiter">&quot;</span><span class="content">Kobe</span><span class="delimiter">&quot;</span></span> , <span class="integer">36</span>);  
<span class="predefined-type">System</span>. out.println(prop1.getReadMethod().invoke(person, <span class="predefined-constant">null</span>));
     <span class="comment">// --实际调用Person.getName(), result: Kobe  </span>
<span class="predefined-type">System</span>. out.println(prop2.getReadMethod().invoke(person, <span class="predefined-constant">null</span>));
     <span class="comment">// --实际调用Person.getNameInUpperCase(), result: KOBE  </span>
                       
prop1.getWriteMethod().invoke(person, <span class="string"><span class="delimiter">&quot;</span><span class="content">James</span><span class="delimiter">&quot;</span></span>);
     <span class="comment">// --实际调用Person.setName(), person.name被设置为James  </span>
prop2.getWriteMethod().invoke(person, <span class="string"><span class="delimiter">&quot;</span><span class="content">James</span><span class="delimiter">&quot;</span></span>);
     <span class="comment">// --实际调用Person.setNameToLowerCase(), person.name被设置为james </span>
</pre></td>
</tr></table>
 </figure></notextile></div>
<p><strong>4. 源码分析</strong><br />
构造函数1：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
</pre></td>
  <td class="code"><pre> 
<span class="directive">public</span> <span class="predefined-type">PropertyDescriptor</span>(<span class="predefined-type">String</span> name, <span class="predefined-type">Class</span>&lt;?&gt; beanClass)  
        <span class="directive">throws</span> <span class="exception">IntrospectionException</span> {  
        setName(name);     <span class="comment">//设置属性编程名，本例中即'name'  </span>
        <span class="keyword">if</span> (name.length() == <span class="integer">0</span>){  
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">empty property name</span><span class="delimiter">&quot;</span></span>);       
<span class="comment">// 编程名为空则抛出异常  </span>
        }  
        <span class="predefined-type">String</span> caps = <span class="predefined-type">Character</span>.toUpperCase(name.charAt(<span class="integer">0</span>))
     + name.substring(<span class="integer">1</span>);       
<span class="comment">// 标准getter应为getName()或isName(), 先将首字母大写  </span>
        findMethods(beanClass, <span class="string"><span class="delimiter">&quot;</span><span class="content">is</span><span class="delimiter">&quot;</span></span> + caps, <span class="string"><span class="delimiter">&quot;</span><span class="content">get</span><span class="delimiter">&quot;</span></span> + caps, <span class="string"><span class="delimiter">&quot;</span><span class="content">set</span><span class="delimiter">&quot;</span></span> + caps);       
<span class="comment">// 参数依次为：类类型，可能的getter函数名1，可能的getter函数名2，setter函数名  </span>
        <span class="keyword">if</span> (getMethod == <span class="predefined-constant">null</span>){
   <span class="comment">// findMethods()设置PropertyDescriptor的getMethod和setMethod属性  </span>
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(  
                <span class="string"><span class="delimiter">&quot;</span><span class="content">Cannot find a is</span><span class="delimiter">&quot;</span></span> + caps + <span class="string"><span class="delimiter">&quot;</span><span class="content"> or get</span><span class="delimiter">&quot;</span></span> + caps + <span class="string"><span class="delimiter">&quot;</span><span class="content"> method</span><span class="delimiter">&quot;</span></span>);  
        }  
        <span class="keyword">if</span> (setMethod == <span class="predefined-constant">null</span>){  
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(  
                <span class="string"><span class="delimiter">&quot;</span><span class="content">Cannot find a </span><span class="delimiter">&quot;</span></span> + caps + <span class="string"><span class="delimiter">&quot;</span><span class="content"> method</span><span class="delimiter">&quot;</span></span> );  
        }  
        propertyType = checkMethods(getMethod, setMethod);       
<span class="comment">// checkMethods()函数用来检测getMethod得到的类型与setMethod的参数类型是否匹配，</span>
<span class="error">若</span><span class="error">匹</span><span class="error">配</span><span class="error">则</span><span class="error">置</span>propertyType<span class="error">为</span><span class="error">该</span><span class="error">类</span><span class="error">型</span>  
    }  
</pre></td>
</tr></table>
 </figure></notextile></div>
<p>构造函数2：<br />
<code>public PropertyDescriptor(String name, Class&lt;?&gt; beanClass, String getMethodName, String setMethodName) throws IntrospectionException</code><br />
其实现与构造函数1类似，只是调用findMethods时直接查找指定的getter和setter函数名：<br />
        <code>findMethods(beanClass, getMethodName, null, setMethodName);</code><br />
构造函数3则更加直观，直接设置方法对象<br />
<code>public PropertyDescriptor(String name, Method readMethod, Method writeMethod) throws IntrospectionException</code><br />
两个比较重要的私有辅助函数分别为<code>findMethods()</code>和<code>checkMethods()</code>，分别看一下其实现<br />
findMethods用来按指定的getter和setter函数名在指定Class中查找getMethod和setMethod，并设置PropertyDescriptor的相关属性   </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
<a href="#n56" name="n56">56</a>
<a href="#n57" name="n57">57</a>
<a href="#n58" name="n58">58</a>
<a href="#n59" name="n59">59</a>
<strong><a href="#n60" name="n60">60</a></strong>
<a href="#n61" name="n61">61</a>
<a href="#n62" name="n62">62</a>
<a href="#n63" name="n63">63</a>
<a href="#n64" name="n64">64</a>
<a href="#n65" name="n65">65</a>
</pre></td>
  <td class="code"><pre> 
<span class="directive">private</span> <span class="type">void</span> findMethods(<span class="predefined-type">Class</span> beanClass,
 <span class="predefined-type">String</span> getMethodName1, <span class="predefined-type">String</span> getMethodName2, <span class="predefined-type">String</span> setMethodName)
 <span class="directive">throws</span> <span class="exception">IntrospectionException</span> {  
        <span class="keyword">try</span> {  
            <span class="comment">// 首先查找getMethodName1指定的getter (isXXX)  </span>
            <span class="keyword">if</span> (getMethodName1 != <span class="predefined-constant">null</span>) {  
                <span class="keyword">try</span> {  
                    getMethod = beanClass.getMethod(getMethodName1,
     <span class="keyword">new</span> <span class="predefined-type">Class</span>[<span class="integer">0</span>]);  
                }  
                <span class="keyword">catch</span> (<span class="exception">NoSuchMethodException</span> e)  
                {}  
            }  
            <span class="comment">// 若失败，则查找getMethodName2指定的getter (getXXX)  </span>
            <span class="keyword">if</span> (getMethod == <span class="predefined-constant">null</span> &amp;&amp; getMethodName2 != <span class="predefined-constant">null</span>) {  
                <span class="keyword">try</span> {  
                    getMethod = beanClass.getMethod(getMethodName2,
     <span class="keyword">new</span> <span class="predefined-type">Class</span>[<span class="integer">0</span>]);  
                }  
                <span class="keyword">catch</span> (<span class="exception">NoSuchMethodException</span> e)  
                {}  
            }  
            <span class="keyword">if</span> (setMethodName != <span class="predefined-constant">null</span>) {  
                <span class="keyword">if</span> (getMethod != <span class="predefined-constant">null</span>) {  
                    <span class="comment">// 如果得到了getMethod，则通过其返回值类型决定setMethod的参数类型  </span>
                    <span class="predefined-type">Class</span> propertyType = getMethod.getReturnType();  
                    <span class="keyword">if</span> (propertyType == <span class="predefined-type">Void</span>.TYPE) {   
<span class="comment">// 若getter的返回值为Void类型则抛出异常  </span>
                        <span class="predefined-type">String</span> msg
             = <span class="string"><span class="delimiter">&quot;</span><span class="content">The property's read method has return type 'void'</span><span class="delimiter">&quot;</span></span>;  
                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(msg);  
                    }  
  
                    <span class="predefined-type">Class</span><span class="type">[]</span> setArgs = <span class="keyword">new</span> <span class="predefined-type">Class</span><span class="type">[]</span> { propertyType };   
                    <span class="keyword">try</span> {  
                        setMethod = beanClass.getMethod(setMethodName,
     setArgs);   
<span class="comment">// 通过函数名和参数类型获得setMethod  </span>
                    }  
                    <span class="keyword">catch</span> (<span class="exception">NoSuchMethodException</span> e)  
                    {}  
                }  
                <span class="keyword">else</span> <span class="keyword">if</span> (getMethodName1 == <span class="predefined-constant">null</span> &amp;&amp; getMethodName2 == <span class="predefined-constant">null</span>) {  
<span class="comment">// getMethodName1和2均为空，则此属性为只写属性，此时遍历bean中的函数，</span>
<span class="comment">// 返回第一个名称与setMethodName一致且返回类型为Void的单参数函数  </span>
                    <span class="predefined-type">Method</span><span class="type">[]</span> methods = beanClass.getMethods();  
                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &lt; methods.length; i++) {  
                        <span class="keyword">if</span> (methods[i].getName().equals(setMethodName)  
                            &amp;&amp; methods[i].getParameterTypes().length == <span class="integer">1</span>  
                            &amp;&amp; methods[i].getReturnType() == <span class="predefined-type">Void</span>.TYPE) {  
                            setMethod = methods[i];  
                            <span class="keyword">break</span>;  
                        }  
                    }  
                }  
            }  
        }  
        <span class="keyword">catch</span> (<span class="exception">SecurityException</span> e) {  
            <span class="predefined-type">String</span> msg
         = <span class="string"><span class="delimiter">&quot;</span><span class="content">SecurityException thrown on attempt to access methods.</span><span class="delimiter">&quot;</span></span>;
     <span class="comment">// 作者在纠结要不要修改异常类型  </span>
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(msg);  
        }  
    }  
</pre></td>
</tr></table>
 </figure></notextile></div>
<p>checkMethods方法  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
</pre></td>
  <td class="code"><pre> 
<span class="directive">private</span> <span class="predefined-type">Class</span>&lt;?&gt; checkMethods(<span class="predefined-type">Method</span> readMethod, <span class="predefined-type">Method</span> writeMethod)
 <span class="directive">throws</span> <span class="exception">IntrospectionException</span> {  
        <span class="predefined-type">Class</span>&lt;?&gt; newPropertyType = propertyType;  
         <span class="comment">// 合法的read方法应该无参同时带有一个非空的返回值类型  </span>
        <span class="keyword">if</span> (readMethod != <span class="predefined-constant">null</span>) {  
            <span class="keyword">if</span> (readMethod.getParameterTypes().length &gt; <span class="integer">0</span>) {  
                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">read method
     has unexpected parameters</span><span class="delimiter">&quot;</span></span>);  
            }  
            newPropertyType = readMethod.getReturnType();  
             <span class="keyword">if</span> (newPropertyType == <span class="predefined-type">Void</span>.TYPE) {  
                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">read method
     return type is void</span><span class="delimiter">&quot;</span></span>);  
            }  
        }  
         <span class="comment">// 合法的write方法应该包含一个类型相同的参数  </span>
        <span class="keyword">if</span> (writeMethod != <span class="predefined-constant">null</span>) {  
            <span class="keyword">if</span> (writeMethod.getParameterTypes().length != <span class="integer">1</span>) {
     <span class="comment">// 参数不能超过一个  </span>
                <span class="predefined-type">String</span> msg = <span class="string"><span class="delimiter">&quot;</span><span class="content">write method
     does not have exactly one parameter</span><span class="delimiter">&quot;</span></span> ;  
                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(msg);  
            }  
            <span class="keyword">if</span> (readMethod == <span class="predefined-constant">null</span>) {  
                <span class="comment">// 若无read方法，属性类型就应为writeMethod的参数类型  </span>
                newPropertyType = writeMethod.getParameterTypes()[<span class="integer">0</span>];  
            }  
            <span class="keyword">else</span> {  
                <span class="comment">// 检查read方法的返回值类型是否与write方法的参数类型相匹配  </span>
                <span class="keyword">if</span> (newPropertyType != <span class="predefined-constant">null</span>  
                    &amp;&amp; !newPropertyType.isAssignableFrom(  
                        writeMethod.getParameterTypes()[<span class="integer">0</span>])) {  
                     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">read and write method  
     are not compatible</span><span class="delimiter">&quot;</span></span>);  
                }  
            }  
        }  
         <span class="keyword">return</span> newPropertyType;  
    }  
</pre></td>
</tr></table>
 </figure></notextile></div>
<p>最后提一句<code>PropertyDescriptor.equals()</code>,只有当属性类型、标志、读写方法和  <code>PropertyEditorClass</code> 均相同时才认为两个<code>PropertyDescriptor</code>相等  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">return</span> samePropertyType  
                &amp;&amp; sameFlags  
                &amp;&amp; sameReadMethod  
                &amp;&amp; sameWriteMethod  
                &amp;&amp; samePropertyEditorClass; 
</pre></div>
</div>
 </figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从Introspector谈Java内省机制]]></title>
    <link href="http://cwind001.github.io/blog/2014/01/20/java-introspector/"/>
    <updated>2014-01-20T22:00:51+08:00</updated>
    <id>http://cwind001.github.io/blog/2014/01/20/java-introspector</id>
    <content type="html"><![CDATA[<p><strong>内省</strong><br />
内省是Java语言的一种重要特性。使用内省我们可以在运行时得到一个类的内部信息。这些信息包括方法、属性、构造函数及其他。内省的一个应用是开发使用插件的应用程序。应用程序可以在运行时获取并使用插件类的构造函数、方法和属性。内省也可以应用于创建Java Beans和Javadocs中。<br />
<!--more-->
<strong>Introspector类</strong><br />
Introspector类为访问目标Jave Bean支持的属性、事件和方法提供了标准方法。该方法可用于工具类（如BeanUtils）中。<br />
对于属性、事件和方法中的每一类信息，Introspector会分别分析目标bean以及其父类，寻找显式或隐式信息并用其构建一个能够全面描述目标bean的BeanInfo对象。<br />
<img src="http://dl2.iteye.com/upload/attachment/0093/3705/b0194712-7259-3d67-9f84-da5282bee5cb.jpg" /><br />
通过调用Introspector.getBeanInfo()方法来获得指定类的bean信息。Java Bean规范允许通过实现BeanInfo接口，定义一个对象来描述bean。为了将BeanInfo与bean关联起来，须遵守如下命名模式：bean信息类的名字必须是将”BeanInfo”添加到bean名字的后面构成。例如：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
</pre></td>
  <td class="code"><pre> 
<span class="keyword">package</span> <span class="namespace">com.cwind.introspector</span>;  
  
<span class="directive">public</span> <span class="type">class</span> <span class="class">Ultraman</span> <span class="directive">extends</span> Superhero {  
        <span class="directive">public</span> <span class="predefined-type">String</span> avanta ;  
  
        <span class="directive">public</span> Ultraman(<span class="predefined-type">String</span> avanta) {  
               <span class="local-variable">super</span> ();  
               <span class="local-variable">this</span> .avanta = avanta;  
       }  
  
        <span class="directive">public</span> <span class="predefined-type">String</span> getAvanta() {  
               <span class="keyword">return</span> avanta ;  
       }  
  
        <span class="directive">public</span> <span class="type">void</span> setAvanta(<span class="predefined-type">String</span> avanta) {  
               <span class="local-variable">this</span> .avanta = avanta;  
       }  
}  
</pre></td>
</tr></table>
 </figure></notextile></div>
<p>相关信息类：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
</pre></td>
  <td class="code"><pre> 
<span class="keyword">package</span> <span class="namespace">com.cwind.introspector</span>;  
  
<span class="keyword">import</span> <span class="include">java.beans.IntrospectionException</span>;  
<span class="keyword">import</span> <span class="include">java.beans.PropertyDescriptor</span>;  
<span class="keyword">import</span> <span class="include">java.beans.SimpleBeanInfo</span>;  
  
<span class="directive">public</span> <span class="type">class</span> <span class="class">UltramanBeanInfo</span> <span class="directive">extends</span> <span class="predefined-type">SimpleBeanInfo</span> {  
        <span class="directive">public</span> <span class="predefined-type">PropertyDescriptor</span><span class="type">[]</span> getPropertyDescriptors() {  
               <span class="keyword">try</span> {  
                      <span class="keyword">return</span> <span class="keyword">new</span> <span class="predefined-type">PropertyDescriptor</span><span class="type">[]</span>{  
                        <span class="keyword">new</span> <span class="predefined-type">PropertyDescriptor</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">avanta</span><span class="delimiter">&quot;</span></span> , Ultraman. class),  
                        <span class="keyword">new</span> <span class="predefined-type">PropertyDescriptor</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span> , Ultraman. class)  
                     };  
              } <span class="keyword">catch</span> (<span class="exception">IntrospectionException</span> e) {  
                     e.printStackTrace();  
                      <span class="keyword">return</span> <span class="predefined-constant">null</span> ;  
              }  
       }  
}  
</pre></td>
</tr></table>
 </figure></notextile></div>
<p>信息类会先从Bean类所在的包内查找，如上例中搜索路径为com.cwind.introspector.UltramanBeanInfo。搜索路径也可以通过Introspector.setBeanInfoSearchPath()进行设置。使用BeanInfo类是为了获取对bean属性的控制权。只需提供属性名和所属的bean类，就可以为每个属性构建一个PropertyDescriptor。
演示类Superhero及其另一子类Titan定义：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
<a href="#n56" name="n56">56</a>
<a href="#n57" name="n57">57</a>
<a href="#n58" name="n58">58</a>
<a href="#n59" name="n59">59</a>
<strong><a href="#n60" name="n60">60</a></strong>
<a href="#n61" name="n61">61</a>
<a href="#n62" name="n62">62</a>
<a href="#n63" name="n63">63</a>
<a href="#n64" name="n64">64</a>
<a href="#n65" name="n65">65</a>
<a href="#n66" name="n66">66</a>
</pre></td>
  <td class="code"><pre> 
<span class="keyword">package</span> <span class="namespace">com.cwind.introspector</span>;  
  
<span class="directive">public</span> <span class="type">class</span> <span class="class">Superhero</span> {  
     <span class="directive">private</span> <span class="predefined-type">String</span> name ;  
     <span class="directive">private</span> <span class="predefined-type">String</span> superPower ;  
     <span class="directive">private</span> <span class="type">int</span> age ;  
         
     <span class="directive">public</span> Superhero(){  
          <span class="local-variable">this</span>.name = <span class="string"><span class="delimiter">&quot;</span><span class="content">defaultName</span><span class="delimiter">&quot;</span></span> ;  
          <span class="local-variable">this</span>.superPower  = <span class="string"><span class="delimiter">&quot;</span><span class="content">defaultSuperPower</span><span class="delimiter">&quot;</span></span> ;  
          <span class="local-variable">this</span>.age = <span class="integer">0</span>;  
     }  
         
     <span class="directive">public</span> Superhero(<span class="predefined-type">String</span> name, <span class="predefined-type">String</span> superPower, <span class="type">int</span> age) {  
          <span class="local-variable">super</span>();  
          <span class="local-variable">this</span>.name = name;  
          <span class="local-variable">this</span>.superPower = superPower;  
          <span class="local-variable">this</span>.age = age;  
     }  
  
     <span class="directive">public</span> <span class="predefined-type">String</span> getName() {  
          <span class="keyword">return</span> name ;  
     }  
     <span class="directive">public</span> <span class="type">void</span> setName(<span class="predefined-type">String</span> name) {  
          <span class="local-variable">this</span>.name = name;  
     }  
     <span class="directive">public</span> <span class="predefined-type">String</span> getSuperPower() {  
          <span class="keyword">return</span> superPower ;  
     }  
     <span class="directive">public</span> <span class="type">void</span> setSuperPower(<span class="predefined-type">String</span> superPower) {  
          <span class="local-variable">this</span>.superPower = superPower;  
     }  
     <span class="directive">public</span> <span class="type">int</span> getAge() {  
          <span class="keyword">return</span> age ;  
     }  
     <span class="directive">public</span> <span class="type">void</span> setAge(<span class="type">int</span> age) {  
          <span class="local-variable">this</span>.age = age;  
     }  
}  
  
<span class="keyword">package</span> <span class="namespace">com.cwind.introspector</span>;  
  
<span class="directive">public</span> <span class="type">class</span> <span class="class">Titan</span> <span class="directive">extends</span> Superhero {  
     <span class="directive">private</span> <span class="type">double</span> height ;  
     <span class="directive">private</span> <span class="type">double</span> weight ;  
         
     <span class="directive">public</span> Titan(<span class="type">double</span> height, <span class="type">double</span> weight) {  
          <span class="local-variable">super</span>();  
          <span class="local-variable">this</span>.height = height;  
          <span class="local-variable">this</span>.weight = weight;  
     }  
         
     <span class="directive">public</span> <span class="type">double</span> getHeight() {  
          <span class="keyword">return</span> height ;  
     }  
     <span class="directive">public</span> <span class="type">void</span> setHeight(<span class="type">double</span> height) {  
          <span class="local-variable">this</span>.height = height;  
     }  
     <span class="directive">public</span> <span class="type">double</span> getWeight() {  
          <span class="keyword">return</span> weight ;  
     }  
     <span class="directive">public</span> <span class="type">void</span> setWeight(<span class="type">double</span> weight) {  
          <span class="local-variable">this</span>.weight = weight;  
     }    
}  
</pre></td>
</tr></table>
 </figure></notextile></div>
<p>可以看到，Ultraman类有一个显式的BeanInfo类，其中的属性描述符仅包括”avanta”和继承自父类的”name”。Titan没有显式的BeanInfo类。下面用一个测试类来打印Introspector获取的BeanInfo信息，分别打印两个Ultraman和Titan实例的属性名称及其对应的值，比较其异同。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
</pre></td>
  <td class="code"><pre> 
<span class="keyword">package</span> <span class="namespace">com.cwind.introspector</span>;  
  
<span class="keyword">import</span> <span class="include">java.beans.IntrospectionException</span>;  
<span class="keyword">import</span> <span class="include">java.beans.Introspector</span>;  
<span class="keyword">import</span> <span class="include">java.beans.PropertyDescriptor</span>;  
<span class="keyword">import</span> <span class="include">java.lang.reflect.InvocationTargetException</span>;  
  
<span class="directive">public</span> <span class="type">class</span> <span class="class">IntrospectorTest</span> {  
     <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args) 
    <span class="directive">throws</span> <span class="exception">IntrospectionException</span>, <span class="exception">IllegalArgumentException</span>,
     <span class="exception">IllegalAccessException</span>, <span class="exception">InvocationTargetException</span>{  
          <span class="predefined-type">PropertyDescriptor</span><span class="type">[]</span> ultramanProps 
    = <span class="predefined-type">Introspector</span>.getBeanInfo(Ultraman.class).getPropertyDescriptors();  
          Ultraman sailor = <span class="keyword">new</span> Ultraman(<span class="string"><span class="delimiter">&quot;</span><span class="content">sailor</span><span class="delimiter">&quot;</span></span> );  
          <span class="keyword">for</span>(<span class="predefined-type">PropertyDescriptor</span> prop : ultramanProps){
               <span class="predefined-type">System</span>. out.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Property name: </span><span class="delimiter">&quot;</span></span> + prop.getName()
        + <span class="string"><span class="delimiter">&quot;</span><span class="content">, value: </span><span class="delimiter">&quot;</span></span>+ prop.getReadMethod().invoke(sailor, <span class="predefined-constant">null</span>));  
          }  
          <span class="predefined-type">System</span>. out.println();  
          <span class="predefined-type">PropertyDescriptor</span><span class="type">[]</span> titanProps 
    = <span class="predefined-type">Introspector</span>.getBeanInfo(Titan.class).getPropertyDescriptors();  
          Titan titan = <span class="keyword">new</span> Titan(<span class="integer">999</span>,<span class="integer">888</span>);  
          <span class="keyword">for</span>(<span class="predefined-type">PropertyDescriptor</span> prop : titanProps){  
               <span class="predefined-type">System</span>. out.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Property name: </span><span class="delimiter">&quot;</span></span> + prop.getName()
        + <span class="string"><span class="delimiter">&quot;</span><span class="content">, value: </span><span class="delimiter">&quot;</span></span>+ prop.getReadMethod().invoke(titan, <span class="predefined-constant">null</span>));  
          }  
     }  
}  
</pre></td>
</tr></table>
 </figure></notextile></div>
<p>输出结果如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre> 
Property name: avanta, value: sailor  
Property name: name, value: defaultName  
  
Property name: age, value: <span class="integer">0</span>  
Property name: <span class="type">class</span>, <span class="class">value</span>: <span class="type">class</span> <span class="class">com</span>.cwind.introspector.Titan  
Property name: height, value: <span class="float">999.0</span>  
Property name: name, value: defaultName  
Property name: superPower, value: defaultSuperPower  
Property name: weight, value: <span class="float">888.0</span>  
</pre></td>
</tr></table>
 </figure></notextile></div>
<p>可以看到，对于前者，只打印出其显式BeanInfo类中返回的属性描述符所对应的属性；对于后者，使用低层次的反射来获取所有属性，并按照属性名称字母序将属性描述符数组返回。
为了更好的性能，Introspector缓存BeanInfo；因此，若在使用多个类加载器的应用程序中使用Introspector须小心谨慎。可以调用Introspector.flushCaches或Introspector.flushFromCaches方法从缓存中清空内省的类。<br />
<strong>Reference：</strong><br />
1. <a href="http://docs.oracle.com/javase/6/docs/api/">Java API 1.6</a><br />
2. <a href="http://my.oschina.net/zookeeper/blog/179269">Java反射总结</a><br />
3. <a href="http://blog.csdn.net/hahalzb/article/details/5972421">Java内省机制</a><br />
4. <a href="http://www.blogjava.net/wiflish/archive/2007/03/05/101964.html">Java语言的反射和内省</a><br />
5. <a href="http://www.codeproject.com/Articles/235269/Using-Introspection-in-Java">Using Introspection in Java</a><br />
6. Java2核心技术 卷II：高级特性，第8章：JavaBean构件；【美】Cay S. Horstmann, Gary Cornell 著；机械工业出版社</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java时区转换与时间格式]]></title>
    <link href="http://cwind001.github.io/blog/2013/07/17/java-timezone-convertion/"/>
    <updated>2013-07-17T21:26:56+08:00</updated>
    <id>http://cwind001.github.io/blog/2013/07/17/java-timezone-convertion</id>
    <content type="html"><![CDATA[<p>本文介绍Java API 中 Date, Calendar, TimeZone和DateFormat的使用，以及不同时区时间相互转化的方法和原理。
<!--more--></p>

<p><strong>问题描述：</strong>
向处于不同时区的服务器发请求时需要考虑时区转换的问题。譬如，服务器位于东八区（北京时间，GMT+8:00），而身处东四区的用户想要查询当天的销售记录。则需把东四区的“今天”这个时间范围转换为服务器所在时区的时间范围。</p>

<p><em>Tips1. GMT时间：</em>即格林威治平时（Greenwich Mean Time）。平太阳时是与视太阳时对应的，由于地球轨道非圆形，运行速度岁地球与太阳距离改变而出现变化，因此视太阳时欠缺均匀性。为了纠正这种不均匀性，天文学家计算地球非圆形轨迹与极轴倾斜对视太阳时的效应。平太阳时就是指经修订之后的视太阳时。在格林威治子午线上的平太阳时称为世界时（UTC），又叫格林威治平时（GMT）。</p>

<p>类Date表示特定的瞬间，精确到毫秒。获得一个表示当前时间的Date对象有两种方式：   </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>   
<span class="predefined-type">Date</span> date = <span class="keyword">new</span> <span class="predefined-type">Date</span>();  
<span class="predefined-type">Date</span> date = <span class="predefined-type">Calendar</span>.getInstance().getTime();  
</pre></div>
</div>
 </figure></notextile></div>

<p><strong>Date</strong>对象本身所存储的毫秒数可以通过date.getTime()方法得到；该函数返回自1970年1月1日 00:00:00 GMT以来此对象表示的毫秒数。</p>

<p><strong>Calendar</strong>的getInstance()方法有参数为TimeZone和Locale的重载，可以使用指定时区和语言环境获得一个日历。无参则使用默认时区和语言环境获得日历。</p>

<p><strong>TimeZone</strong>表示时区偏移量，本质上以毫秒数保存与GMT的差值。获取TimeZone可以通过时区ID，如”America/New_York”，也可以通过GMT+/-hh:mm来设定。例如北京时间可以表示为GMT+8:00。
TimeZone.getRawOffset()方法可以用来得到当前时区的标准时间到GMT的偏移量。上段提到的”America/New_York”和”GMT+8:00”两个时区的偏移量分别为-18000000和28800000。</p>

<p>于是问题就简单了，在时区间转换时间时，首先用原时间减掉原时间所在时区相对于GMT的偏移量，得到原时间相对与GMT的值，再加上目标时区相对GMT的偏移量即可。
这样得到的结果依然是毫秒数，需要按照指定日期格式重新转换成Date对象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
</pre></td>
  <td class="code"><pre>   
<span class="keyword">import</span> <span class="include">java.text</span>.*;    
<span class="keyword">import</span> <span class="include">java.util</span>.*;    
  
<span class="directive">public</span> <span class="type">class</span> <span class="class">DateTransformer</span>  
{  
    <span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> <span class="predefined-type">String</span> DATE_FORMAT = <span class="string"><span class="delimiter">&quot;</span><span class="content">MM/dd/yyyy HH:mm:ss</span><span class="delimiter">&quot;</span></span>;  
         
    <span class="directive">public</span> <span class="directive">static</span> <span class="predefined-type">String</span> dateTransformBetweenTimeZone(<span class="predefined-type">Date</span> sourceDate, 
    <span class="predefined-type">DateFormat</span> formatter,  
        <span class="predefined-type">TimeZone</span> sourceTimeZone, <span class="predefined-type">TimeZone</span> targetTimeZone) {  
        <span class="predefined-type">Long</span> targetTime = sourceDate.getTime()
         - sourceTimeZone.getRawOffset() + targetTimeZone.getRawOffset();  
        <span class="keyword">return</span> DateTransformer.getTime(<span class="keyword">new</span> <span class="predefined-type">Date</span>(targetTime), formatter);  
    }  
         
    <span class="directive">public</span> <span class="directive">static</span> <span class="predefined-type">String</span> getTime(<span class="predefined-type">Date</span> date, <span class="predefined-type">DateFormat</span> formatter){  
       <span class="keyword">return</span> formatter.format(date);  
    }  
         
    <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args){  
        <span class="predefined-type">DateFormat</span> formatter = <span class="keyword">new</span> <span class="predefined-type">SimpleDateFormat</span>(DATE_FORMAT);  
        <span class="predefined-type">Date</span> date = <span class="predefined-type">Calendar</span>.getInstance().getTime();  
        <span class="predefined-type">TimeZone</span> srcTimeZone = <span class="predefined-type">TimeZone</span>.getTimeZone(<span class="string"><span class="delimiter">&quot;</span><span class="content">EST</span><span class="delimiter">&quot;</span></span>);  
        <span class="predefined-type">TimeZone</span> destTimeZone = <span class="predefined-type">TimeZone</span>.getTimeZone(<span class="string"><span class="delimiter">&quot;</span><span class="content">GMT+8</span><span class="delimiter">&quot;</span></span>);  
        <span class="predefined-type">System</span>.out.println(DateTransformer.dateTransformBetweenTimeZone(
    date, formatter, srcTimeZone, destTimeZone));  
    }  
}  
</pre></td>
</tr></table>
 </figure></notextile></div>
<p><em>Tips2. 字面大数字赋值给long类型变量的问题</em>
上面函数中的targetTime是计算得来的，测试用例中我们可能需要通过毫秒数来构建几个日期对象，但是在赋值long time = 1374004799999 时会提示错误“The literal1374004799999 of type int is out of range”。代码中的数字字面值是int类型，因此超出了长度。在大数字后面加个’L’，long time = 1374004799999L即可正确赋值。 </p>

<p>DateFormat是是日期/时间格式化子类的抽象类，它以与语言无关的方式格式化并解析日期或时间。日期/时间格式化子类（如 SimpleDateFormat）允许进行格式化（也就是日期 -&gt; 文本）、解析（文本-&gt; 日期）和标准化。将日期表示为 Date 对象，或者表示为从 GMT（格林尼治标准时间）1970 年 1 月 1 日 00:00:00 这一刻开始的毫秒数。SimpleDateFormat则是一个以与语言环境有关的方式来格式化和解析日期的具体类，可以以“日期和时间模式”字符串指定日期和时间格式。我们函数中所用模式字符串为”MM/dd/yyyy HH:mm:ss”，则输出日期：”07/16/2013 04:00:00”</p>

<p>其他常见的模式字母定义如下：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>   
<span class="error">字</span><span class="error">母</span> <span class="error">日</span><span class="error">期</span><span class="error">或</span><span class="error">时</span><span class="error">间</span><span class="error">元</span><span class="error">素</span> <span class="error">表</span><span class="error">示</span> <span class="error">示</span><span class="error">例</span>
G    Era <span class="error">标</span><span class="error">志</span><span class="error">符</span>    Text    AD
y    <span class="error">年</span>    Year    <span class="integer">1996</span>; <span class="integer">96</span>
M    <span class="error">年</span><span class="error">中</span><span class="error">的</span><span class="error">月</span><span class="error">份</span>    Month    July; Jul; <span class="octal">07</span>
w    <span class="error">年</span><span class="error">中</span><span class="error">的</span><span class="error">周</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">27</span>
W    <span class="error">月</span><span class="error">份</span><span class="error">中</span><span class="error">的</span><span class="error">周</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">2</span>
D    <span class="error">年</span><span class="error">中</span><span class="error">的</span><span class="error">天</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">189</span>
d    <span class="error">月</span><span class="error">份</span><span class="error">中</span><span class="error">的</span><span class="error">天</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">10</span>
F    <span class="error">月</span><span class="error">份</span><span class="error">中</span><span class="error">的</span><span class="error">星</span><span class="error">期</span>    <span class="predefined-type">Number</span>    <span class="integer">2</span>
E    <span class="error">星</span><span class="error">期</span><span class="error">中</span><span class="error">的</span><span class="error">天</span><span class="error">数</span>    Text    Tuesday; Tue
a    Am/pm <span class="error">标</span><span class="error">记</span>    Text    PM
H    <span class="error">一</span><span class="error">天</span><span class="error">中</span><span class="error">的</span><span class="error">小</span><span class="error">时</span><span class="error">数</span><span class="error">（</span><span class="integer">0</span>-<span class="integer">23</span><span class="error">）</span>    <span class="predefined-type">Number</span>    <span class="integer">0</span>
k    <span class="error">一</span><span class="error">天</span><span class="error">中</span><span class="error">的</span><span class="error">小</span><span class="error">时</span><span class="error">数</span><span class="error">（</span><span class="integer">1</span>-<span class="integer">24</span><span class="error">）</span>    <span class="predefined-type">Number</span>    <span class="integer">24</span>
K    am/pm <span class="error">中</span><span class="error">的</span><span class="error">小</span><span class="error">时</span><span class="error">数</span><span class="error">（</span><span class="integer">0</span>-<span class="integer">11</span><span class="error">）</span>    <span class="predefined-type">Number</span>    <span class="integer">0</span>
h    am/pm <span class="error">中</span><span class="error">的</span><span class="error">小</span><span class="error">时</span><span class="error">数</span><span class="error">（</span><span class="integer">1</span>-<span class="integer">12</span><span class="error">）</span>    <span class="predefined-type">Number</span>    <span class="integer">12</span>
m    <span class="error">小</span><span class="error">时</span><span class="error">中</span><span class="error">的</span><span class="error">分</span><span class="error">钟</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">30</span>
s    <span class="error">分</span><span class="error">钟</span><span class="error">中</span><span class="error">的</span><span class="error">秒</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">55</span>
S    <span class="error">毫</span><span class="error">秒</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">978</span>
z    <span class="error">时</span><span class="error">区</span>    General time zone    Pacific Standard <span class="predefined-type">Time</span>; PST; GMT-<span class="integer">08</span>:<span class="octal">00</span>
Z    <span class="error">时</span><span class="error">区</span>    RFC <span class="integer">822</span> time zone    -<span class="integer">0800</span>
</pre></div>
</div>
 </figure></notextile></div>

<p><strong>References:</strong><br />
1. <a href="http://www.javaweb.cc/help/JavaAPI1.6/">Java API 1.6</a><br />
2. <a href="http://www.blogjava.net/liudawei/articles/387891.html">Java时区的转换</a><br />
3. <a href="http://www.cnblogs.com/mailingfeng/archive/2012/06/20/2556326.html">java时区-DateFormat和TimeZone关系</a><br />
4. <a href="http://blog.sina.com.cn/s/blog_4c44d3110100w0gn.html">java获取当前时区的时间</a>  </p>
]]></content>
  </entry>
  
</feed>
