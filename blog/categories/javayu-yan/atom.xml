<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java语言 | Cwind's Note Book]]></title>
  <link href="http://cwind001.github.io/blog/categories/javayu-yan/atom.xml" rel="self"/>
  <link href="http://cwind001.github.io/"/>
  <updated>2015-02-03T18:58:12+08:00</updated>
  <id>http://cwind001.github.io/</id>
  <author>
    <name><![CDATA[Bill Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java文件变更监控的两种实现]]></title>
    <link href="http://cwind001.github.io/blog/2015/01/30/java-file-monitor/"/>
    <updated>2015-01-30T14:25:04+08:00</updated>
    <id>http://cwind001.github.io/blog/2015/01/30/java-file-monitor</id>
    <content type="html"><![CDATA[<h3>Java文件变更监控的两种实现</h3>

<p><strong>对文件及文件夹进行修改变更监测有很广泛的应用，例如：</strong></p>

<ul>
<li>通知配置文件的改变</li>
<li>跟踪某些关键的系统文件的变化</li>
<li>监控某个分区磁盘的整体使用情况</li>
<li>系统崩溃时进行自动清理</li>
<li>自动触发备份进程</li>
<li>向服务器上传文件结束时发出通知  <br/>
下面给出Java的两种实现，源码可以在GitHub上找到 <a href="https://github.com/cwind001/CwindJavaLab/tree/master/FileMonitor">FileMonitor</a></li>
</ul>


<p><strong>JDK1.6及之前版本: 基于Timer实现</strong><br/>
<strong>两个关键类：</strong></p>

<ul>
<li>java.util.Timer</li>
<li>java.util.TimerTask</li>
</ul>


<p>Timertask是由Timer执行的实际任务，实现了Rannable接口。通过重写run()方法来指定具体任务细节。<br/>
Picture111&mdash;&mdash;&mdash;</p>

<p><strong>Timer工作原理：</strong><br/>
Timer是用于调度一次性执行或重复执行的工具类。通过TaskQueue保存需要调度的TimerTask，当某个Task被废弃时（一次性任务结束或TimerTask.cancel()），将其从该队列中移除。<br/>
Timer类维护一个后台线程（守护线程或用户线程，取决于如何创建Timer对象），该线程通常称为Timer任务执行线程。在TimerThread的mainLoop()中依据各个TimerTask的状态和调度时间设定，决定执行或移除TimerTask。<br/>
<strong>TimerTask应设计为执行不占用太长时间</strong>，否则同一个Timer队列中其他的TimerTask的执行将会延迟。<br/>
更多可参见：<a href="http://javarevisited.blogspot.com/2013/02/what-is-timer-and-timertask-in-java-example-tutorial.html">What is Timer and TimerTask in Java</a></p>

<p><strong>基于Timer的FileMonitor的实现：</strong><br/>
Picture222&mdash;&mdash;&mdash;</p>

<p>通过实现FileChangeObserver接口，该FileMonitor允许对任意文件添加任意多个Observer。<br/>
<a href="https://github.com/cwind001/CwindJavaLab/blob/master/FileMonitor/src/main/java/com/cwind/file/FileChangeMonitor.java">FileChangeMonitor及FileChangeTask源码</a><br/>
FileChangeMonitor本身是一个单例。fileObservers由Collections.synchronizedMap()初始化，保证在该map上的每一个原子操作都将被同步。在其addObserver方法中为每一个fileChangeObserver创建一个FileChangeTask，将其加入fileObservers中。FileChangeTask扩展了TimerTask，由Timer调度执行。</p>

<pre><code class="java FileChangeMonitor.addObserver() https://github.com/cwind001/CwindJavaLab/blob/master/FileMonitor/src/main/java/com/cwind/file/FileChangeMonitor.java">    public void addObserver(FileChangeObserver observer, String filename, long delay) throws FileNotFoundException {  
        TimerTask task = new FileChangeTask(observer , filename );  
        List&lt;TimerTask&gt; tasks = fileObservers.get(filename );  
        if(tasks ==null){  
            tasks = new ArrayList&lt;TimerTask&gt;();  
        }  
        tasks.add( task);  
        fileObservers.put(filename , tasks );  
        timer.schedule( task, delay, delay);  
    }  
</code></pre>

<p>在FileChangeTask的run()函数中，通过比对时间戳来判断文件是否修改，若发生改动，则通知其Observer进行相应处理。<br/>
<code>java FileChangeTask.run() https://github.com/cwind001/CwindJavaLab/blob/master/FileMonitor/src/main/java/com/cwind/file/FileChangeMonitor.java
    public void run() {
        try {
            long newLastModified = file.lastModified();
            if (newLastModified &gt; lastModified) {
                lastModified = newLastModified;
                observer.fileChanged(file.getPath());
            }
        }
        catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }
</code></p>

<p>测试用例<a href="https://github.com/cwind001/CwindJavaLab/blob/163448ce07ecca1738b306bed9bf1b39464d345c/FileMonitor/src/test/java/com/cwind/file/FileMonitorTest.java">FileMonitorTest</a>中为sample1.txt添加了consoleObserver和emailObserver，为sample2.txt添加了consoleObserver。然后对这两个文件分别进行修改。<br/>
<figure class='code'><figcaption><span>FileMonitorTest <a href="https://github.com/cwind001/CwindJavaLab/blob/163448ce07ecca1738b306bed9bf1b39464d345c/FileMonitor/src/test/java/com/cwind/file/FileMonitorTest.java">https://github.com/cwind001/CwindJavaLab/blob/163448ce07ecca1738b306bed9bf1b39464d345c/FileMonitor/src/test/java/com/cwind/file/FileMonitorTest.java</a></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">cwind</span><span class="o">.</span><span class="na">file</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.junit.After</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Before</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileMonitorTest</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">File</span> <span class="n">sampleFile1</span><span class="o">,</span> <span class="n">sampleFile2</span><span class="o">;</span>
</span><span class='line'><span class="n">FileChangeMonitor</span> <span class="n">monitor</span><span class="o">;</span>
</span><span class='line'><span class="n">ConsoleFileChangeObserver</span> <span class="n">consoleObserver</span><span class="o">;</span>
</span><span class='line'><span class="n">EmailFileChangeObserver</span> <span class="n">emailObserver</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sampleFile1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;sample1.txt&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">sampleFile2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;sample2.txt&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">monitor</span> <span class="o">=</span> <span class="n">FileChangeMonitor</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>    <span class="n">consoleObserver</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConsoleFileChangeObserver</span><span class="o">();</span>
</span><span class='line'>    <span class="n">emailObserver</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">EmailFileChangeObserver</span><span class="o">(</span><span class="s">&quot;billchen01@163.com&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@After</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">tearDown</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testMonitorSampleFile</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class='line'>    <span class="n">monitor</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="n">consoleObserver</span><span class="o">,</span> <span class="n">sampleFile1</span><span class="o">.</span><span class="na">getPath</span><span class="o">(),</span> <span class="n">FileChangeMonitor</span><span class="o">.</span><span class="na">DELAY_TIME</span><span class="o">);</span>
</span><span class='line'>    <span class="n">monitor</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="n">emailObserver</span><span class="o">,</span> <span class="n">sampleFile1</span><span class="o">.</span><span class="na">getPath</span><span class="o">(),</span> <span class="n">FileChangeMonitor</span><span class="o">.</span><span class="na">DELAY_TIME</span><span class="o">);</span>
</span><span class='line'>    <span class="n">monitor</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="n">consoleObserver</span><span class="o">,</span> <span class="n">sampleFile2</span><span class="o">.</span><span class="na">getPath</span><span class="o">(),</span> <span class="n">FileChangeMonitor</span><span class="o">.</span><span class="na">DELAY_TIME</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">FileOutputStream</span> <span class="n">fos1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FileOutputStream</span><span class="o">(</span><span class="n">sampleFile1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">FileOutputStream</span> <span class="n">fos2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FileOutputStream</span><span class="o">(</span><span class="n">sampleFile2</span><span class="o">);</span>
</span><span class='line'>    <span class="n">fos1</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">fos2</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">fos1</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>    <span class="n">fos2</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>    <span class="n">fos1</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="n">fos2</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>输出结果如下：<br/>
<code>Console: File sample1.txt is changed, will print warning message to console.</code><br/>
<code>File sample1.txt is changed, will send email to billchen01@163.com.</code><br/>
<code>Console: File sample2.txt is changed, will print warning message to console.</code></p>

<p><strong>JDK 1.7 及之后版本：基于WatchService实现</strong><br/>
Java 7 的新IO - NIO.2提供了一组新的类和方法，主要存在于java.nio包内。它完全取代了java.io.File与文件系统的交互，并提供了新的异步处理类，无需手动配置线程池和其他底层并发控制，便可在后台线程中执行文件和网络IO操作。<br/>
其中Path是新文件IO的基石。为与之前版本兼容，java.io.File类中新增了toPath()方法，Path类中提供了toFile()方法。
Watch Service API可用于将指定目录注册到监视服务上。注册时须指定事件类型，如文件创建、修改、删除等。相关类图如下：<br/>
PIC3</p>

<p>WatchService是监视服务接口，在不同系统上有不同的实现类。实现了Watchable接口的对象方可注册监视服务，java.nio.file.Path实现了此接口。WatchKey表示Watchable对象和WatchService的关联关系，在注册时被创建。注册完成后，WatchKey将被置为&#8217;ready&#8217;状态，直到下列三种情况之一发生：</p>

<ol>
<li>WatchKey.cancel()被调用</li>
<li>被监控的目录不存在或不可访问</li>
<li>WatchService对象被关闭</li>
</ol>


<p>当文件改动发生时，WatchKey的状态将会被置为&#8221;signaled&#8221;然后被放入待处理队列中。WatchService提供了<strong>三种从队列中获取WatchKeys的方式：</strong></p>

<ol>
<li>poll - 返回队列中的一个key。如果没有可用的key，将立即返回null。</li>
<li>poll(long, TimeUnit) - 如果队列中存在可用的key则将之返回，否则在参数预置的时间内等待可用的key。TimeUnit用来指定前一个参数表示的时间是纳秒、毫秒或是其他的时间单位。
例子：final WatchKey watchKey = watchService.poll(1, TimeUnit.MINUTES);将会等待1分钟</li>
<li>take - 方法将会等待直到可用的key被返回。</li>
</ol>


<p><strong>获取WatchKey后进行处理：</strong></p>

<ol>
<li>通过WatchKey.pollEvents()函数得到WatchEvents列表。</li>
<li>对于每一个WatchEvent，可以通过kind()函数获得其改动类型。</li>
<li>通过WatchEvent.context()函数得到发生该事件的文件名</li>
<li>当该key的所有事件处理完成后，需要调用WatchKey.reset()方法把该key重置为ready状态。若不重置，该key将无法接收后续的改动。若reset返回false，表示该WatchKey不再合法，主循环可以退出。</li>
</ol>


<pre><code class="java WatchServiceTest https://github.com/cwind001/CwindJavaLab/blob/163448ce07ecca1738b306bed9bf1b39464d345c/FileMonitor/src/test/java/com/cwind/file/WatchServerTest.java">package com.cwind.file;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;

public class WatchServerTest {
    public static void main(String[] args) throws InterruptedException, IOException {
        WatchService watchService = FileSystems.getDefault().newWatchService();
        final Path path = Paths.get(".");
        final WatchKey watchKey = path.register(watchService, StandardWatchEventKinds.ENTRY_MODIFY, 
                StandardWatchEventKinds.ENTRY_CREATE, StandardWatchEventKinds.ENTRY_DELETE);
        boolean fileNotChanged = true;
        int count = 0;
        while (fileNotChanged) {
            final WatchKey wk = watchService.take();
            System.out.println("Loop count: " + count);
            for (WatchEvent&lt;?&gt; event : wk.pollEvents()) {
                final Path changed = (Path) event.context();
                System.out.println(changed + ", " + event.kind());
                if (changed.endsWith("sample1.txt")) {
                    System.out.println("Sample file has changed");
                }
            }
            // reset the key
            boolean valid = wk.reset();
            if (!valid) {
                System.out.println("Key has been unregisterede");
            }
            count++;
        }
    }
}
</code></pre>

<p>总结，使用WatchService步骤如下：</p>

<ol>
<li>创建WatchService</li>
<li>得到待检测目录的Path</li>
<li>将目录登记到变化监测名单中</li>
<li>执行WatchService的take()方法，直到WatchKey到来。</li>
<li>得到WatchKey后遍历WatchEvent进行检测</li>
<li>重置key准备下一个事件，继续等待</li>
</ol>


<p>大多数文件系统实现包含了文件更改通知的本地支持，Watch Service API正是利用了文件系统的这种机制。若文件系统并不支持变更通知机制，Watch Service仍然会轮询文件系统，等待事件产生。</p>

<p><strong>References:</strong></p>

<ol>
<li><a href="http://docs.oracle.com/javase/tutorial/essential/io/notification.html">Watching a Directory for Changes</a></li>
<li><a href="http://java.dzone.com/articles/using-java-7s-watchservice">Using Java 7&rsquo;s WatchService to Monitor Directories</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
