<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 辰风君的笔记本]]></title>
  <link href="http://cwind001.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://cwind001.github.io/"/>
  <updated>2015-07-14T23:04:57+08:00</updated>
  <id>http://cwind001.github.io/</id>
  <author>
    <name><![CDATA[辰风君]]></name>
    <email><![CDATA[billchen01@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java读写Excel：Apache POI, JXL与OpenCSV]]></title>
    <link href="http://cwind001.github.io/blog/2015/02/27/apachepoi/"/>
    <updated>2015-02-27T07:53:53+08:00</updated>
    <id>http://cwind001.github.io/blog/2015/02/27/apachepoi</id>
    <content type="html"><![CDATA[<p>前些日子把JXL替换为ApachePOI，原因很简单，JXL在2009年10月已经停止更新，并且不支持Excel 2007 OOXML （.xlsx）格式的文件。事实上把JXL与POI进行比较并不公平，因为JXL只能够操作OLE2格式的Excel（即.xls），而POI则是能够读写xls(x)、doc(x)、ppt(x)的一整套解决方案。<br />
<!--more--></p>

<p>不同版本Excel的行列数限制：  </p>

<p><figure class='code'> <div class="CodeRay">
  <div class="code"><pre> &lt;br /&gt;
+<span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">–</span>+<span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">–</span>+<span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">–</span>+<span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span>+
|                 | Max. Rows | Max. Columns | Max. Cols by letter |
+<span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">–</span>+<span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">–</span>+<span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">–</span>+<span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span>+
| Excel <span class="integer">365</span>*      | <span class="integer">1</span>,<span class="integer">048</span>,<span class="integer">576</span> | <span class="integer">16</span>,<span class="integer">384</span>       | XFD                 |
| Excel <span class="integer">2013</span>      | <span class="integer">1</span>,<span class="integer">048</span>,<span class="integer">576</span> | <span class="integer">16</span>,<span class="integer">384</span>       | XFD                 |
| Excel <span class="integer">2010</span>      | <span class="integer">1</span>,<span class="integer">048</span>,<span class="integer">576</span> | <span class="integer">16</span>,<span class="integer">384</span>       | XFD                 |
| Excel <span class="integer">2007</span>      | <span class="integer">1</span>,<span class="integer">048</span>,<span class="integer">576</span> | <span class="integer">16</span>,<span class="integer">384</span>       | XFD                 |
| Excel <span class="integer">2003</span>      | <span class="integer">65</span>,<span class="integer">536</span>    | <span class="integer">256</span>          | IV                  |
| Excel <span class="integer">2002</span> (XP) | <span class="integer">65</span>,<span class="integer">536</span>    | <span class="integer">256</span>          | IV                  |
| Excel <span class="integer">2000</span>      | <span class="integer">65</span>,<span class="integer">536</span>    | <span class="integer">256</span>          | IV                  |
| Excel <span class="integer">97</span>        | <span class="integer">65</span>,<span class="integer">536</span>    | <span class="integer">256</span>          | IV                  |
| Excel <span class="integer">95</span>        | <span class="integer">16</span>,<span class="integer">384</span>    | <span class="integer">256</span>          | IV                  |
| Excel <span class="integer">5</span>         | <span class="integer">16</span>,<span class="integer">384</span>    | <span class="integer">256</span>          | IV                  |
+<span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">–</span>+<span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">–</span>+<span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">–</span>+<span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span><span class="error">—</span>+&lt;br /&gt;
</pre></div>
</div>
 </figure> </p>

<p><em>*Excel 365 unverified.</em></p>

<p><strong>JXL - JExcelApi</strong><br />
<a href="http://mvnrepository.com/artifact/net.sourceforge.jexcelapi/jxl/2.6.12">Maven Repo</a><br />
<a href="http://www.andykhan.com/jexcelapi/index.html">官方网站</a><br />
最近更新：Oct 24，2009</p>

<p><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>   &lt;/p&gt;
&lt;dependency&gt;
 &lt;groupid&gt;net.sourceforge.jexcelapi&lt;/groupid&gt;
 &lt;artifactid&gt;jxl&lt;/artifactid&gt;
 &lt;version&gt;<span class="float">2.6</span><span class="float">.12</span>&lt;/version&gt;
&lt;/dependency&gt;
&lt;p&gt;</pre></div>
</div>
 </figure>   </p>

<p>JXL是一个日本人写的简单类库。<a href="http://www.jexcelapi.org/">作者主页</a>。<a href="http://blog.csdn.net/jarvis_java/article/details/4924099">POI和jxl.jar性能比较</a>一贴中提到其性能较poi更高，内存消耗更少。当且仅当目标文档是行数接近但不超过65536的xls格式时成立。  </p>

<p>类图：<br />
<img src="http://dl.iteye.com/upload/picture/pic/132574/73b48deb-3ba5-396c-b01c-5546b1aecba0.jpg">  </p>

<p><figure class='code'><figcaption class='code-header'><span>JXL Demo</span> &mdash; <a href='https://github.com/cwind001/CwindJavaLab/blob/master/POITest/src/main/java/com/cwind/jxl/JXLDataSheetWriter.java'>link</a></figcaption> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
</pre></td>
  <td class="code"><pre> &lt;br /&gt;
 <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args) {
  <span class="keyword">try</span> {
   <span class="comment">// create writable wookbook</span>
   WritableWorkbook workbook 
    = Workbook.createWorkbook(<span class="keyword">new</span> <span class="predefined-type">File</span>(<span class="error">“</span>jxlOutput.xls<span class="error">”</span>));&lt;/p&gt;

&lt;p&gt;<span class="comment">// create writable sheet</span>
   WritableSheet sheet = workbook.createSheet(<span class="error">“</span>First Sheet<span class="error">”</span>, <span class="integer">0</span>);
   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="integer">0</span>; i &amp;lt; data.length; i++) {
    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="integer">0</span>; j &amp;lt; data[i].length; j++){&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; <span class="comment">// create a cell at position (i, j) and add to the sheet</span>
 <span class="predefined-type">Label</span> label = <span class="keyword">new</span> <span class="predefined-type">Label</span>(i, j, data[i][j]);
 sheet.addCell(label);
}    }    workbook.write();    workbook.close();   } <span class="keyword">catch</span> (<span class="exception">IOException</span> | WriteException e) {    e.printStackTrace();   }  } </pre></td>
</tr></table>
 </figure> 
</code></pre>

<p><strong>Apache POI</strong><br />
<a href="http://mvnrepository.com/artifact/org.apache.poi/poi">Maven Repo</a><br />
<a href="http://poi.apache.org/">官方网站</a><br />
最近更新：Dec 17，2014  </p>

<p>类图：<br />
<img src="http://dl.iteye.com/upload/picture/pic/132576/6230920a-edc2-3e7c-ac23-d4590f095048.jpg"> </p>

<p><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>   &lt;/p&gt;
&lt;dependency&gt; 
  &lt;groupid&gt;org.apache.poi&lt;/groupid&gt;
  &lt;artifactid&gt;poi&lt;/artifactid&gt;
  &lt;version&gt;<span class="float">3.10</span><span class="float">.1</span>&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
     &lt;groupid&gt;org.apache.poi&lt;/groupid&gt;
     &lt;artifactid&gt;poi-ooxml&lt;/artifactid&gt;
     &lt;version&gt;<span class="float">3.9</span>&lt;/version&gt;
 &lt;/dependency&gt;
&lt;p&gt;</pre></div>
</div>
 </figure>   </p>

<p><strong>Apache POI API的一些重点：</strong></p>

<ul>
  <li>Apache POI包含 Excel 97(-2007)文件格式(.xls)的Java实现 – HSSF。（彩蛋：H指Horrible）  </li>
  <li>Apache POI包含 Excel 2007 OOXML文件格式(.xlsx)的Java实现 – XSSF。  </li>
  <li>Apache POI的HSSF和XSSF API提供了读写和修改Excel电子表格的功能。  </li>
  <li>Apache POI也提供了SXSSF API（流式XSSF），它是XSSF的扩展，用于写入非常大的excel文件。SXSSF API需求较小的内存，适用于在堆内存受限时处理较大excel文件的情况。  </li>
  <li>可以选择两种模型：Event Model和User Model。Event Model需求较小的内存，流式读取并处理每个单元；User Model更具备面向对象的特征，方便操作。  </li>
  <li>Apache POI提供了对excel附加功能的完美支持，如公式、单元格样式、颜色、字体、数据验证、图像和超链接等。  </li>
</ul>

<p>SpreadSheet API 功能摘要：<br />
<img src="http://dl.iteye.com/upload/picture/pic/132578/9b044f00-622e-3a07-9471-3ee912e42819.jpg"> <br />
以下是两个基于XSSF读写xlsx文件的例子：<br />
<a href="https://github.com/cwind001/CwindJavaLab/blob/master/POITest/src/main/java/com/cwind/poi/SimpleDatasheetReader.java">读取xlsx文件</a><br />
<a href="https://github.com/cwind001/CwindJavaLab/blob/master/POITest/src/main/java/com/cwind/poi/SimpleDatasheetWriter.java">写入xlsx文件</a>  </p>

<p><strong>OpenCSV：</strong> <br />
CSV文件以纯文本形式存储表格数据（数字和文本）。OpenCSV是一个用于读写CSV文件的简单Java类库。<br />
<a href="http://mvnrepository.com/artifact/net.sf.opencsv/opencsv/2.3">Maven Repo</a><br />
<a href="http://opencsv.sf.net">官方网站</a><br />
最近更新：Jul 28，2011</p>

<p><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>  &lt;/p&gt;
&lt;dependency&gt;
 &lt;groupid&gt;net.sf.opencsv&lt;/groupid&gt;
 &lt;artifactid&gt;opencsv&lt;/artifactid&gt;
 &lt;version&gt;<span class="float">2.3</span>&lt;/version&gt;
&lt;/dependency&gt;
&lt;p&gt;</pre></div>
</div>
 </figure></p>

<p>OpenCSV将CSV文件中的每一行读取为一个String数组。相应地，写文件时通过<code>csvWriter.writeNext(array)</code>把String数组内容作为一行写入CSV文件</p>

<p>读写CSV文件的例子：<br />
<a href="https://github.com/cwind001/CwindJavaLab/blob/master/POITest/src/main/java/com/cwind/opencsv/ReadCSVDemo.java">读取csv文件内容</a><br />
<a href="https://github.com/cwind001/CwindJavaLab/blob/master/POITest/src/main/java/com/cwind/opencsv/OpenCSVDemo.java">将xlsx文件内容写入csv</a>  </p>

<p><strong>References:</strong><br />
1. <a href="http://poi.apache.org/spreadsheet/">POI-HSSF and POI-XSSF - Java API To Access Microsoft Excel Format Files</a><br />
2. <a href="http://www.journaldev.com/2562/java-readwrite-excel-file-using-apache-poi-api">Java Read/Write Excel File using Apache POI API</a>  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java文件变更监控的两种实现]]></title>
    <link href="http://cwind001.github.io/blog/2015/01/30/java-file-monitor/"/>
    <updated>2015-01-30T14:25:04+08:00</updated>
    <id>http://cwind001.github.io/blog/2015/01/30/java-file-monitor</id>
    <content type="html"><![CDATA[<p><strong>对文件及文件夹进行修改变更监测有很广泛的应用，例如：</strong>  </p>

<ul>
  <li>通知配置文件的改变  </li>
  <li>跟踪某些关键的系统文件的变化  </li>
  <li>监控某个分区磁盘的整体使用情况  </li>
  <li>系统崩溃时进行自动清理<br />
<!--more--></li>
  <li>自动触发备份进程  </li>
  <li>向服务器上传文件结束时发出通知    </li>
</ul>

<p>下面给出Java的两种实现，源码可以在GitHub上找到 <a href="https://github.com/cwind001/CwindJavaLab/tree/master/FileMonitor">FileMonitor</a></p>

<p><strong>JDK1.6及之前版本: 基于Timer实现</strong><br />
<strong>两个关键类：</strong>  </p>

<ul>
  <li>java.util.Timer  </li>
  <li>java.util.TimerTask</li>
</ul>

<p>Timertask是由Timer执行的实际任务，实现了Rannable接口。通过重写run()方法来指定具体任务细节。<br />
<img src="http://dl2.iteye.com/upload/attachment/0105/5397/ddf9a7c5-f08a-3fd3-b1f8-6859e1054bd8.jpg"></p>

<p><strong>Timer工作原理：</strong><br />
Timer是用于调度一次性执行或重复执行的工具类。通过TaskQueue保存需要调度的TimerTask，当某个Task被废弃时（一次性任务结束或TimerTask.cancel()），将其从该队列中移除。<br />
Timer类维护一个后台线程（守护线程或用户线程，取决于如何创建Timer对象），该线程通常称为Timer任务执行线程。在TimerThread的mainLoop()中依据各个TimerTask的状态和调度时间设定，决定执行或移除TimerTask。<br />
<strong>TimerTask应设计为执行不占用太长时间</strong>，否则同一个Timer队列中其他的TimerTask的执行将会延迟。<br />
更多可参见：<a href="http://javarevisited.blogspot.com/2013/02/what-is-timer-and-timertask-in-java-example-tutorial.html">What is Timer and TimerTask in Java</a></p>

<p><strong>基于Timer的FileMonitor的实现：</strong><br />
<img src="http://dl2.iteye.com/upload/attachment/0105/5399/4b7c54fa-cac9-3d7b-85c7-6e655ff8bbcb.jpg"></p>

<p>通过实现FileChangeObserver接口，该FileMonitor允许对任意文件添加任意多个Observer。<br />
<a href="https://github.com/cwind001/CwindJavaLab/blob/master/FileMonitor/src/main/java/com/cwind/file/FileChangeMonitor.java">FileChangeMonitor及FileChangeTask源码</a><br />
FileChangeMonitor本身是一个单例。fileObservers由Collections.synchronizedMap()初始化，保证在该map上的每一个原子操作都将被同步。在其addObserver方法中为每一个fileChangeObserver创建一个FileChangeTask，将其加入fileObservers中。FileChangeTask扩展了TimerTask，由Timer调度执行。</p>

<p><figure class='code'><figcaption class='code-header'><span>FileChangeMonitor.addObserver()</span> &mdash; <a href='https://github.com/cwind001/CwindJavaLab/blob/master/FileMonitor/src/main/java/com/cwind/file/FileChangeMonitor.java'>link</a></figcaption> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>
    <span class="directive">public</span> <span class="type">void</span> addObserver(FileChangeObserver observer, 
      <span class="predefined-type">String</span> filename, <span class="type">long</span> delay) <span class="directive">throws</span> <span class="exception">FileNotFoundException</span> {&lt;br /&gt;
        <span class="predefined-type">TimerTask</span> task = <span class="keyword">new</span> FileChangeTask(observer , filename );&lt;br /&gt;
        <span class="predefined-type">List</span>&lt;timertask&gt; tasks = fileObservers.get(filename );  
        <span class="keyword">if</span>(tasks ==<span class="predefined-constant">null</span>){  
            tasks = <span class="keyword">new</span> <span class="predefined-type">ArrayList</span>&lt;timertask&gt;();  
           }  
        tasks.add( task);  
        fileObservers.put(filename , tasks );  
        timer.schedule( task, delay, delay);  
    }  
</pre></td>
</tr></table>
 </figure>  
在FileChangeTask的run()函数中，通过比对时间戳来判断文件是否修改，若发生改动，则通知其Observer进行相应处理。 </timertask></timertask></p>

<p><figure class='code'><figcaption class='code-header'><span>FileChangeTask.run()</span> &mdash; <a href='https://github.com/cwind001/CwindJavaLab/blob/master/FileMonitor/src/main/java/com/cwind/file/FileChangeMonitor.java'>link</a></figcaption> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre>&lt;br /&gt;
<span class="directive">public</span> <span class="type">void</span> run() {
        <span class="keyword">try</span>    {
            <span class="type">long</span> newLastModified = file.lastModified();
            <span class="keyword">if</span> (newLastModified &amp;gt; lastModified) {
                lastModified = newLastModified;
                observer.fileChanged(file.getPath());
            }
        }
        <span class="keyword">catch</span> (<span class="exception">Exception</span> e)    {
            <span class="predefined-type">System</span>.err.println(e.getMessage());
        }
    } 
</pre></td>
</tr></table>
 </figure> </p>

<p>测试用例<a href="https://github.com/cwind001/CwindJavaLab/blob/163448ce07ecca1738b306bed9bf1b39464d345c/FileMonitor/src/test/java/com/cwind/file/FileMonitorTest.java">FileMonitorTest</a>中为sample1.txt添加了consoleObserver和emailObserver，为sample2.txt添加了consoleObserver。然后对这两个文件分别进行修改。</p>

<p><figure class='code'><figcaption class='code-header'><span>FileMonitorTest</span> &mdash; <a href='https://github.com/cwind001/CwindJavaLab/blob/163448ce07ecca1738b306bed9bf1b39464d345c/FileMonitor/src/test/java/com/cwind/file/FileMonitorTest.java'>link</a></figcaption> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">package</span> <span class="namespace">com.cwind.file</span>;&lt;/p&gt;

&lt;p&gt;<span class="keyword">import</span> <span class="include">java.io.File</span>;
<span class="keyword">import</span> <span class="include">java.io.FileOutputStream</span>;
<span class="keyword">import</span> <span class="include">java.io.IOException</span>;&lt;/p&gt;

&lt;p&gt;<span class="keyword">import</span> <span class="include">org.junit.After</span>;
<span class="keyword">import</span> <span class="include">org.junit.Before</span>;
<span class="keyword">import</span> <span class="include">org.junit.Test</span>;&lt;/p&gt;

&lt;p&gt;<span class="directive">public</span> <span class="type">class</span> <span class="class">FileMonitorTest</span> {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="predefined-type">File</span> sampleFile1, sampleFile2;
FileChangeMonitor monitor;
ConsoleFileChangeObserver consoleObserver;
EmailFileChangeObserver emailObserver;

<span class="annotation">@Before</span>
<span class="directive">public</span> <span class="type">void</span> setUp() <span class="directive">throws</span> <span class="exception">Exception</span> {
    sampleFile1 = <span class="keyword">new</span> <span class="predefined-type">File</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">sample1.txt</span><span class="delimiter">&quot;</span></span>); 
    sampleFile2 = <span class="keyword">new</span> <span class="predefined-type">File</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">sample2.txt</span><span class="delimiter">&quot;</span></span>);
    monitor = FileChangeMonitor.getInstance();
    consoleObserver = <span class="keyword">new</span> ConsoleFileChangeObserver();
    emailObserver = <span class="keyword">new</span> EmailFileChangeObserver(<span class="string"><span class="delimiter">&quot;</span><span class="content">billchen01@163.com</span><span class="delimiter">&quot;</span></span>);
}

<span class="annotation">@After</span>
<span class="directive">public</span> <span class="type">void</span> tearDown() <span class="directive">throws</span> <span class="exception">Exception</span>    {
    
}

<span class="annotation">@Test</span>
<span class="directive">public</span> <span class="type">void</span> testMonitorSampleFile() <span class="directive">throws</span> <span class="exception">InterruptedException</span>, 
    <span class="exception">IOException</span>{
    monitor.addObserver(consoleObserver, sampleFile1.getPath(), 
        FileChangeMonitor.DELAY_TIME);
    monitor.addObserver(emailObserver, sampleFile1.getPath(), 
        FileChangeMonitor.DELAY_TIME);
    monitor.addObserver(consoleObserver, sampleFile2.getPath(), 
        FileChangeMonitor.DELAY_TIME);
    
    <span class="predefined-type">FileOutputStream</span> fos1 = <span class="keyword">new</span> <span class="predefined-type">FileOutputStream</span>(sampleFile1);
    <span class="predefined-type">FileOutputStream</span> fos2 = <span class="keyword">new</span> <span class="predefined-type">FileOutputStream</span>(sampleFile2);
    fos1.write(<span class="integer">0</span>);
    fos2.write(<span class="integer">0</span>);
    fos1.flush();
    fos2.flush();
    fos1.close();
    fos2.close();
    <span class="predefined-type">Thread</span>.sleep(<span class="integer">3000</span>);
} } </pre></td>
</tr></table>
 </figure> 
</code></pre>

<p>输出结果如下：<br />
<code>Console: File sample1.txt is changed, will print warning message to console.</code><br />
<code>File sample1.txt is changed, will send email to billchen01@163.com.</code><br />
<code>Console: File sample2.txt is changed, will print warning message to console.</code>  </p>

<p><strong>JDK 1.7 及之后版本：基于WatchService实现</strong><br />
Java 7 的新IO - NIO.2提供了一组新的类和方法，主要存在于java.nio包内。它完全取代了java.io.File与文件系统的交互，并提供了新的异步处理类，无需手动配置线程池和其他底层并发控制，便可在后台线程中执行文件和网络IO操作。<br />
其中Path是新文件IO的基石。为与之前版本兼容，java.io.File类中新增了toPath()方法，Path类中提供了toFile()方法。
Watch Service API可用于将指定目录注册到监视服务上。注册时须指定事件类型，如文件创建、修改、删除等。相关类图如下：<br />
<img src="http://dl2.iteye.com/upload/attachment/0105/5403/f20e959b-2ded-3a35-b984-61f5010f7efb.jpg">  </p>

<p>WatchService是监视服务接口，在不同系统上有不同的实现类。实现了Watchable接口的对象方可注册监视服务，java.nio.file.Path实现了此接口。WatchKey表示Watchable对象和WatchService的关联关系，在注册时被创建。注册完成后，WatchKey将被置为’ready’状态，直到下列三种情况之一发生：  </p>

<ol>
  <li>WatchKey.cancel()被调用</li>
  <li>被监控的目录不存在或不可访问</li>
  <li>WatchService对象被关闭  </li>
</ol>

<p>当文件改动发生时，WatchKey的状态将会被置为”signaled”然后被放入待处理队列中。WatchService提供了<strong>三种从队列中获取WatchKeys的方式：</strong></p>

<ol>
  <li>poll - 返回队列中的一个key。如果没有可用的key，将立即返回null。</li>
  <li>poll(long, TimeUnit) - 如果队列中存在可用的key则将之返回，否则在参数预置的时间内等待可用的key。TimeUnit用来指定前一个参数表示的时间是纳秒、毫秒或是其他的时间单位。
例子：final WatchKey watchKey = watchService.poll(1, TimeUnit.MINUTES);将会等待1分钟</li>
  <li>take - 方法将会等待直到可用的key被返回。</li>
</ol>

<p><strong>获取WatchKey后进行处理：</strong></p>

<ol>
  <li>通过WatchKey.pollEvents()函数得到WatchEvents列表。</li>
  <li>对于每一个WatchEvent，可以通过kind()函数获得其改动类型。</li>
  <li>通过WatchEvent.context()函数得到发生该事件的文件名</li>
  <li>当该key的所有事件处理完成后，需要调用WatchKey.reset()方法把该key重置为ready状态。若不重置，该key将无法接收后续的改动。若reset返回false，表示该WatchKey不再合法，主循环可以退出。</li>
</ol>

<p><figure class='code'><figcaption class='code-header'><span>WatchServiceTest</span> &mdash; <a href='https://github.com/cwind001/CwindJavaLab/blob/163448ce07ecca1738b306bed9bf1b39464d345c/FileMonitor/src/test/java/com/cwind/file/WatchServerTest.java'>link</a></figcaption> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">package</span> <span class="namespace">com.cwind.file</span>;&lt;/p&gt;

&lt;p&gt;<span class="keyword">import</span> <span class="include">java.io.IOException</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.FileSystems</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.Path</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.Paths</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.StandardWatchEventKinds</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.WatchEvent</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.WatchKey</span>;
<span class="keyword">import</span> <span class="include">java.nio.file.WatchService</span>;&lt;/p&gt;

&lt;p&gt;<span class="directive">public</span> <span class="type">class</span> <span class="class">WatchServerTest</span> {
    <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args) <span class="directive">throws</span> <span class="exception">InterruptedException</span>, 
        <span class="exception">IOException</span> {
        WatchService watchService 
            = FileSystems.getDefault().newWatchService();
        <span class="directive">final</span> Path path = Paths.get(<span class="error">“</span>.<span class="error">”</span>);
        <span class="directive">final</span> WatchKey watchKey = path.register(watchService, 
            StandardWatchEventKinds.ENTRY_MODIFY,
            StandardWatchEventKinds.ENTRY_CREATE,
            StandardWatchEventKinds.ENTRY_DELETE);
        <span class="type">boolean</span> fileNotChanged = <span class="predefined-constant">true</span>;
        <span class="type">int</span> count = <span class="integer">0</span>;
        <span class="keyword">while</span> (fileNotChanged) {
            <span class="directive">final</span> WatchKey wk = watchService.take();
            <span class="predefined-type">System</span>.out.println(<span class="error">“</span>Loop count: <span class="error">“</span> + count);
            <span class="keyword">for</span> (WatchEvent&amp;lt;?&amp;gt; event : wk.pollEvents()) {
                <span class="directive">final</span> Path changed = (Path) event.context();
                <span class="predefined-type">System</span>.out.println(changed + <span class="error">“</span>, <span class="error">“</span> + event.kind());
                <span class="keyword">if</span> (changed.endsWith(<span class="error">“</span>sample1.txt<span class="error">”</span>)) {
                    <span class="predefined-type">System</span>.out.println(<span class="error">“</span>Sample file has changed<span class="error">”</span>);
                }
            }
            <span class="comment">// reset the key</span>
            <span class="type">boolean</span> valid = wk.reset();
            <span class="keyword">if</span> (!valid) {
                <span class="predefined-type">System</span>.out.println(<span class="error">“</span><span class="predefined-type">Key</span> has been unregisterede<span class="error">”</span>);
            }
            count++;
        }
    }
}
</pre></td>
</tr></table>
 </figure><br />
总结，使用WatchService步骤如下：  </p>

<ol>
  <li>创建WatchService</li>
  <li>得到待检测目录的Path</li>
  <li>将目录登记到变化监测名单中</li>
  <li>执行WatchService的take()方法，直到WatchKey到来。</li>
  <li>得到WatchKey后遍历WatchEvent进行检测</li>
  <li>重置key准备下一个事件，继续等待  </li>
</ol>

<p>大多数文件系统实现包含了文件更改通知的本地支持，Watch Service API正是利用了文件系统的这种机制。若文件系统并不支持变更通知机制，Watch Service仍然会轮询文件系统，等待事件产生。</p>

<p><strong>References:</strong>  </p>

<ol>
  <li><a href="http://docs.oracle.com/javase/tutorial/essential/io/notification.html">Watching a Directory for Changes</a></li>
  <li><a href="http://java.dzone.com/articles/using-java-7s-watchservice">Using Java 7’s WatchService to Monitor Directories</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java PropertyDescriptor 应用及源码分析]]></title>
    <link href="http://cwind001.github.io/blog/2014/03/08/java-propertydescriptor/"/>
    <updated>2014-03-08T22:15:28+08:00</updated>
    <id>http://cwind001.github.io/blog/2014/03/08/java-propertydescriptor</id>
    <content type="html"><![CDATA[<p>前文<a href="http://gocwind.com/blog/2014/01/20/java-introspector/">从Introspector谈Java内省机制</a>提到了通过Introspector.getBeanInfo()方法获取属性描述符数组，进而读取属性值的方式，但未对PropertyDescriptor的应用和实现作进一步阐释，在此作个补完。<br />
<!--more-->
<strong>1. 概述</strong><br />
PropertyDescriptor描述Java Bean中通过一对存储器方法（getter / setter）导出的一个属性。我们可以通过该PropertyDescriptor对bean中的该属性进行读取和写入操作，也可以设置其getter / setter。<br />
<img src="http://dl2.iteye.com/upload/attachment/0094/6177/5c9f92d1-c105-38f0-88e5-18f00e4d5531.jpg"> <br />
<a href="http://www.oschina.net/code/explore/gcc-4.5.2/libjava/classpath/java/beans/PropertyDescriptor.java">PropertyDescriptor源码见此</a><br />
<strong>2. 关键接口及内部属性</strong>  </p>

<p><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
</pre></td>
  <td class="code"><pre> 
<span class="directive">public</span> <span class="predefined-type">PropertyDescriptor</span>(<span class="predefined-type">String</span> name, 
    <span class="predefined-type">Class</span>&lt;?&gt; beanClass) <span class="directive">throws</span> <span class="exception">IntrospectionException</span>  
<span class="directive">public</span> <span class="predefined-type">PropertyDescriptor</span>(<span class="predefined-type">String</span> name, <span class="predefined-type">Class</span>&lt;?&gt; beanClass, 
<span class="predefined-type">String</span> getMethodName, <span class="predefined-type">String</span> setMethodName) <span class="directive">throws</span> <span class="exception">IntrospectionException</span>&lt;br /&gt;
<span class="directive">public</span> <span class="predefined-type">PropertyDescriptor</span>(<span class="predefined-type">String</span> name, 
<span class="predefined-type">Method</span> readMethod, <span class="predefined-type">Method</span> writeMethod) <span class="directive">throws</span> <span class="exception">IntrospectionException</span>  &lt;/p&gt;

&lt;p&gt;<span class="directive">public</span> <span class="predefined-type">Class</span>&amp;lt;?&amp;gt; getPropertyType()&lt;br /&gt;
<span class="directive">public</span> <span class="predefined-type">Method</span> getReadMethod()&lt;br /&gt;
<span class="directive">public</span> <span class="predefined-type">Method</span> getWriteMethod()  &lt;/p&gt;

&lt;p&gt;<span class="directive">public</span> <span class="type">void</span> setReadMethod(<span class="predefined-type">Method</span> readMethod) <span class="directive">throws</span> <span class="exception">IntrospectionException</span>&lt;br /&gt;
<span class="directive">public</span> <span class="type">void</span> setWriteMethod(<span class="predefined-type">Method</span> writeMethod)&lt;br /&gt;
<span class="directive">public</span> <span class="type">boolean</span> equals(<span class="predefined-type">Object</span> o) &lt;br /&gt;
</pre></td>
</tr></table>
 </figure>  </p>

<p>相关的PropertyDescriptor内部属性如下：  </p>

<p><figure class='code'> <div class="CodeRay">
  <div class="code"><pre> 
    <span class="predefined-type">Class</span>&amp;lt;?&amp;gt; propertyType;     <span class="comment">//该属性的类型&lt;br /&gt;</span>
    <span class="predefined-type">Method</span> getMethod;     <span class="comment">//getter&lt;br /&gt;</span>
    <span class="predefined-type">Method</span> setMethod;     <span class="comment">//setter&lt;br /&gt;</span>
</pre></div>
</div>
 </figure><br />
还有继承自其父类FeatureDescriptor的功能，用于指定该属性的编程名称<br />
<strong>3. 简单应用</strong><br />
现有Person类如下：  </p>

<p><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
</pre></td>
  <td class="code"><pre> &lt;br /&gt;
<span class="keyword">package</span> <span class="namespace">com.cwind.property</span>;  &lt;/p&gt;

&lt;p&gt;<span class="directive">public</span> <span class="type">class</span> <span class="class">Person</span> {&lt;br /&gt;
        <span class="directive">private</span> <span class="predefined-type">String</span> name ;&lt;br /&gt;
        <span class="directive">private</span> <span class="type">int</span> age ;  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    <span class="directive">public</span> Person(){ <span class="local-variable">this</span>.name = <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>; <span class="local-variable">this</span>.age = <span class="integer">0</span>; }  
    <span class="directive">public</span> Person(<span class="predefined-type">String</span> name, <span class="type">int</span> age) { <span class="local-variable">super</span>(); <span class="local-variable">this</span>.name = name; 
<span class="local-variable">this</span>. age = age; }  
  
    <span class="directive">public</span> <span class="predefined-type">String</span> getName() { <span class="keyword">return</span> name; }  
    <span class="directive">public</span> <span class="type">void</span> setName(<span class="predefined-type">String</span> name) { <span class="local-variable">this</span>. name = name; }  
  
    <span class="directive">public</span> <span class="type">int</span> getAge() { <span class="keyword">return</span> age; }  
    <span class="directive">public</span> <span class="type">void</span> setAge(<span class="type">int</span> age) { <span class="local-variable">this</span>. age = age; }  
     
    <span class="directive">public</span> <span class="predefined-type">String</span> getNameInUpperCase(){  
           <span class="keyword">return</span> <span class="local-variable">this</span> .name .toUpperCase();  
   }  
    <span class="directive">public</span> <span class="type">void</span> setNameToLowerCase(<span class="predefined-type">String</span> name){  
           <span class="local-variable">this</span>.name = name.toLowerCase();  
   }   }   </pre></td>
</tr></table>
 </figure>  
</code></pre>

<p>该类中除了name和age两个属性的标准getter和setter之外，还有增加了一个获取大写name的get方法和一个将name设置为小写的set方法。<br />
在测试类中，首先获得这两个方法对象。  </p>

<p><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
</pre></td>
  <td class="code"><pre> 
<span class="predefined-type">Class</span> personClass = <span class="predefined-type">Class</span>.forName(<span class="error">“</span>com.cwind.property.Person<span class="error">”</span>);&lt;br /&gt;
<span class="predefined-type">Method</span> read = personClass.getMethod(<span class="error">“</span>getNameInUpperCase<span class="error">”</span>, <span class="predefined-constant">null</span>);&lt;br /&gt;
<span class="predefined-type">Method</span> write = personClass.getMethod(<span class="error">“</span>setNameToLowerCase<span class="error">”</span>, <span class="predefined-type">String</span>.class );  &lt;/p&gt;

&lt;p&gt;<span class="comment">//然后可以通过两种方式构造PropertyDescriptor&lt;br /&gt;</span>
<span class="predefined-type">PropertyDescriptor</span> prop1 = <span class="keyword">new</span> <span class="predefined-type">PropertyDescriptor</span>( <span class="error">“</span>name<span class="error">”</span>, Person.class );
     <span class="comment">//使用其标准getter和setter&lt;br /&gt;</span>
<span class="predefined-type">PropertyDescriptor</span> prop2 = <span class="keyword">new</span> <span class="predefined-type">PropertyDescriptor</span>( <span class="error">“</span>name<span class="error">”</span>, read, write);
     <span class="comment">//使用read和write两个方法对象所自定义的getter和setter  &lt;/p&gt;</span>

&lt;p&gt;<span class="comment">//下面构建一个Person对象&lt;br /&gt;</span>
Person person = <span class="keyword">new</span> Person(<span class="error">“</span>Kobe<span class="error">”</span> , <span class="integer">36</span>);&lt;br /&gt;
<span class="predefined-type">System</span>. out.println(prop1.getReadMethod().invoke(person, <span class="predefined-constant">null</span>));
     <span class="comment">// –实际调用Person.getName(), result: Kobe&lt;br /&gt;</span>
<span class="predefined-type">System</span>. out.println(prop2.getReadMethod().invoke(person, <span class="predefined-constant">null</span>));
     <span class="comment">// –实际调用Person.getNameInUpperCase(), result: KOBE  &lt;/p&gt;</span>

&lt;p&gt;prop1.getWriteMethod().invoke(person, <span class="error">“</span>James<span class="error">”</span>);
     <span class="comment">// –实际调用Person.setName(), person.name被设置为James&lt;br /&gt;</span>
prop2.getWriteMethod().invoke(person, <span class="error">“</span>James<span class="error">”</span>);
     <span class="comment">// –实际调用Person.setNameToLowerCase(), person.name被设置为james </span>
</pre></td>
</tr></table>
 </figure><br />
<strong>4. 源码分析</strong><br />
构造函数1：  </p>

<p><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
</pre></td>
  <td class="code"><pre> 
<span class="directive">public</span> <span class="predefined-type">PropertyDescriptor</span>(<span class="predefined-type">String</span> name, <span class="predefined-type">Class</span>&lt;?&gt; beanClass)  
        <span class="directive">throws</span> <span class="exception">IntrospectionException</span> {  
        setName(name);     <span class="comment">//设置属性编程名，本例中即'name'  </span>
        <span class="keyword">if</span> (name.length() == <span class="integer">0</span>){  
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">empty property name</span><span class="delimiter">&quot;</span></span>);       
<span class="comment">// 编程名为空则抛出异常  </span>
        }  
        <span class="predefined-type">String</span> caps = <span class="predefined-type">Character</span>.toUpperCase(name.charAt(<span class="integer">0</span>))
     + name.substring(<span class="integer">1</span>);       
<span class="comment">// 标准getter应为getName()或isName(), 先将首字母大写  </span>
        findMethods(beanClass, <span class="string"><span class="delimiter">&quot;</span><span class="content">is</span><span class="delimiter">&quot;</span></span> + caps, <span class="string"><span class="delimiter">&quot;</span><span class="content">get</span><span class="delimiter">&quot;</span></span> + caps, <span class="string"><span class="delimiter">&quot;</span><span class="content">set</span><span class="delimiter">&quot;</span></span> + caps);       
<span class="comment">// 参数依次为：类类型，可能的getter函数名1，可能的getter函数名2，setter函数名  </span>
        <span class="keyword">if</span> (getMethod == <span class="predefined-constant">null</span>){
   <span class="comment">// findMethods()设置PropertyDescriptor的getMethod和setMethod属性  </span>
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(  
                <span class="string"><span class="delimiter">&quot;</span><span class="content">Cannot find a is</span><span class="delimiter">&quot;</span></span> + caps + <span class="string"><span class="delimiter">&quot;</span><span class="content"> or get</span><span class="delimiter">&quot;</span></span> + caps + <span class="string"><span class="delimiter">&quot;</span><span class="content"> method</span><span class="delimiter">&quot;</span></span>);  
        }  
        <span class="keyword">if</span> (setMethod == <span class="predefined-constant">null</span>){  
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(  
                <span class="string"><span class="delimiter">&quot;</span><span class="content">Cannot find a </span><span class="delimiter">&quot;</span></span> + caps + <span class="string"><span class="delimiter">&quot;</span><span class="content"> method</span><span class="delimiter">&quot;</span></span> );  
        }  
        propertyType = checkMethods(getMethod, setMethod);       
<span class="comment">// checkMethods()函数用来检测getMethod得到的类型与setMethod的参数类型是否匹配，</span>
<span class="error">若</span><span class="error">匹</span><span class="error">配</span><span class="error">则</span><span class="error">置</span>propertyType<span class="error">为</span><span class="error">该</span><span class="error">类</span><span class="error">型</span>  
    }  
</pre></td>
</tr></table>
 </figure> 
构造函数2：  
`public PropertyDescriptor(String name, Class<?> beanClass, String getMethodName, String setMethodName) throws IntrospectionException<code>  
其实现与构造函数1类似，只是调用findMethods时直接查找指定的getter和setter函数名：  
        </code>findMethods(beanClass, getMethodName, null, setMethodName);<code>  
构造函数3则更加直观，直接设置方法对象  
</code>public PropertyDescriptor(String name, Method readMethod, Method writeMethod) throws IntrospectionException<code>  
两个比较重要的私有辅助函数分别为</code>findMethods()<code>和</code>checkMethods()`，分别看一下其实现<br />
findMethods用来按指定的getter和setter函数名在指定Class中查找getMethod和setMethod，并设置PropertyDescriptor的相关属性   </p>

<p><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
<a href="#n56" name="n56">56</a>
<a href="#n57" name="n57">57</a>
<a href="#n58" name="n58">58</a>
<a href="#n59" name="n59">59</a>
<strong><a href="#n60" name="n60">60</a></strong>
<a href="#n61" name="n61">61</a>
<a href="#n62" name="n62">62</a>
</pre></td>
  <td class="code"><pre> 
<span class="directive">private</span> <span class="type">void</span> findMethods(<span class="predefined-type">Class</span> beanClass,
 <span class="predefined-type">String</span> getMethodName1, <span class="predefined-type">String</span> getMethodName2, <span class="predefined-type">String</span> setMethodName)
 <span class="directive">throws</span> <span class="exception">IntrospectionException</span> {&lt;br /&gt;
        <span class="keyword">try</span> {&lt;br /&gt;
            <span class="comment">// 首先查找getMethodName1指定的getter (isXXX)&lt;br /&gt;</span>
            <span class="keyword">if</span> (getMethodName1 != <span class="predefined-constant">null</span>) {&lt;br /&gt;
                <span class="keyword">try</span> {&lt;br /&gt;
                    getMethod = beanClass.getMethod(getMethodName1,
     <span class="keyword">new</span> <span class="predefined-type">Class</span>[<span class="integer">0</span>]);&lt;br /&gt;
                }&lt;br /&gt;
                <span class="keyword">catch</span> (<span class="exception">NoSuchMethodException</span> e)&lt;br /&gt;
                {}&lt;br /&gt;
            }&lt;br /&gt;
            <span class="comment">// 若失败，则查找getMethodName2指定的getter (getXXX)&lt;br /&gt;</span>
            <span class="keyword">if</span> (getMethod == <span class="predefined-constant">null</span> &amp;amp;&amp;amp; getMethodName2 != <span class="predefined-constant">null</span>) {&lt;br /&gt;
                <span class="keyword">try</span> {&lt;br /&gt;
                    getMethod = beanClass.getMethod(getMethodName2,
     <span class="keyword">new</span> <span class="predefined-type">Class</span>[<span class="integer">0</span>]);&lt;br /&gt;
                }&lt;br /&gt;
                <span class="keyword">catch</span> (<span class="exception">NoSuchMethodException</span> e)&lt;br /&gt;
                {}&lt;br /&gt;
            }&lt;br /&gt;
            <span class="keyword">if</span> (setMethodName != <span class="predefined-constant">null</span>) {&lt;br /&gt;
                <span class="keyword">if</span> (getMethod != <span class="predefined-constant">null</span>) {&lt;br /&gt;
                    <span class="comment">// 如果得到了getMethod，则通过其返回值类型决定setMethod的参数类型&lt;br /&gt;</span>
                    <span class="predefined-type">Class</span> propertyType = getMethod.getReturnType();&lt;br /&gt;
                    <span class="keyword">if</span> (propertyType == <span class="predefined-type">Void</span>.TYPE) { &lt;br /&gt;
<span class="comment">// 若getter的返回值为Void类型则抛出异常&lt;br /&gt;</span>
                        <span class="predefined-type">String</span> msg
             = <span class="error">“</span>The property<span class="error">’</span>s read method has <span class="keyword">return</span> type <span class="error">‘</span><span class="type">void</span><span class="error">’</span><span class="error">”</span>;&lt;br /&gt;
                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(msg);&lt;br /&gt;
                    }  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                <span class="predefined-type">Class</span><span class="type">[]</span> setArgs = <span class="keyword">new</span> <span class="predefined-type">Class</span><span class="type">[]</span> { propertyType };   
                <span class="keyword">try</span> {  
                    setMethod = beanClass.getMethod(setMethodName,
 setArgs);    <span class="comment">// 通过函数名和参数类型获得setMethod  </span>
                }  
                <span class="keyword">catch</span> (<span class="exception">NoSuchMethodException</span> e)  
                {}  
            }  
            <span class="keyword">else</span> <span class="keyword">if</span> (getMethodName1 == <span class="predefined-constant">null</span> &amp;amp;&amp;amp; getMethodName2 == <span class="predefined-constant">null</span>) {   <span class="comment">// getMethodName1和2均为空，则此属性为只写属性，此时遍历bean中的函数， // 返回第一个名称与setMethodName一致且返回类型为Void的单参数函数  </span>
                <span class="predefined-type">Method</span><span class="type">[]</span> methods = beanClass.getMethods();  
                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="integer">0</span>; i &amp;lt; methods.length; i++) {  
                    <span class="keyword">if</span> (methods[i].getName().equals(setMethodName)  
                        &amp;amp;&amp;amp; methods[i].getParameterTypes().length == <span class="integer">1</span>  
                        &amp;amp;&amp;amp; methods[i].getReturnType() == <span class="predefined-type">Void</span>.TYPE) {  
                        setMethod = methods[i];  
                        <span class="keyword">break</span>;  
                    }  
                }  
            }  
        }  
    }  
    <span class="keyword">catch</span> (<span class="exception">SecurityException</span> e) {  
        <span class="predefined-type">String</span> msg
     = <span class="string"><span class="delimiter">&quot;</span><span class="content">SecurityException thrown on attempt to access methods.</span><span class="delimiter">&quot;</span></span>;
 <span class="comment">// 作者在纠结要不要修改异常类型  </span>
        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(msg);  
    }  
}   </pre></td>
</tr></table>
 </figure> checkMethods方法  
</code></pre>

<p><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
</pre></td>
  <td class="code"><pre> 
<span class="directive">private</span> <span class="predefined-type">Class</span>&lt;?&gt; checkMethods(<span class="predefined-type">Method</span> readMethod, <span class="predefined-type">Method</span> writeMethod)
 <span class="directive">throws</span> <span class="exception">IntrospectionException</span> {  
        <span class="predefined-type">Class</span>&lt;?&gt; newPropertyType = propertyType;&lt;br /&gt;
         <span class="comment">// 合法的read方法应该无参同时带有一个非空的返回值类型&lt;br /&gt;</span>
        <span class="keyword">if</span> (readMethod != <span class="predefined-constant">null</span>) {&lt;br /&gt;
            <span class="keyword">if</span> (readMethod.getParameterTypes().length &amp;gt; <span class="integer">0</span>) {&lt;br /&gt;
                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(<span class="error">“</span>read method
     has unexpected parameters<span class="error">”</span>);&lt;br /&gt;
            }&lt;br /&gt;
            newPropertyType = readMethod.getReturnType();&lt;br /&gt;
             <span class="keyword">if</span> (newPropertyType == <span class="predefined-type">Void</span>.TYPE) {&lt;br /&gt;
                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(<span class="error">“</span>read method
     <span class="keyword">return</span> type is <span class="type">void</span><span class="error">”</span>);&lt;br /&gt;
            }&lt;br /&gt;
        }&lt;br /&gt;
         <span class="comment">// 合法的write方法应该包含一个类型相同的参数&lt;br /&gt;</span>
        <span class="keyword">if</span> (writeMethod != <span class="predefined-constant">null</span>) {&lt;br /&gt;
            <span class="keyword">if</span> (writeMethod.getParameterTypes().length != <span class="integer">1</span>) {
     <span class="comment">// 参数不能超过一个&lt;br /&gt;</span>
                <span class="predefined-type">String</span> msg = <span class="error">“</span>write method
     does not have exactly one parameter<span class="error">”</span> ;&lt;br /&gt;
                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(msg);&lt;br /&gt;
            }&lt;br /&gt;
            <span class="keyword">if</span> (readMethod == <span class="predefined-constant">null</span>) {&lt;br /&gt;
                <span class="comment">// 若无read方法，属性类型就应为writeMethod的参数类型&lt;br /&gt;</span>
                newPropertyType = writeMethod.getParameterTypes()[<span class="integer">0</span>];&lt;br /&gt;
            }&lt;br /&gt;
            <span class="keyword">else</span> {&lt;br /&gt;
                <span class="comment">// 检查read方法的返回值类型是否与write方法的参数类型相匹配&lt;br /&gt;</span>
                <span class="keyword">if</span> (newPropertyType != <span class="predefined-constant">null</span>&lt;br /&gt;
                    &amp;amp;&amp;amp; !newPropertyType.isAssignableFrom(&lt;br /&gt;
                        writeMethod.getParameterTypes()[<span class="integer">0</span>])) {&lt;br /&gt;
                     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IntrospectionException</span>(<span class="error">“</span>read and write method&lt;br /&gt;
     are not compatible<span class="error">”</span>);&lt;br /&gt;
                }&lt;br /&gt;
            }&lt;br /&gt;
        }&lt;br /&gt;
         <span class="keyword">return</span> newPropertyType;&lt;br /&gt;
    }&lt;br /&gt;
</pre></td>
</tr></table>
 </figure><br />
最后提一句<code>PropertyDescriptor.equals()</code>,只有当属性类型、标志、读写方法和  <code>PropertyEditorClass</code> 均相同时才认为两个<code>PropertyDescriptor</code>相等  </p>

<p><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">return</span> samePropertyType&lt;br /&gt;
                &amp;amp;&amp;amp; sameFlags&lt;br /&gt;
                &amp;amp;&amp;amp; sameReadMethod&lt;br /&gt;
                &amp;amp;&amp;amp; sameWriteMethod&lt;br /&gt;
                &amp;amp;&amp;amp; samePropertyEditorClass; 
</pre></div>
</div>
 </figure>   </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从Introspector谈Java内省机制]]></title>
    <link href="http://cwind001.github.io/blog/2014/01/20/java-introspector/"/>
    <updated>2014-01-20T22:00:51+08:00</updated>
    <id>http://cwind001.github.io/blog/2014/01/20/java-introspector</id>
    <content type="html"><![CDATA[<p><strong>内省</strong><br />
内省是Java语言的一种重要特性。使用内省我们可以在运行时得到一个类的内部信息。这些信息包括方法、属性、构造函数及其他。内省的一个应用是开发使用插件的应用程序。应用程序可以在运行时获取并使用插件类的构造函数、方法和属性。内省也可以应用于创建Java Beans和Javadocs中。<br />
<!--more-->
<strong>Introspector类</strong><br />
Introspector类为访问目标Jave Bean支持的属性、事件和方法提供了标准方法。该方法可用于工具类（如BeanUtils）中。<br />
对于属性、事件和方法中的每一类信息，Introspector会分别分析目标bean以及其父类，寻找显式或隐式信息并用其构建一个能够全面描述目标bean的BeanInfo对象。<br />
<img src="http://dl2.iteye.com/upload/attachment/0093/3705/b0194712-7259-3d67-9f84-da5282bee5cb.jpg"><br />
通过调用Introspector.getBeanInfo()方法来获得指定类的bean信息。Java Bean规范允许通过实现BeanInfo接口，定义一个对象来描述bean。为了将BeanInfo与bean关联起来，须遵守如下命名模式：bean信息类的名字必须是将”BeanInfo”添加到bean名字的后面构成。例如：  </p>

<p><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
</pre></td>
  <td class="code"><pre> 
<span class="keyword">package</span> <span class="namespace">com.cwind.introspector</span>;  &lt;/p&gt;

&lt;p&gt;<span class="directive">public</span> <span class="type">class</span> <span class="class">Ultraman</span> <span class="directive">extends</span> Superhero {&lt;br /&gt;
        <span class="directive">public</span> <span class="predefined-type">String</span> avanta ;  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    <span class="directive">public</span> Ultraman(<span class="predefined-type">String</span> avanta) {  
           <span class="local-variable">super</span> ();  
           <span class="local-variable">this</span> .avanta = avanta;  
   }  
  
    <span class="directive">public</span> <span class="predefined-type">String</span> getAvanta() {  
           <span class="keyword">return</span> avanta ;  
   }  
  
    <span class="directive">public</span> <span class="type">void</span> setAvanta(<span class="predefined-type">String</span> avanta) {  
           <span class="local-variable">this</span> .avanta = avanta;  
   }   }   </pre></td>
</tr></table>
 </figure>   相关信息类：
</code></pre>

<p><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
</pre></td>
  <td class="code"><pre> 
<span class="keyword">package</span> <span class="namespace">com.cwind.introspector</span>;  &lt;/p&gt;

&lt;p&gt;<span class="keyword">import</span> <span class="include">java.beans.IntrospectionException</span>;&lt;br /&gt;
<span class="keyword">import</span> <span class="include">java.beans.PropertyDescriptor</span>;&lt;br /&gt;
<span class="keyword">import</span> <span class="include">java.beans.SimpleBeanInfo</span>;  &lt;/p&gt;

&lt;p&gt;<span class="directive">public</span> <span class="type">class</span> <span class="class">UltramanBeanInfo</span> <span class="directive">extends</span> <span class="predefined-type">SimpleBeanInfo</span> {&lt;br /&gt;
        <span class="directive">public</span> <span class="predefined-type">PropertyDescriptor</span><span class="type">[]</span> getPropertyDescriptors() {&lt;br /&gt;
               <span class="keyword">try</span> {&lt;br /&gt;
                      <span class="keyword">return</span> <span class="keyword">new</span> <span class="predefined-type">PropertyDescriptor</span><span class="type">[]</span>{&lt;br /&gt;
                        <span class="keyword">new</span> <span class="predefined-type">PropertyDescriptor</span>(<span class="error">“</span>avanta<span class="error">”</span> , Ultraman. class),&lt;br /&gt;
                        <span class="keyword">new</span> <span class="predefined-type">PropertyDescriptor</span>(<span class="error">“</span>name<span class="error">”</span> , Ultraman. class)&lt;br /&gt;
                     };&lt;br /&gt;
              } <span class="keyword">catch</span> (<span class="exception">IntrospectionException</span> e) {&lt;br /&gt;
                     e.printStackTrace();&lt;br /&gt;
                      <span class="keyword">return</span> <span class="predefined-constant">null</span> ;&lt;br /&gt;
              }&lt;br /&gt;
       }&lt;br /&gt;
}&lt;br /&gt;
</pre></td>
</tr></table>
 </figure>
信息类会先从Bean类所在的包内查找，如上例中搜索路径为com.cwind.introspector.UltramanBeanInfo。搜索路径也可以通过Introspector.setBeanInfoSearchPath()进行设置。使用BeanInfo类是为了获取对bean属性的控制权。只需提供属性名和所属的bean类，就可以为每个属性构建一个PropertyDescriptor。
演示类Superhero及其另一子类Titan定义：  </p>

<p><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
<a href="#n56" name="n56">56</a>
<a href="#n57" name="n57">57</a>
<a href="#n58" name="n58">58</a>
<a href="#n59" name="n59">59</a>
<strong><a href="#n60" name="n60">60</a></strong>
<a href="#n61" name="n61">61</a>
<a href="#n62" name="n62">62</a>
<a href="#n63" name="n63">63</a>
<a href="#n64" name="n64">64</a>
<a href="#n65" name="n65">65</a>
</pre></td>
  <td class="code"><pre> 
<span class="keyword">package</span> <span class="namespace">com.cwind.introspector</span>;  &lt;/p&gt;

&lt;p&gt;<span class="directive">public</span> <span class="type">class</span> <span class="class">Superhero</span> {&lt;br /&gt;
     <span class="directive">private</span> <span class="predefined-type">String</span> name ;&lt;br /&gt;
     <span class="directive">private</span> <span class="predefined-type">String</span> superPower ;&lt;br /&gt;
     <span class="directive">private</span> <span class="type">int</span> age ;  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt; <span class="directive">public</span> Superhero(){  
      <span class="local-variable">this</span>.name = <span class="string"><span class="delimiter">&quot;</span><span class="content">defaultName</span><span class="delimiter">&quot;</span></span> ;  
      <span class="local-variable">this</span>.superPower  = <span class="string"><span class="delimiter">&quot;</span><span class="content">defaultSuperPower</span><span class="delimiter">&quot;</span></span> ;  
      <span class="local-variable">this</span>.age = <span class="integer">0</span>;  
 }  
     
 <span class="directive">public</span> Superhero(<span class="predefined-type">String</span> name, <span class="predefined-type">String</span> superPower, <span class="type">int</span> age) {  
      <span class="local-variable">super</span>();  
      <span class="local-variable">this</span>.name = name;  
      <span class="local-variable">this</span>.superPower = superPower;  
      <span class="local-variable">this</span>.age = age;  
 }  
  
 <span class="directive">public</span> <span class="predefined-type">String</span> getName() {  
      <span class="keyword">return</span> name ;  
 }  
 <span class="directive">public</span> <span class="type">void</span> setName(<span class="predefined-type">String</span> name) {  
      <span class="local-variable">this</span>.name = name;  
 }  
 <span class="directive">public</span> <span class="predefined-type">String</span> getSuperPower() {  
      <span class="keyword">return</span> superPower ;  
 }  
 <span class="directive">public</span> <span class="type">void</span> setSuperPower(<span class="predefined-type">String</span> superPower) {  
      <span class="local-variable">this</span>.superPower = superPower;  
 }  
 <span class="directive">public</span> <span class="type">int</span> getAge() {  
      <span class="keyword">return</span> age ;  
 }  
 <span class="directive">public</span> <span class="type">void</span> setAge(<span class="type">int</span> age) {  
      <span class="local-variable">this</span>.age = age;  
 }   }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="keyword">package</span> <span class="namespace">com.cwind.introspector</span>;  &lt;/p&gt;

&lt;p&gt;<span class="directive">public</span> <span class="type">class</span> <span class="class">Titan</span> <span class="directive">extends</span> Superhero {&lt;br /&gt;
     <span class="directive">private</span> <span class="type">double</span> height ;&lt;br /&gt;
     <span class="directive">private</span> <span class="type">double</span> weight ;  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt; <span class="directive">public</span> Titan(<span class="type">double</span> height, <span class="type">double</span> weight) {  
      <span class="local-variable">super</span>();  
      <span class="local-variable">this</span>.height = height;  
      <span class="local-variable">this</span>.weight = weight;  
 }  
     
 <span class="directive">public</span> <span class="type">double</span> getHeight() {  
      <span class="keyword">return</span> height ;  
 }  
 <span class="directive">public</span> <span class="type">void</span> setHeight(<span class="type">double</span> height) {  
      <span class="local-variable">this</span>.height = height;  
 }  
 <span class="directive">public</span> <span class="type">double</span> getWeight() {  
      <span class="keyword">return</span> weight ;  
 }  
 <span class="directive">public</span> <span class="type">void</span> setWeight(<span class="type">double</span> weight) {  
      <span class="local-variable">this</span>.weight = weight;  
 }     }   </pre></td>
</tr></table>
 </figure>   可以看到，Ultraman类有一个显式的BeanInfo类，其中的属性描述符仅包括&#8221;avanta&#8221;和继承自父类的&#8221;name&#8221;。Titan没有显式的BeanInfo类。下面用一个测试类来打印Introspector获取的BeanInfo信息，分别打印两个Ultraman和Titan实例的属性名称及其对应的值，比较其异同。  
</code></pre>

<p><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
</pre></td>
  <td class="code"><pre> 
<span class="keyword">package</span> <span class="namespace">com.cwind.introspector</span>;  &lt;/p&gt;

&lt;p&gt;<span class="keyword">import</span> <span class="include">java.beans.IntrospectionException</span>;&lt;br /&gt;
<span class="keyword">import</span> <span class="include">java.beans.Introspector</span>;&lt;br /&gt;
<span class="keyword">import</span> <span class="include">java.beans.PropertyDescriptor</span>;&lt;br /&gt;
<span class="keyword">import</span> <span class="include">java.lang.reflect.InvocationTargetException</span>;  &lt;/p&gt;

&lt;p&gt;<span class="directive">public</span> <span class="type">class</span> <span class="class">IntrospectorTest</span> {&lt;br /&gt;
     <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args) 
    <span class="directive">throws</span> <span class="exception">IntrospectionException</span>, <span class="exception">IllegalArgumentException</span>,
     <span class="exception">IllegalAccessException</span>, <span class="exception">InvocationTargetException</span>{&lt;br /&gt;
          <span class="predefined-type">PropertyDescriptor</span><span class="type">[]</span> ultramanProps 
    = <span class="predefined-type">Introspector</span>.getBeanInfo(Ultraman.class).getPropertyDescriptors();&lt;br /&gt;
          Ultraman sailor = <span class="keyword">new</span> Ultraman(<span class="error">“</span>sailor<span class="error">”</span> );&lt;br /&gt;
          <span class="keyword">for</span>(<span class="predefined-type">PropertyDescriptor</span> prop : ultramanProps){
               <span class="predefined-type">System</span>. out.println(<span class="error">“</span>Property name: <span class="error">“</span> + prop.getName()
        + <span class="error">“</span>, value: <span class="error">“</span>+ prop.getReadMethod().invoke(sailor, <span class="predefined-constant">null</span>));&lt;br /&gt;
          }&lt;br /&gt;
          <span class="predefined-type">System</span>. out.println();&lt;br /&gt;
          <span class="predefined-type">PropertyDescriptor</span><span class="type">[]</span> titanProps 
    = <span class="predefined-type">Introspector</span>.getBeanInfo(Titan.class).getPropertyDescriptors();&lt;br /&gt;
          Titan titan = <span class="keyword">new</span> Titan(<span class="integer">999</span>,<span class="integer">888</span>);&lt;br /&gt;
          <span class="keyword">for</span>(<span class="predefined-type">PropertyDescriptor</span> prop : titanProps){&lt;br /&gt;
               <span class="predefined-type">System</span>. out.println(<span class="error">“</span>Property name: <span class="error">“</span> + prop.getName()
        + <span class="error">“</span>, value: <span class="error">“</span>+ prop.getReadMethod().invoke(titan, <span class="predefined-constant">null</span>));&lt;br /&gt;
          }&lt;br /&gt;
     }&lt;br /&gt;
}&lt;br /&gt;
</pre></td>
</tr></table>
 </figure> <br />
输出结果如下：</p>

<p><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre> 
Property name: avanta, value: sailor&lt;br /&gt;
Property name: name, value: defaultName  &lt;/p&gt;

&lt;p&gt;Property name: age, value: <span class="integer">0</span>&lt;br /&gt;
Property name: <span class="type">class</span>, <span class="class">value</span>: <span class="type">class</span> <span class="class">com</span>.cwind.introspector.Titan&lt;br /&gt;
Property name: height, value: <span class="float">999.0</span>&lt;br /&gt;
Property name: name, value: defaultName&lt;br /&gt;
Property name: superPower, value: defaultSuperPower&lt;br /&gt;
Property name: weight, value: <span class="float">888.0</span>&lt;br /&gt;
</pre></td>
</tr></table>
 </figure> <br />
可以看到，对于前者，只打印出其显式BeanInfo类中返回的属性描述符所对应的属性；对于后者，使用低层次的反射来获取所有属性，并按照属性名称字母序将属性描述符数组返回。
为了更好的性能，Introspector缓存BeanInfo；因此，若在使用多个类加载器的应用程序中使用Introspector须小心谨慎。可以调用Introspector.flushCaches或Introspector.flushFromCaches方法从缓存中清空内省的类。<br />
<strong>Reference：</strong><br />
1. <a href="http://docs.oracle.com/javase/6/docs/api/">Java API 1.6</a><br />
2. <a href="http://my.oschina.net/zookeeper/blog/179269">Java反射总结</a><br />
3. <a href="http://blog.csdn.net/hahalzb/article/details/5972421">Java内省机制</a><br />
4. <a href="http://www.blogjava.net/wiflish/archive/2007/03/05/101964.html">Java语言的反射和内省</a><br />
5. <a href="http://www.codeproject.com/Articles/235269/Using-Introspection-in-Java">Using Introspection in Java</a><br />
6. Java2核心技术 卷II：高级特性，第8章：JavaBean构件；【美】Cay S. Horstmann, Gary Cornell 著；机械工业出版社</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java时区转换与时间格式]]></title>
    <link href="http://cwind001.github.io/blog/2013/07/17/java-timezone-convertion/"/>
    <updated>2013-07-17T21:26:56+08:00</updated>
    <id>http://cwind001.github.io/blog/2013/07/17/java-timezone-convertion</id>
    <content type="html"><![CDATA[<p>本文介绍Java API 中 Date, Calendar, TimeZone和DateFormat的使用，以及不同时区时间相互转化的方法和原理。
<!--more--></p>

<p><strong>问题描述：</strong>
向处于不同时区的服务器发请求时需要考虑时区转换的问题。譬如，服务器位于东八区（北京时间，GMT+8:00），而身处东四区的用户想要查询当天的销售记录。则需把东四区的“今天”这个时间范围转换为服务器所在时区的时间范围。</p>

<p><em>Tips1. GMT时间：</em>即格林威治平时（Greenwich Mean Time）。平太阳时是与视太阳时对应的，由于地球轨道非圆形，运行速度岁地球与太阳距离改变而出现变化，因此视太阳时欠缺均匀性。为了纠正这种不均匀性，天文学家计算地球非圆形轨迹与极轴倾斜对视太阳时的效应。平太阳时就是指经修订之后的视太阳时。在格林威治子午线上的平太阳时称为世界时（UTC），又叫格林威治平时（GMT）。</p>

<p>类Date表示特定的瞬间，精确到毫秒。获得一个表示当前时间的Date对象有两种方式：   </p>

<p><figure class='code'> <div class="CodeRay">
  <div class="code"><pre> &lt;br /&gt;
<span class="predefined-type">Date</span> date = <span class="keyword">new</span> <span class="predefined-type">Date</span>();&lt;br /&gt;
<span class="predefined-type">Date</span> date = <span class="predefined-type">Calendar</span>.getInstance().getTime();&lt;br /&gt;
</pre></div>
</div>
 </figure> </p>

<p><strong>Date</strong>对象本身所存储的毫秒数可以通过date.getTime()方法得到；该函数返回自1970年1月1日 00:00:00 GMT以来此对象表示的毫秒数。</p>

<p><strong>Calendar</strong>的getInstance()方法有参数为TimeZone和Locale的重载，可以使用指定时区和语言环境获得一个日历。无参则使用默认时区和语言环境获得日历。</p>

<p><strong>TimeZone</strong>表示时区偏移量，本质上以毫秒数保存与GMT的差值。获取TimeZone可以通过时区ID，如”America/New_York”，也可以通过GMT+/-hh:mm来设定。例如北京时间可以表示为GMT+8:00。
TimeZone.getRawOffset()方法可以用来得到当前时区的标准时间到GMT的偏移量。上段提到的”America/New_York”和”GMT+8:00”两个时区的偏移量分别为-18000000和28800000。</p>

<p>于是问题就简单了，在时区间转换时间时，首先用原时间减掉原时间所在时区相对于GMT的偏移量，得到原时间相对与GMT的值，再加上目标时区相对GMT的偏移量即可。
这样得到的结果依然是毫秒数，需要按照指定日期格式重新转换成Date对象。</p>

<p><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
</pre></td>
  <td class="code"><pre> &lt;br /&gt;
<span class="keyword">import</span> <span class="include">java.text</span>.&lt;<span class="include">em</span>&gt;;  &lt;br /&gt;
<span class="keyword">import</span> <span class="include">java.util</span>.&lt;/<span class="include">em</span>&gt;;    &lt;/p&gt;

&lt;p&gt;<span class="directive">public</span> <span class="type">class</span> <span class="class">DateTransformer</span>&lt;br /&gt;
{&lt;br /&gt;
    <span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> <span class="predefined-type">String</span> DATE_FORMAT = <span class="error">“</span>MM/dd/yyyy HH:mm:ss<span class="error">”</span>;  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="directive">public</span> <span class="directive">static</span> <span class="predefined-type">String</span> dateTransformBetweenTimeZone(<span class="predefined-type">Date</span> sourceDate, 
<span class="predefined-type">DateFormat</span> formatter,  
    <span class="predefined-type">TimeZone</span> sourceTimeZone, <span class="predefined-type">TimeZone</span> targetTimeZone) {  
    <span class="predefined-type">Long</span> targetTime = sourceDate.getTime()
         - sourceTimeZone.getRawOffset() + targetTimeZone.getRawOffset();  
    <span class="keyword">return</span> DateTransformer.getTime(<span class="keyword">new</span> <span class="predefined-type">Date</span>(targetTime), formatter);  
}  
     
<span class="directive">public</span> <span class="directive">static</span> <span class="predefined-type">String</span> getTime(<span class="predefined-type">Date</span> date, <span class="predefined-type">DateFormat</span> formatter){  
   <span class="keyword">return</span> formatter.format(date);  
}  
     
<span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args){  
    <span class="predefined-type">DateFormat</span> formatter = <span class="keyword">new</span> <span class="predefined-type">SimpleDateFormat</span>(DATE_FORMAT);  
    <span class="predefined-type">Date</span> date = <span class="predefined-type">Calendar</span>.getInstance().getTime();  
    <span class="predefined-type">TimeZone</span> srcTimeZone = <span class="predefined-type">TimeZone</span>.getTimeZone(<span class="string"><span class="delimiter">&quot;</span><span class="content">EST</span><span class="delimiter">&quot;</span></span>);  
    <span class="predefined-type">TimeZone</span> destTimeZone = <span class="predefined-type">TimeZone</span>.getTimeZone(<span class="string"><span class="delimiter">&quot;</span><span class="content">GMT+8</span><span class="delimiter">&quot;</span></span>);  
    <span class="predefined-type">System</span>.out.println(DateTransformer.dateTransformBetweenTimeZone(
date, formatter, srcTimeZone, destTimeZone));  
}   }   </pre></td>
</tr></table>
 </figure>   *Tips2. 字面大数字赋值给long类型变量的问题* 上面函数中的targetTime是计算得来的，测试用例中我们可能需要通过毫秒数来构建几个日期对象，但是在赋值long time = 1374004799999 时会提示错误“The literal1374004799999 of type int is out of range”。代码中的数字字面值是int类型，因此超出了长度。在大数字后面加个&#8217;L&#8217;，long time = 1374004799999L即可正确赋值。 
</code></pre>

<p>DateFormat是是日期/时间格式化子类的抽象类，它以与语言无关的方式格式化并解析日期或时间。日期/时间格式化子类（如 SimpleDateFormat）允许进行格式化（也就是日期 -&gt; 文本）、解析（文本-&gt; 日期）和标准化。将日期表示为 Date 对象，或者表示为从 GMT（格林尼治标准时间）1970 年 1 月 1 日 00:00:00 这一刻开始的毫秒数。SimpleDateFormat则是一个以与语言环境有关的方式来格式化和解析日期的具体类，可以以“日期和时间模式”字符串指定日期和时间格式。我们函数中所用模式字符串为”MM/dd/yyyy HH:mm:ss”，则输出日期：”07/16/2013 04:00:00”</p>

<p>其他常见的模式字母定义如下：  </p>

<p><figure class='code'> <div class="CodeRay">
  <div class="code"><pre> &lt;br /&gt;
<span class="error">字</span><span class="error">母</span> <span class="error">日</span><span class="error">期</span><span class="error">或</span><span class="error">时</span><span class="error">间</span><span class="error">元</span><span class="error">素</span> <span class="error">表</span><span class="error">示</span> <span class="error">示</span><span class="error">例</span>
G    Era <span class="error">标</span><span class="error">志</span><span class="error">符</span>    Text    AD
y    <span class="error">年</span>    Year    <span class="integer">1996</span>; <span class="integer">96</span>
M    <span class="error">年</span><span class="error">中</span><span class="error">的</span><span class="error">月</span><span class="error">份</span>    Month    July; Jul; <span class="octal">07</span>
w    <span class="error">年</span><span class="error">中</span><span class="error">的</span><span class="error">周</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">27</span>
W    <span class="error">月</span><span class="error">份</span><span class="error">中</span><span class="error">的</span><span class="error">周</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">2</span>
D    <span class="error">年</span><span class="error">中</span><span class="error">的</span><span class="error">天</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">189</span>
d    <span class="error">月</span><span class="error">份</span><span class="error">中</span><span class="error">的</span><span class="error">天</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">10</span>
F    <span class="error">月</span><span class="error">份</span><span class="error">中</span><span class="error">的</span><span class="error">星</span><span class="error">期</span>    <span class="predefined-type">Number</span>    <span class="integer">2</span>
E    <span class="error">星</span><span class="error">期</span><span class="error">中</span><span class="error">的</span><span class="error">天</span><span class="error">数</span>    Text    Tuesday; Tue
a    Am/pm <span class="error">标</span><span class="error">记</span>    Text    PM
H    <span class="error">一</span><span class="error">天</span><span class="error">中</span><span class="error">的</span><span class="error">小</span><span class="error">时</span><span class="error">数</span><span class="error">（</span><span class="integer">0</span>-<span class="integer">23</span><span class="error">）</span>    <span class="predefined-type">Number</span>    <span class="integer">0</span>
k    <span class="error">一</span><span class="error">天</span><span class="error">中</span><span class="error">的</span><span class="error">小</span><span class="error">时</span><span class="error">数</span><span class="error">（</span><span class="integer">1</span>-<span class="integer">24</span><span class="error">）</span>    <span class="predefined-type">Number</span>    <span class="integer">24</span>
K    am/pm <span class="error">中</span><span class="error">的</span><span class="error">小</span><span class="error">时</span><span class="error">数</span><span class="error">（</span><span class="integer">0</span>-<span class="integer">11</span><span class="error">）</span>    <span class="predefined-type">Number</span>    <span class="integer">0</span>
h    am/pm <span class="error">中</span><span class="error">的</span><span class="error">小</span><span class="error">时</span><span class="error">数</span><span class="error">（</span><span class="integer">1</span>-<span class="integer">12</span><span class="error">）</span>    <span class="predefined-type">Number</span>    <span class="integer">12</span>
m    <span class="error">小</span><span class="error">时</span><span class="error">中</span><span class="error">的</span><span class="error">分</span><span class="error">钟</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">30</span>
s    <span class="error">分</span><span class="error">钟</span><span class="error">中</span><span class="error">的</span><span class="error">秒</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">55</span>
S    <span class="error">毫</span><span class="error">秒</span><span class="error">数</span>    <span class="predefined-type">Number</span>    <span class="integer">978</span>
z    <span class="error">时</span><span class="error">区</span>    General time zone    Pacific Standard <span class="predefined-type">Time</span>; PST; GMT-<span class="integer">08</span>:<span class="octal">00</span>
Z    <span class="error">时</span><span class="error">区</span>    RFC <span class="integer">822</span> time zone    -<span class="integer">0800</span>
</pre></div>
</div>
 </figure> </p>

<p><strong>References:</strong><br />
1. <a href="http://www.javaweb.cc/help/JavaAPI1.6/">Java API 1.6</a><br />
2. <a href="http://www.blogjava.net/liudawei/articles/387891.html">Java时区的转换</a><br />
3. <a href="http://www.cnblogs.com/mailingfeng/archive/2012/06/20/2556326.html">java时区-DateFormat和TimeZone关系</a><br />
4. <a href="http://blog.sina.com.cn/s/blog_4c44d3110100w0gn.html">java获取当前时区的时间</a>  </p>
]]></content>
  </entry>
  
</feed>
